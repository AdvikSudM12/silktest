#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
üîç –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô SILK PROJECT
====================================

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ Python –∏ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç.

–ó–∞–ø—É—Å–∫: python check_dependencies.py
"""

import os
import sys
import subprocess
import platform
from pathlib import Path
import json
from datetime import datetime

class Colors:
    """–¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'

def colored_print(message, color=Colors.WHITE):
    """–¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    if platform.system() == 'Windows':
        print(message)
    else:
        print(f"{color}{message}{Colors.END}")

def print_header():
    """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    colored_print("=" * 60, Colors.CYAN)
    colored_print("üîç –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô SILK PROJECT", Colors.BOLD)
    colored_print("=" * 60, Colors.CYAN)
    print()

def find_project_root():
    """–ù–∞—Ö–æ–¥–∏—Ç –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞"""
    current_dir = Path(__file__).parent
    project_root = current_dir.parent
    
    if (project_root / 'package.json').exists():
        return project_root
    
    for i in range(3):
        if (current_dir / 'package.json').exists():
            return current_dir
        current_dir = current_dir.parent
    
    return project_root

def check_python_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    colored_print("üêç –ü–†–û–í–ï–†–ö–ê PYTHON –û–ö–†–£–ñ–ï–ù–ò–Ø", Colors.BLUE)
    colored_print("-" * 40, Colors.BLUE)
    
    python_info = {}
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É Python
    python_commands = ['py', 'python', 'python3']
    python_cmd = None
    
    for cmd in python_commands:
        try:
            result = subprocess.run([cmd, '--version'], 
                                  capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                python_cmd = cmd
                python_info['command'] = cmd
                python_info['version'] = result.stdout.strip()
                colored_print(f"‚úÖ Python: {result.stdout.strip()} (–∫–æ–º–∞–Ω–¥–∞: {cmd})", Colors.GREEN)
                break
        except (subprocess.TimeoutExpired, FileNotFoundError):
            continue
    
    if not python_cmd:
        colored_print("‚ùå Python –Ω–µ –Ω–∞–π–¥–µ–Ω!", Colors.RED)
        return None, {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º pip
    try:
        result = subprocess.run([python_cmd, '-m', 'pip', '--version'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            python_info['pip_version'] = result.stdout.strip()
            colored_print(f"‚úÖ pip: {result.stdout.strip()}", Colors.GREEN)
        else:
            colored_print("‚ùå pip –Ω–µ –Ω–∞–π–¥–µ–Ω!", Colors.RED)
    except (subprocess.TimeoutExpired, FileNotFoundError):
        colored_print("‚ùå pip –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!", Colors.RED)
    
    print()
    return python_cmd, python_info

def check_python_modules(python_cmd):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Python –º–æ–¥—É–ª–µ–π"""
    colored_print("üì¶ –ü–†–û–í–ï–†–ö–ê PYTHON –ú–û–î–£–õ–ï–ô", Colors.BLUE)
    colored_print("-" * 40, Colors.BLUE)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
    required_modules = {
        'PyQt6': 'GUI –±–∏–±–ª–∏–æ—Ç–µ–∫–∞',
        'loguru': '–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è',
        'pandas': '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö',
        'openpyxl': '–†–∞–±–æ—Ç–∞ —Å Excel',
        'pathlib': '–†–∞–±–æ—Ç–∞ —Å –ø—É—Ç—è–º–∏ (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)',
        'json': 'JSON –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)',
        'os': '–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)',
        'sys': '–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)'
    }
    
    module_status = {}
    
    for module, description in required_modules.items():
        try:
            result = subprocess.run([python_cmd, '-c', f'import {module}; print({module}.__version__ if hasattr({module}, "__version__") else "–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π")'], 
                                  capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                version = result.stdout.strip()
                colored_print(f"‚úÖ {module}: {version} - {description}", Colors.GREEN)
                module_status[module] = {'status': 'ok', 'version': version, 'description': description}
            else:
                colored_print(f"‚ùå {module}: –Ω–µ –Ω–∞–π–¥–µ–Ω - {description}", Colors.RED)
                module_status[module] = {'status': 'missing', 'description': description}
        except (subprocess.TimeoutExpired, FileNotFoundError):
            colored_print(f"‚ùå {module}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - {description}", Colors.RED)
            module_status[module] = {'status': 'error', 'description': description}
    
    print()
    return module_status

def check_nodejs_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    colored_print("üì¶ –ü–†–û–í–ï–†–ö–ê NODE.JS –û–ö–†–£–ñ–ï–ù–ò–Ø", Colors.BLUE)
    colored_print("-" * 40, Colors.BLUE)
    
    nodejs_info = {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js (–∏—Å–ø–æ–ª—å–∑—É–µ–º shell=True –¥–ª—è Windows)
    try:
        if platform.system() == 'Windows':
            result = subprocess.run('node --version', shell=True,
                                  capture_output=True, text=True, timeout=10)
        else:
            result = subprocess.run(['node', '--version'], 
                                  capture_output=True, text=True, timeout=10)
                                  
        if result.returncode == 0:
            nodejs_info['node_version'] = result.stdout.strip()
            colored_print(f"‚úÖ Node.js: {result.stdout.strip()}", Colors.GREEN)
        else:
            colored_print("‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω!", Colors.RED)
            return {}
    except (subprocess.TimeoutExpired, FileNotFoundError):
        colored_print("‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω!", Colors.RED)
        return {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º npm (–∏—Å–ø–æ–ª—å–∑—É–µ–º shell=True –¥–ª—è Windows)
    try:
        if platform.system() == 'Windows':
            result = subprocess.run('npm --version', shell=True,
                                  capture_output=True, text=True, timeout=10)
        else:
            result = subprocess.run(['npm', '--version'], 
                                  capture_output=True, text=True, timeout=10)
                                  
        if result.returncode == 0:
            nodejs_info['npm_version'] = result.stdout.strip()
            colored_print(f"‚úÖ npm: {result.stdout.strip()}", Colors.GREEN)
        else:
            colored_print("‚ùå npm –Ω–µ –Ω–∞–π–¥–µ–Ω!", Colors.RED)
    except (subprocess.TimeoutExpired, FileNotFoundError):
        colored_print("‚ùå npm –Ω–µ –Ω–∞–π–¥–µ–Ω!", Colors.RED)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º yarn (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º shell=True –¥–ª—è Windows)
    try:
        if platform.system() == 'Windows':
            result = subprocess.run('yarn --version', shell=True,
                                  capture_output=True, text=True, timeout=10)
        else:
            result = subprocess.run(['yarn', '--version'], 
                                  capture_output=True, text=True, timeout=10)
                                  
        if result.returncode == 0:
            nodejs_info['yarn_version'] = result.stdout.strip()
            colored_print(f"‚úÖ yarn: {result.stdout.strip()}", Colors.GREEN)
        else:
            colored_print("‚ö†Ô∏è yarn –Ω–µ –Ω–∞–π–¥–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", Colors.YELLOW)
    except (subprocess.TimeoutExpired, FileNotFoundError):
        colored_print("‚ö†Ô∏è yarn –Ω–µ –Ω–∞–π–¥–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", Colors.YELLOW)
    
    print()
    return nodejs_info

def check_nodejs_packages(project_root):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js –ø–∞–∫–µ—Ç–æ–≤"""
    colored_print("üì¶ –ü–†–û–í–ï–†–ö–ê NODE.JS –ü–ê–ö–ï–¢–û–í", Colors.BLUE)
    colored_print("-" * 40, Colors.BLUE)
    
    # –ß–∏—Ç–∞–µ–º package.json
    package_json_path = project_root / 'package.json'
    if not package_json_path.exists():
        colored_print("‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω!", Colors.RED)
        return {}
    
    try:
        with open(package_json_path, 'r', encoding='utf-8') as f:
            package_data = json.load(f)
    except Exception as e:
        colored_print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json: {e}", Colors.RED)
        return {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º node_modules
    node_modules_path = project_root / 'node_modules'
    if not node_modules_path.exists():
        colored_print("‚ùå –ü–∞–ø–∫–∞ node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ó–∞–ø—É—Å—Ç–∏—Ç–µ npm install", Colors.RED)
        return {}
    
    colored_print(f"‚úÖ –ü–∞–ø–∫–∞ node_modules –Ω–∞–π–¥–µ–Ω–∞", Colors.GREEN)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞–∫–µ—Ç—ã
    key_packages = ['typescript', 'ts-node', 'axios', 'dotenv']
    package_status = {}
    
    for package in key_packages:
        package_path = node_modules_path / package
        if package_path.exists():
            try:
                package_json = package_path / 'package.json'
                if package_json.exists():
                    with open(package_json, 'r', encoding='utf-8') as f:
                        pkg_data = json.load(f)
                        version = pkg_data.get('version', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        colored_print(f"‚úÖ {package}: {version}", Colors.GREEN)
                        package_status[package] = {'status': 'ok', 'version': version}
                else:
                    colored_print(f"‚úÖ {package}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", Colors.GREEN)
                    package_status[package] = {'status': 'ok', 'version': '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
            except Exception:
                colored_print(f"‚úÖ {package}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", Colors.GREEN)
                package_status[package] = {'status': 'ok', 'version': '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
        else:
            colored_print(f"‚ùå {package}: –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.RED)
            package_status[package] = {'status': 'missing'}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ts-node (–∏—Å–ø–æ–ª—å–∑—É–µ–º shell=True –¥–ª—è Windows)
    original_dir = os.getcwd()
    try:
        os.chdir(project_root)
        if platform.system() == 'Windows':
            result = subprocess.run('npx ts-node --version', shell=True,
                                  capture_output=True, text=True, timeout=10)
        else:
            result = subprocess.run(['npx', 'ts-node', '--version'], 
                                  capture_output=True, text=True, timeout=10)
                                  
        if result.returncode == 0:
            colored_print(f"‚úÖ ts-node —á–µ—Ä–µ–∑ npx: —Ä–∞–±–æ—Ç–∞–µ—Ç", Colors.GREEN)
            package_status['ts-node-npx'] = {'status': 'ok'}
        else:
            colored_print(f"‚ùå ts-node —á–µ—Ä–µ–∑ npx: –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", Colors.RED)
            package_status['ts-node-npx'] = {'status': 'error'}
    except (subprocess.TimeoutExpired, FileNotFoundError):
        colored_print(f"‚ùå npx/ts-node –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω", Colors.RED)
        package_status['ts-node-npx'] = {'status': 'error'}
    finally:
        os.chdir(original_dir)
    
    print()
    return package_status

def check_project_files(project_root):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    colored_print("üìÅ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í –ü–†–û–ï–ö–¢–ê", Colors.BLUE)
    colored_print("-" * 40, Colors.BLUE)
    
    required_files = {
        'package.json': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Node.js',
        'requirements.txt': 'Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–æ—Å–Ω–æ–≤–Ω—ã–µ)',
        'scripts/requirements.txt': 'Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (—Å–∫—Ä–∏–ø—Ç—ã)',
        'run_app.py': '–ó–∞–ø—É—Å–∫ PyQt –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
        'pyqt_app/main.py': '–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
        'src/apps/release-parser-5/index.ts': 'TypeScript –ø–∞—Ä—Å–µ—Ä',
        'src/apps/update-releases-shipment-statuses/index.ts': 'TypeScript –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤'
    }
    
    file_status = {}
    
    for file_path, description in required_files.items():
        full_path = project_root / file_path
        if full_path.exists():
            file_size = full_path.stat().st_size
            colored_print(f"‚úÖ {file_path}: {file_size} –±–∞–π—Ç - {description}", Colors.GREEN)
            file_status[file_path] = {'status': 'ok', 'size': file_size, 'description': description}
        else:
            colored_print(f"‚ùå {file_path}: –Ω–µ –Ω–∞–π–¥–µ–Ω - {description}", Colors.RED)
            file_status[file_path] = {'status': 'missing', 'description': description}
    
    print()
    return file_status

def generate_report(python_info, module_status, nodejs_info, package_status, file_status):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    colored_print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢", Colors.PURPLE)
    colored_print("=" * 40, Colors.PURPLE)
    
    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_modules = len(module_status)
    ok_modules = sum(1 for status in module_status.values() if status['status'] == 'ok')
    
    total_packages = len(package_status)
    ok_packages = sum(1 for status in package_status.values() if status['status'] == 'ok')
    
    total_files = len(file_status)
    ok_files = sum(1 for status in file_status.values() if status['status'] == 'ok')
    
    colored_print(f"Python –º–æ–¥—É–ª–∏: {ok_modules}/{total_modules}", 
                 Colors.GREEN if ok_modules == total_modules else Colors.YELLOW)
    colored_print(f"Node.js –ø–∞–∫–µ—Ç—ã: {ok_packages}/{total_packages}", 
                 Colors.GREEN if ok_packages == total_packages else Colors.YELLOW)
    colored_print(f"–§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞: {ok_files}/{total_files}", 
                 Colors.GREEN if ok_files == total_files else Colors.YELLOW)
    
    # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    all_ok = (ok_modules == total_modules and 
              ok_packages == total_packages and 
              ok_files == total_files and 
              bool(python_info) and 
              bool(nodejs_info))
    
    print()
    if all_ok:
        colored_print("üéâ –í–°–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –£–°–¢–ê–ù–û–í–õ–ï–ù–´ –ö–û–†–†–ï–ö–¢–ù–û!", Colors.GREEN)
        colored_print("–ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!", Colors.GREEN)
    else:
        colored_print("‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –° –ó–ê–í–ò–°–ò–ú–û–°–¢–Ø–ú–ò", Colors.YELLOW)
        colored_print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ install.py –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", Colors.YELLOW)
    
    # –°–æ–∑–¥–∞–µ–º JSON –æ—Ç—á–µ—Ç
    report_data = {
        'timestamp': datetime.now().isoformat(),
        'system': {
            'os': platform.system(),
            'python_info': python_info,
            'nodejs_info': nodejs_info
        },
        'dependencies': {
            'python_modules': module_status,
            'nodejs_packages': package_status,
            'project_files': file_status
        },
        'summary': {
            'python_modules_ok': f"{ok_modules}/{total_modules}",
            'nodejs_packages_ok': f"{ok_packages}/{total_packages}",
            'project_files_ok': f"{ok_files}/{total_files}",
            'all_ok': all_ok
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    try:
        report_path = Path(__file__).parent / 'dependency_report.json'
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, ensure_ascii=False, indent=2)
        colored_print(f"\nüìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}", Colors.CYAN)
    except Exception as e:
        colored_print(f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç: {e}", Colors.YELLOW)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print_header()
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    project_root = find_project_root()
    colored_print(f"üéØ –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {project_root}", Colors.CYAN)
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
    python_cmd, python_info = check_python_environment()
    if not python_cmd:
        colored_print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞", Colors.RED)
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –º–æ–¥—É–ª–∏
    module_status = check_python_modules(python_cmd)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js
    nodejs_info = check_nodejs_environment()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js –ø–∞–∫–µ—Ç—ã
    package_status = check_nodejs_packages(project_root)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
    file_status = check_project_files(project_root)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    generate_report(python_info, module_status, nodejs_info, package_status, file_status)
    
    return True

if __name__ == "__main__":
    try:
        main()
        input("\n‚úÖ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    except KeyboardInterrupt:
        print("\n\nüõë –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        colored_print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", Colors.RED)
        input("\n‚ùå –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        sys.exit(1) 