#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
üöÄ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô SILK PROJECT
=====================================

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö Python –∏ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
–¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Silk. –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ª—é–±–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∏ –û–°.

–ó–∞–ø—É—Å–∫: python install.py
"""

import os
import sys
import subprocess
import platform
from pathlib import Path

class Colors:
    """–¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'

def colored_print(message, color=Colors.WHITE):
    """–¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    if platform.system() == 'Windows':
        # –ù–∞ Windows —Ü–≤–µ—Ç–∞ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –≤—ã–≤–æ–¥
        print(message)
    else:
        print(f"{color}{message}{Colors.END}")

def print_header():
    """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    colored_print("=" * 60, Colors.CYAN)
    colored_print("üöÄ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô SILK PROJECT", Colors.BOLD)
    colored_print("=" * 60, Colors.CYAN)
    print()

def find_project_root():
    """–ù–∞—Ö–æ–¥–∏—Ç –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –Ω–∞–ª–∏—á–∏—é package.json"""
    current_dir = Path(__file__).parent
    
    # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –≤–≤–µ—Ä—Ö (–∏–∑ setup/ –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞)
    project_root = current_dir.parent
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ package.json
    if (project_root / 'package.json').exists():
        colored_print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {project_root}", Colors.GREEN)
        return project_root
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for i in range(3):  # –ü–æ–∏—Å–∫ –º–∞–∫—Å–∏–º—É–º 3 —É—Ä–æ–≤–Ω—è –≤–≤–µ—Ä—Ö
        if (current_dir / 'package.json').exists():
            colored_print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {current_dir}", Colors.GREEN)
            return current_dir
        current_dir = current_dir.parent
    
    colored_print(f"‚ö†Ô∏è –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º: {project_root}", Colors.YELLOW)
    return project_root

def check_python():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Python"""
    colored_print("[1/4] –ü—Ä–æ–≤–µ—Ä–∫–∞ Python...", Colors.BLUE)
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã Python
    python_commands = ['py', 'python', 'python3']
    
    for cmd in python_commands:
        try:
            result = subprocess.run([cmd, '--version'], 
                                  capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                version = result.stdout.strip()
                colored_print(f"‚úÖ Python –Ω–∞–π–¥–µ–Ω: {version} (–∫–æ–º–∞–Ω–¥–∞: {cmd})", Colors.GREEN)
                return cmd
        except (subprocess.TimeoutExpired, FileNotFoundError):
            continue
    
    colored_print("‚ùå Python –Ω–µ –Ω–∞–π–¥–µ–Ω!", Colors.RED)
    colored_print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python —Å https://python.org", Colors.YELLOW)
    return None

def check_nodejs():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js"""
    colored_print("[2/4] –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js...", Colors.BLUE)
    
    node_found = False
    npm_found = False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js (–∏—Å–ø–æ–ª—å–∑—É–µ–º shell=True –¥–ª—è Windows)
        if platform.system() == 'Windows':
            result = subprocess.run('node --version', shell=True,
                                  capture_output=True, text=True, timeout=10)
        else:
            result = subprocess.run(['node', '--version'], 
                                  capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            node_version = result.stdout.strip()
            colored_print(f"‚úÖ Node.js –Ω–∞–π–¥–µ–Ω: {node_version}", Colors.GREEN)
            node_found = True
        else:
            colored_print("‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω!", Colors.RED)
            
    except (subprocess.TimeoutExpired, FileNotFoundError):
        colored_print("‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω!", Colors.RED)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º npm (–∏—Å–ø–æ–ª—å–∑—É–µ–º shell=True –¥–ª—è Windows)
        colored_print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º npm...", Colors.CYAN)
        if platform.system() == 'Windows':
            result = subprocess.run('npm --version', shell=True,
                                  capture_output=True, text=True, timeout=30)
        else:
            result = subprocess.run(['npm', '--version'], 
                                  capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            npm_version = result.stdout.strip()
            colored_print(f"‚úÖ npm –Ω–∞–π–¥–µ–Ω: {npm_version}", Colors.GREEN)
            npm_found = True
        else:
            colored_print(f"‚ùå npm –Ω–µ –Ω–∞–π–¥–µ–Ω! –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}", Colors.RED)
            colored_print(f"stderr: {result.stderr}", Colors.RED)
            
    except subprocess.TimeoutExpired:
        colored_print("‚ùå npm —Ç–∞–π–º–∞—É—Ç!", Colors.RED)
    except FileNotFoundError:
        colored_print("‚ùå npm –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", Colors.RED)
    except Exception as e:
        colored_print(f"‚ùå npm –æ—à–∏–±–∫–∞: {e}", Colors.RED)
    
    if not node_found or not npm_found:
        if not node_found:
            colored_print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js —Å https://nodejs.org", Colors.YELLOW)
        if not npm_found:
            colored_print("npm –¥–æ–ª–∂–µ–Ω –ø–æ—Å—Ç–∞–≤–ª—è—Ç—å—Å—è —Å Node.js", Colors.YELLOW)
        return False
    
    return True

def install_python_dependencies(python_cmd, project_root):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    colored_print("[3/4] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...", Colors.BLUE)
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ requirements.txt
    requirements_files = [
        project_root / 'requirements.txt',
        project_root / 'scripts' / 'requirements.txt'
    ]
    
    success = True
    
    # –û–±–Ω–æ–≤–ª—è–µ–º pip
    try:
        colored_print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip...", Colors.CYAN)
        subprocess.run([python_cmd, '-m', 'pip', 'install', '--upgrade', 'pip'], 
                      check=True)
        colored_print("‚úÖ pip –æ–±–Ω–æ–≤–ª–µ–Ω", Colors.GREEN)
    except subprocess.CalledProcessError:
        colored_print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å pip", Colors.YELLOW)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    for req_file in requirements_files:
        if req_file.exists():
            try:
                colored_print(f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑ {req_file.name}...", Colors.CYAN)
                subprocess.run([python_cmd, '-m', 'pip', 'install', '-r', str(req_file)], 
                              check=True)
                colored_print(f"‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ {req_file.name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", Colors.GREEN)
            except subprocess.CalledProcessError as e:
                colored_print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑ {req_file.name}: {e}", Colors.RED)
                success = False
        else:
            colored_print(f"‚ö†Ô∏è –§–∞–π–ª {req_file} –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.YELLOW)
    
    return success

def install_nodejs_dependencies(project_root):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    colored_print("[4/4] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...", Colors.BLUE)
    
    # –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    original_dir = os.getcwd()
    
    try:
        os.chdir(project_root)
        colored_print(f"üìÅ –ü–µ—Ä–µ—Ö–æ–¥ –≤ {project_root}", Colors.CYAN)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ package.json
        if not (project_root / 'package.json').exists():
            colored_print("‚ùå –§–∞–π–ª package.json –Ω–µ –Ω–∞–π–¥–µ–Ω!", Colors.RED)
            return False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
        package_manager = 'npm'
        if (project_root / 'yarn.lock').exists():
            try:
                if platform.system() == 'Windows':
                    subprocess.run('yarn --version', shell=True,
                                  capture_output=True, text=True, timeout=10)
                else:
                    subprocess.run(['yarn', '--version'], 
                                  capture_output=True, text=True, timeout=10)
                package_manager = 'yarn'
                colored_print("üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º yarn", Colors.CYAN)
            except (subprocess.TimeoutExpired, FileNotFoundError):
                colored_print("üîç Yarn –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º npm", Colors.CYAN)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        colored_print(f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ {package_manager}...", Colors.CYAN)
        
        if package_manager == 'yarn':
            if platform.system() == 'Windows':
                subprocess.run('yarn install', shell=True, check=True)
            else:
                subprocess.run(['yarn', 'install'], check=True)
        else:
            if platform.system() == 'Windows':
                subprocess.run('npm install', shell=True, check=True)
            else:
                subprocess.run(['npm', 'install'], check=True)
        
        colored_print("‚úÖ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", Colors.GREEN)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ts-node (–∏—Å–ø–æ–ª—å–∑—É–µ–º shell=True –¥–ª—è Windows)
        try:
            if platform.system() == 'Windows':
                result = subprocess.run('npx ts-node --version', shell=True,
                                      capture_output=True, text=True, timeout=10)
            else:
                result = subprocess.run(['npx', 'ts-node', '--version'], 
                                      capture_output=True, text=True, timeout=10)
                                      
            if result.returncode == 0:
                colored_print("‚úÖ ts-node —Ä–∞–±–æ—Ç–∞–µ—Ç", Colors.GREEN)
            else:
                colored_print("‚ö†Ô∏è ts-node –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å", Colors.YELLOW)
        except (subprocess.TimeoutExpired, FileNotFoundError):
            colored_print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å ts-node", Colors.YELLOW)
        
        return True
        
    except subprocess.CalledProcessError as e:
        colored_print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}", Colors.RED)
        return False
    finally:
        os.chdir(original_dir)

def final_check(python_cmd, project_root):
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    colored_print("\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê", Colors.PURPLE)
    colored_print("=" * 30, Colors.PURPLE)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –º–æ–¥—É–ª–µ–π
    python_modules = ['PyQt6', 'loguru', 'pandas', 'openpyxl']
    
    for module in python_modules:
        try:
            subprocess.run([python_cmd, '-c', f'import {module}'], 
                          check=True, capture_output=True)
            colored_print(f"‚úÖ {module}", Colors.GREEN)
        except subprocess.CalledProcessError:
            colored_print(f"‚ùå {module}", Colors.RED)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js (–∏—Å–ø–æ–ª—å–∑—É–µ–º shell=True –¥–ª—è Windows)
    original_dir = os.getcwd()
    try:
        os.chdir(project_root)
        if platform.system() == 'Windows':
            result = subprocess.run('npx ts-node --version', shell=True,
                                  capture_output=True, text=True, timeout=10)
        else:
            result = subprocess.run(['npx', 'ts-node', '--version'], 
                                  capture_output=True, text=True, timeout=10)
                                  
        if result.returncode == 0:
            colored_print("‚úÖ ts-node —Ä–∞–±–æ—Ç–∞–µ—Ç", Colors.GREEN)
        else:
            colored_print("‚ùå ts-node –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", Colors.RED)
    except (subprocess.TimeoutExpired, FileNotFoundError):
        colored_print("‚ùå npx/ts-node –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω", Colors.RED)
    finally:
        os.chdir(original_dir)

def print_success_message(project_root):
    """–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    print()
    colored_print("üéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!", Colors.GREEN)
    colored_print("=" * 40, Colors.GREEN)
    print()
    colored_print("–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:", Colors.BOLD)
    colored_print(f"  py {project_root}/run_app.py", Colors.CYAN)
    print()
    colored_print("–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤:", Colors.BOLD)
    colored_print("  npm run start:release-parser-5", Colors.CYAN)
    colored_print("  npm run start:update-releases-shipment-statuses", Colors.CYAN)
    print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print_header()
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    project_root = find_project_root()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
    python_cmd = check_python()
    if not python_cmd:
        colored_print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞", Colors.RED)
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js
    if not check_nodejs():
        colored_print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞", Colors.RED)
        return False
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not install_python_dependencies(python_cmd, project_root):
        colored_print("‚ö†Ô∏è –û—à–∏–±–∫–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", Colors.YELLOW)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not install_nodejs_dependencies(project_root):
        colored_print("‚ö†Ô∏è –û—à–∏–±–∫–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", Colors.YELLOW)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    final_check(python_cmd, project_root)
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    print_success_message(project_root)
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if success:
            input("\n‚úÖ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        else:
            input("\n‚ùå –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    except KeyboardInterrupt:
        print("\n\nüõë –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        colored_print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", Colors.RED)
        input("\n‚ùå –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        sys.exit(1) 