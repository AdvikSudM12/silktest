import pandas as pd
import os
from difflib import SequenceMatcher
from pathlib import Path
from datetime import datetime
from openpyxl.styles import PatternFill
import unicodedata
import re

# DEBUG: –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –∏–∑ pyqt_app
import sys
script_dir = Path(__file__).parent.parent
sys.path.append(str(script_dir))
from pyqt_app.logger_config import get_logger
debug_logger = get_logger("compare_files")

def normalize_filename(filename):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    if not filename or pd.isna(filename) or str(filename).strip() == '':
        return ''
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
    filename = str(filename).strip()
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è Unicode
    filename = unicodedata.normalize('NFKC', filename)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–µ–ª–æ–≤ –≤–æ–∫—Ä—É–≥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ —Å–∫–æ–±–∫–∞–º–∏, —Ç–æ—á–∫–∞–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏
    filename = re.sub(r'\s*([\(\)\[\]\{\}\.,\-_])\s*', r'\1', filename)
    
    # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
    filename = re.sub(r'\s+', ' ', filename)
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    filename = filename.lower()
    
    # –û—Ç–¥–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    name, ext = os.path.splitext(filename)
    if ext:
        # –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        ext = ext[1:] if ext.startswith('.') else ext
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ —Ç–æ—á–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        return f"{name.strip()}.{ext.strip()}"
    
    return filename.strip()

def calculate_similarity(a, b):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–¥—Å—Ç–≤–∞ –º–µ–∂–¥—É –¥–≤—É–º—è —Å—Ç—Ä–æ–∫–∞–º–∏"""
    if not a or not b:
        return 0
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º
    a = normalize_filename(a)
    b = normalize_filename(b)
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –∏–º—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    a_name, a_ext = os.path.splitext(a)
    b_name, b_ext = os.path.splitext(b)
    
    # –ï—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–∑–Ω—ã–µ, —É–º–µ–Ω—å—à–∞–µ–º —Å—Ö–æ–¥—Å—Ç–≤–æ
    if a_ext.lower() != b_ext.lower():
        return 0
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    similarity = SequenceMatcher(None, a_name, b_name).ratio() * 100
    
    return similarity

def find_closest_match(filename, file_list):
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º–æ–µ –ø–æ—Ö–æ–∂–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–¥—Å—Ç–≤–∞"""
    if not filename or pd.isna(filename) or str(filename).strip() == '':
        return '', 0
    
    normalized_filename = normalize_filename(filename)
    if not normalized_filename:
        return '', 0
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    print_debug_info(filename, normalized_filename)
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –∏–º—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏—Å–∫–æ–º–æ–≥–æ —Ñ–∞–π–ª–∞
    filename_name, filename_ext = os.path.splitext(normalized_filename)
    
    max_similarity = 0
    closest_match = None
    closest_match_original = None
    
    for original_file in file_list:
        normalized_file = normalize_filename(original_file)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        _, file_ext = os.path.splitext(normalized_file)
        
        # –ï—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–∑–Ω—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª
        if filename_ext.lower() != file_ext.lower():
            continue
            
        similarity = calculate_similarity(normalized_filename, normalized_file)
        if similarity > max_similarity:
            max_similarity = similarity
            closest_match = normalized_file
            closest_match_original = original_file
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
            print(f"\n–ù–∞–π–¥–µ–Ω–æ –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:")
            print(f"–ò—Å–∫–æ–º—ã–π —Ñ–∞–π–ª     : '{filename}'")
            print(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π  : '{normalized_filename}'")
            print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª   : '{original_file}'")
            print(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π  : '{normalized_file}'")
            print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–¥—Å—Ç–≤–∞ : {similarity}%")
    
    return closest_match_original, max_similarity

def find_char_differences(str1, str2):
    """–ù–∞—Ö–æ–¥–∏—Ç —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Å—Ç—Ä–æ–∫–∞–º–∏"""
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º
    str1 = normalize_filename(str1)
    str2 = normalize_filename(str2)
    
    char_differences = []
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã
    for i, (c1, c2) in enumerate(zip(str1, str2)):
        if c1 != c2:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–∏–π
            char_differences.append(f"–ü–æ–∑–∏—Ü–∏—è {i+1}: '{c1}' vs '{c2}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–ª–∏–Ω–µ
    if len(str1) != len(str2):
        min_len = min(len(str1), len(str2))
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        if len(str1) > min_len:
            extra = str1[min_len:]
            char_differences.append(f"–õ–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ: '{extra}'")
        if len(str2) > min_len:
            extra = str2[min_len:]
            char_differences.append(f"–õ–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ: '{extra}'")
    
    return '; '.join(char_differences) if char_differences else ''

def compare_files_with_excel(excel_file_path=None, directory_path=None):
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ Excel —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    
    Args:
        excel_file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ paths.json)
        directory_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ paths.json)
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –∫–ª—é—á–∞–º–∏ 'success', 'results_file', 'error_count', 'message'
    """
    debug_logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å Excel")
    debug_logger.debug(f"üìÑ Excel —Ñ–∞–π–ª: {excel_file_path}")
    debug_logger.debug(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory_path}")
    
    import json
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
    script_dir = Path(__file__).parent.parent
    debug_logger.debug(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {script_dir}")
    
    # –ï—Å–ª–∏ –ø—É—Ç–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ paths.json
    if not excel_file_path or not directory_path:
        debug_logger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—É—Ç–∏ –∏–∑ paths.json")
        paths_file = script_dir / 'pyqt_app' / 'data' / 'paths.json'
        debug_logger.debug(f"üìç –ü—É—Ç—å –∫ paths.json: {paths_file}")
        
        if os.path.exists(paths_file):
            debug_logger.success("‚úÖ –§–∞–π–ª paths.json –Ω–∞–π–¥–µ–Ω")
            try:
                with open(paths_file, 'r', encoding='utf-8') as f:
                    paths_data = json.load(f)
                    debug_logger.debug(f"üìä –î–∞–Ω–Ω—ã–µ –∏–∑ paths.json: {paths_data}")
                    
                    if not excel_file_path:
                        excel_file_path = paths_data.get('excel_file_path')
                        debug_logger.debug(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω Excel –ø—É—Ç—å: {excel_file_path}")
                    if not directory_path:
                        directory_path = paths_data.get('directory_path')
                        debug_logger.debug(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω –ø—É—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {directory_path}")
            except Exception as e:
                debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ paths.json: {str(e)}")
                return {
                    'success': False,
                    'message': f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ paths.json: {str(e)}",
                    'results_file': None,
                    'error_count': 0
                }
        else:
            debug_logger.warning("‚ö†Ô∏è –§–∞–π–ª paths.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—É—Ç–µ–π
    debug_logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—É—Ç–µ–π")
    if not excel_file_path:
        debug_logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É")
        return {
            'success': False,
            'message': "–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É",
            'results_file': None,
            'error_count': 0
        }
    
    if not directory_path:
        debug_logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏")
        return {
            'success': False,
            'message': "–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏",
            'results_file': None,
            'error_count': 0
        }
    
    debug_logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤")
    if not os.path.exists(excel_file_path):
        debug_logger.error(f"‚ùå Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_file_path}")
        return {
            'success': False,
            'message': f"Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_file_path}",
            'results_file': None,
            'error_count': 0
        }
        
    if not os.path.exists(directory_path):
        debug_logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {directory_path}")
        return {
            'success': False,
            'message': f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {directory_path}",
            'results_file': None,
            'error_count': 0
        }    
    
    debug_logger.success("‚úÖ –í—Å–µ –ø—É—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é results, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    results_dir = script_dir / 'results'
    debug_logger.debug(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {results_dir}")
    if not os.path.exists(results_dir):
        os.makedirs(results_dir)
        debug_logger.info("üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    debug_logger.info("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    actual_files = [f for f in os.listdir(directory_path)]
    debug_logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(actual_files)} —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    debug_logger.debug(f"üìù –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤: {actual_files[:10]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
    
    try:
        debug_logger.info("üìñ –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª")
        # –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –õ–∏—Å—Ç1 –∏–∑ Excel —Ñ–∞–π–ª–∞
        df = pd.read_excel(excel_file_path, sheet_name='–õ–∏—Å—Ç1', engine='openpyxl')
        debug_logger.success(f"‚úÖ Excel —Ñ–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Å—Ç—Ä–æ–∫: {len(df)}")
    except Exception as e:        
        debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {str(e)}")
        return {
            'success': False,
            'message': f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {str(e)}",
            'results_file': None,
            'error_count': 0
        }# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    required_columns = ['track (titel)', 'cover (titel)']
    if not all(col in df.columns for col in required_columns):
        return {
            'success': False,
            'message': f"–í Excel —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {required_columns}",
            'results_file': None,
            'error_count': 0
        }

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    all_results = []

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –≤ Excel
    for index, row in df.iterrows():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–∫–∏
        track_name = row['track (titel)']
        if pd.notna(track_name) and str(track_name).strip():
            closest_track, track_similarity = find_closest_match(track_name, actual_files)
            if track_similarity < 100:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–ª–∏—á–∏—è
                differences = find_char_differences(str(track_name), str(closest_track))
                all_results.append({
                    '–¢–∏–ø —Ñ–∞–π–ª–∞': '–¢—Ä–µ–∫',
                    '–ù–∞–∑–≤–∞–Ω–∏–µ –≤ Excel': track_name,
                    '–ù–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ': closest_track if closest_track else '–ù–µ –Ω–∞–π–¥–µ–Ω',
                    '–ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ': closest_track if closest_track else '',
                    '–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–¥—Å—Ç–≤–∞': round(track_similarity, 2),
                    '–†–∞–∑–ª–∏—á–∏—è': differences
                })

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–ª–æ–∂–∫–∏
        cover_name = row['cover (titel)']
        if pd.notna(cover_name) and str(cover_name).strip():
            closest_cover, cover_similarity = find_closest_match(cover_name, actual_files)
            if cover_similarity < 100:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–ª–∏—á–∏—è
                differences = find_char_differences(str(cover_name), str(closest_cover))
                all_results.append({
                    '–¢–∏–ø —Ñ–∞–π–ª–∞': '–û–±–ª–æ–∂–∫–∞',
                    '–ù–∞–∑–≤–∞–Ω–∏–µ –≤ Excel': cover_name,
                    '–ù–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ': closest_cover if closest_cover else '–ù–µ –Ω–∞–π–¥–µ–Ω',
                    '–ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ': closest_cover if closest_cover else '',
                    '–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–¥—Å—Ç–≤–∞': round(cover_similarity, 2),
                    '–†–∞–∑–ª–∏—á–∏—è': differences
                })

    # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_df = pd.DataFrame(all_results)
    
    # –°–æ–∑–¥–∞–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    output_file = results_dir / f"file_comparison_results_{timestamp}.xlsx"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –Ω–æ–≤—ã–π Excel —Ñ–∞–π–ª
    with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
        results_df.to_excel(writer, index=False, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã')
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á–∏–π –ª–∏—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        worksheet = writer.sheets['–†–µ–∑—É–ª—å—Ç–∞—Ç—ã']
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –≤—ã–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–∏–∑–∫–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º —Å—Ö–æ–¥—Å—Ç–≤–∞
        red_fill = PatternFill(start_color='FFFF0000', end_color='FFFF0000', fill_type='solid')
        yellow_fill = PatternFill(start_color='FFFF00', end_color='FFFF00', fill_type='solid')
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        for column in worksheet.columns:
            max_length = 0
            column = [cell for cell in column]
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = (max_length + 2)
            worksheet.column_dimensions[column[0].column_letter].width = adjusted_width
          # –í—ã–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Ü–≤–µ—Ç–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å—Ö–æ–¥—Å—Ç–≤–∞
        for row in range(2, len(all_results) + 2):  # +2 because Excel is 1-based and we have header
            similarity = worksheet.cell(row=row, column=5).value  # –ö–æ–ª–æ–Ω–∫–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º —Å—Ö–æ–¥—Å—Ç–≤–∞
            if similarity < 50:
                for col in range(1, 7):
                    worksheet.cell(row=row, column=col).fill = red_fill
            elif similarity < 80:
                for col in range(1, 7):
                    worksheet.cell(row=row, column=col).fill = yellow_fill
    
    error_count = len(all_results)
    success_message = f"–ù–∞–π–¥–µ–Ω–æ {error_count} —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞–∑–ª–∏—á–∏—è–º–∏" if error_count > 0 else "–í—Å–µ —Ñ–∞–π–ª—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∑–∞–ø–∏—Å—è–º –≤ Excel"
    
    return {
        'success': True,
        'message': success_message,
        'results_file': str(output_file),
        'error_count': error_count,
        'results_data': all_results    }


def print_debug_info(filename, normalized_filename):
    """–í—ã–≤–æ–¥–∏—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞"""
    print(f"\n–ò—Å–∫–æ–º—ã–π —Ñ–∞–π–ª: '{filename}'")
    print(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: '{normalized_filename}'")


def compare_files_interactive():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
    script_dir = Path(__file__).parent.parent
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    files_directory = script_dir / 'src' / 'apps' / 'release-parser-5' / 'files'
    excel_file = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É: ")
    
    result = compare_files_with_excel(excel_file, str(files_directory))
    
    if result['success']:
        print(f"\n{result['message']}")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {result['results_file']}")
    else:
        print(f"–û—à–∏–±–∫–∞: {result['message']}")


if __name__ == "__main__":
    compare_files_interactive()
