import pandas as pd
import os
from difflib import SequenceMatcher
from pathlib import Path
from datetime import datetime
from openpyxl.styles import PatternFill, Font, Alignment
from openpyxl.utils.dataframe import dataframe_to_rows
import unicodedata
import re

# DEBUG: –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –∏–∑ pyqt_app
import sys
script_dir = Path(__file__).parent.parent
sys.path.append(str(script_dir))
from pyqt_app.logger_config import get_logger
debug_logger = get_logger("compare_files")

def normalize_filename(filename):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    if not filename or pd.isna(filename) or str(filename).strip() == '':
        return ''
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
    filename = str(filename).strip()
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è Unicode
    filename = unicodedata.normalize('NFKC', filename)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–µ–ª–æ–≤ –≤–æ–∫—Ä—É–≥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ —Å–∫–æ–±–∫–∞–º–∏, —Ç–æ—á–∫–∞–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏
    filename = re.sub(r'\s*([\(\)\[\]\{\}\.,\-_])\s*', r'\1', filename)
    
    # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
    filename = re.sub(r'\s+', ' ', filename)
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    filename = filename.lower()
    
    # –û—Ç–¥–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    name, ext = os.path.splitext(filename)
    if ext:
        # –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        ext = ext[1:] if ext.startswith('.') else ext
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ —Ç–æ—á–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        return f"{name.strip()}.{ext.strip()}"
    
    return filename.strip()

def calculate_similarity(a, b):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–¥—Å—Ç–≤–∞ –º–µ–∂–¥—É –¥–≤—É–º—è —Å—Ç—Ä–æ–∫–∞–º–∏"""
    if not a or not b:
        return 0
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º
    a = normalize_filename(a)
    b = normalize_filename(b)
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –∏–º—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    a_name, a_ext = os.path.splitext(a)
    b_name, b_ext = os.path.splitext(b)
    
    # –ï—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–∑–Ω—ã–µ, —É–º–µ–Ω—å—à–∞–µ–º —Å—Ö–æ–¥—Å—Ç–≤–æ
    if a_ext.lower() != b_ext.lower():
        return 0
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    similarity = SequenceMatcher(None, a_name, b_name).ratio() * 100
    
    return similarity

def find_closest_match(filename, file_list):
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º–æ–µ –ø–æ—Ö–æ–∂–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–¥—Å—Ç–≤–∞"""
    if not filename or pd.isna(filename) or str(filename).strip() == '':
        return '', 0
    
    normalized_filename = normalize_filename(filename)
    if not normalized_filename:
        return '', 0
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    debug_logger.info(f"\nüîç –ò—Å–∫–æ–º—ã–π —Ñ–∞–π–ª: '{filename}'")
    debug_logger.info(f"üîß –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: '{normalized_filename}'")
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –∏–º—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏—Å–∫–æ–º–æ–≥–æ —Ñ–∞–π–ª–∞
    filename_name, filename_ext = os.path.splitext(normalized_filename)
    
    max_similarity = 0
    closest_match = None
    closest_match_original = None
    
    for original_file in file_list:
        normalized_file = normalize_filename(original_file)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        _, file_ext = os.path.splitext(normalized_file)
        
        # –ï—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–∑–Ω—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª
        if filename_ext.lower() != file_ext.lower():
            continue
            
        similarity = calculate_similarity(normalized_filename, normalized_file)
        if similarity > max_similarity:
            max_similarity = similarity
            closest_match = normalized_file
            closest_match_original = original_file
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
            debug_logger.debug(f"\nüéØ –ù–∞–π–¥–µ–Ω–æ –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:")
            debug_logger.debug(f"üìù –ò—Å–∫–æ–º—ã–π —Ñ–∞–π–ª     : '{filename}'")
            debug_logger.debug(f"üîß –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π  : '{normalized_filename}'")
            debug_logger.debug(f"üìÅ –ù–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª   : '{original_file}'")
            debug_logger.debug(f"üîß –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π  : '{normalized_file}'")
            debug_logger.debug(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–¥—Å—Ç–≤–∞ : {similarity}%")
    
    return closest_match_original, max_similarity

def find_char_differences(str1, str2):
    """–ù–∞—Ö–æ–¥–∏—Ç —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Å—Ç—Ä–æ–∫–∞–º–∏"""
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º
    str1 = normalize_filename(str1)
    str2 = normalize_filename(str2)
    
    char_differences = []
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã
    for i, (c1, c2) in enumerate(zip(str1, str2)):
        if c1 != c2:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–∏–π
            char_differences.append(f"–ü–æ–∑–∏—Ü–∏—è {i+1}: '{c1}' vs '{c2}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–ª–∏–Ω–µ
    if len(str1) != len(str2):
        min_len = min(len(str1), len(str2))
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        if len(str1) > min_len:
            extra = str1[min_len:]
            char_differences.append(f"–õ–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ: '{extra}'")
        if len(str2) > min_len:
            extra = str2[min_len:]
            char_differences.append(f"–õ–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ: '{extra}'")
    
    return '; '.join(char_differences) if char_differences else ''

def compare_files_with_excel(excel_file_path=None, directory_path=None):
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ Excel —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    
    Args:
        excel_file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ paths.json)
        directory_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ paths.json)
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –∫–ª—é—á–∞–º–∏ 'success', 'results_file', 'error_count', 'message'
    """
    debug_logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å Excel")
    debug_logger.debug(f"üìÑ Excel —Ñ–∞–π–ª: {excel_file_path}")
    debug_logger.debug(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory_path}")
    
    import json
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
    script_dir = Path(__file__).parent.parent
    debug_logger.debug(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {script_dir}")
    
    # –ï—Å–ª–∏ –ø—É—Ç–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ paths.json
    if not excel_file_path or not directory_path:
        debug_logger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—É—Ç–∏ –∏–∑ paths.json")
        paths_file = script_dir / 'pyqt_app' / 'data' / 'paths.json'
        debug_logger.debug(f"üìç –ü—É—Ç—å –∫ paths.json: {paths_file}")
        
        if os.path.exists(paths_file):
            debug_logger.success("‚úÖ –§–∞–π–ª paths.json –Ω–∞–π–¥–µ–Ω")
            try:
                with open(paths_file, 'r', encoding='utf-8') as f:
                    paths_data = json.load(f)
                    debug_logger.debug(f"üìä –î–∞–Ω–Ω—ã–µ –∏–∑ paths.json: {paths_data}")
                    
                    if not excel_file_path:
                        excel_file_path = paths_data.get('excel_file_path')
                        debug_logger.debug(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω Excel –ø—É—Ç—å: {excel_file_path}")
                    if not directory_path:
                        directory_path = paths_data.get('directory_path')
                        debug_logger.debug(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω –ø—É—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {directory_path}")
            except Exception as e:
                debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ paths.json: {str(e)}")
                return {
                    'success': False,
                    'message': f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ paths.json: {str(e)}",
                    'results_file': None,
                    'error_count': 0
                }
        else:
            debug_logger.warning("‚ö†Ô∏è –§–∞–π–ª paths.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—É—Ç–µ–π
    debug_logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—É—Ç–µ–π")
    if not excel_file_path:
        debug_logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É")
        return {
            'success': False,
            'message': "–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É",
            'results_file': None,
            'error_count': 0
        }
    
    if not directory_path:
        debug_logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏")
        return {
            'success': False,
            'message': "–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏",
            'results_file': None,
            'error_count': 0
        }
    
    debug_logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤")
    if not os.path.exists(excel_file_path):
        debug_logger.error(f"‚ùå Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_file_path}")
        return {
            'success': False,
            'message': f"Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_file_path}",
            'results_file': None,
            'error_count': 0
        }
        
    if not os.path.exists(directory_path):
        debug_logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {directory_path}")
        return {
            'success': False,
            'message': f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {directory_path}",
            'results_file': None,
            'error_count': 0
        }    
    
    debug_logger.success("‚úÖ –í—Å–µ –ø—É—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é results, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    results_dir = script_dir / 'results'
    debug_logger.debug(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {results_dir}")
    if not os.path.exists(results_dir):
        os.makedirs(results_dir)
        debug_logger.info("üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    debug_logger.info("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    actual_files = [f for f in os.listdir(directory_path)]
    debug_logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(actual_files)} —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    debug_logger.debug(f"üìù –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤: {actual_files[:10]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
    
    try:
        debug_logger.info("üìñ –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª")
        # –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –õ–∏—Å—Ç1 –∏–∑ Excel —Ñ–∞–π–ª–∞
        df = pd.read_excel(excel_file_path, sheet_name='–õ–∏—Å—Ç1', engine='openpyxl')
        debug_logger.success(f"‚úÖ Excel —Ñ–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Å—Ç—Ä–æ–∫: {len(df)}")
    except Exception as e:        
        debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {str(e)}")
        return {
            'success': False,
            'message': f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {str(e)}",
            'results_file': None,
            'error_count': 0
        }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    required_columns = ['track (titel)', 'cover (titel)']
    if not all(col in df.columns for col in required_columns):
        return {
            'success': False,
            'message': f"–í Excel —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {required_columns}",
            'results_file': None,
            'error_count': 0
        }
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö Excel —Ñ–∞–π–ª–∞
    debug_logger.info(f"üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ Excel —Ñ–∞–π–ª–µ: {list(df.columns)}")
    if 'release_name' in df.columns:
        debug_logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'release_name' –Ω–∞–π–¥–µ–Ω–∞ –≤ Excel —Ñ–∞–π–ª–µ")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –∏–º–µ—é—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É release_name
        filled_releases = df['release_name'].notna().sum()
        total_rows = len(df)
        debug_logger.info(f"üìä –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–ª–∏–∑–æ–≤: {filled_releases}/{total_rows}")
        if filled_releases > 0:
            unique_releases = df['release_name'].dropna().unique()
            debug_logger.info(f"üéµ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–ª–∏–∑—ã: {list(unique_releases)}")
    else:
        debug_logger.warning("‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ 'release_name' –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ Excel —Ñ–∞–π–ª–µ - –≤—Å–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –æ—Ç–Ω–µ—Å–µ–Ω—ã –∫ '–ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞'")

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    all_results = []
    errors_only = []
    statistics = {
        'total_excel_tracks': 0,
        'total_excel_covers': 0,
        'total_actual_files': len(actual_files),
        'perfect_matches': 0,
        'partial_matches': 0,
        'no_matches': 0,
        'tracks_processed': 0,
        'covers_processed': 0,
        'similarity_ranges': {
            '90-100%': 0,
            '80-89%': 0,
            '50-79%': 0,
            '0-49%': 0
        }
    }

    # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    used_files = set()
    excel_files = set()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –≤ Excel
    debug_logger.info("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ Excel")
    total_rows = len(df)
    debug_logger.info(f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_rows}")
    
    for index, row in df.iterrows():
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å—Ç—Ä–æ–∫
        if (index + 1) % 10 == 0 or index == 0:
            debug_logger.debug(f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {index + 1}/{total_rows}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–∫–∏
        track_name = row['track (titel)']
        if pd.notna(track_name) and str(track_name).strip():
            statistics['total_excel_tracks'] += 1
            statistics['tracks_processed'] += 1
            normalized_track = normalize_filename(str(track_name))
            excel_files.add(normalized_track)
            
            closest_track, track_similarity = find_closest_match(track_name, actual_files)
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É —Å—Ö–æ–¥—Å—Ç–≤–∞
            if track_similarity >= 90:
                statistics['similarity_ranges']['90-100%'] += 1
                if track_similarity == 100:
                    statistics['perfect_matches'] += 1
                else:
                    statistics['partial_matches'] += 1
            elif track_similarity >= 80:
                statistics['similarity_ranges']['80-89%'] += 1
                statistics['partial_matches'] += 1
            elif track_similarity >= 50:
                statistics['similarity_ranges']['50-79%'] += 1
                statistics['partial_matches'] += 1
            else:
                statistics['similarity_ranges']['0-49%'] += 1
                statistics['no_matches'] += 1
            
            if closest_track:
                used_files.add(normalize_filename(closest_track))
            
            differences = find_char_differences(str(track_name), str(closest_track)) if closest_track else '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
            
            result_entry = {
                    '–¢–∏–ø —Ñ–∞–π–ª–∞': '–¢—Ä–µ–∫',
                    '–ù–∞–∑–≤–∞–Ω–∏–µ –≤ Excel': track_name,
                    '–ù–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ': closest_track if closest_track else '–ù–µ –Ω–∞–π–¥–µ–Ω',
                    '–ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ': closest_track if closest_track else '',
                '–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–¥—Å—Ç–≤–∞': round(track_similarity, 2) if track_similarity > 0 else 0,
                '–†–∞–∑–ª–∏—á–∏—è': differences,
                '–°—Ç–∞—Ç—É—Å': '–¢–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ' if track_similarity == 100 else 
                         '–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ' if track_similarity >= 50 else 
                         '–ù–µ –Ω–∞–π–¥–µ–Ω'
            }
            
            all_results.append(result_entry)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ errors_only —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
            if track_similarity < 100:
                errors_only.append(result_entry)
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –æ—à–∏–±–∫—É
                if track_similarity == 0:
                    debug_logger.warning(f"‚ùå –¢—Ä–µ–∫ –ù–ï –ù–ê–ô–î–ï–ù: '{track_name}'")
                elif track_similarity < 50:
                    debug_logger.warning(f"üî¥ –¢—Ä–µ–∫ –Ω–∏–∑–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ ({track_similarity}%): '{track_name}' ‚Üí '{closest_track}'")
                elif track_similarity < 90:
                    debug_logger.debug(f"üü° –¢—Ä–µ–∫ —Å—Ä–µ–¥–Ω–µ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ ({track_similarity}%): '{track_name}' ‚Üí '{closest_track}'")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–ª–æ–∂–∫–∏
        cover_name = row['cover (titel)']
        if pd.notna(cover_name) and str(cover_name).strip():
            statistics['total_excel_covers'] += 1
            statistics['covers_processed'] += 1
            normalized_cover = normalize_filename(str(cover_name))
            excel_files.add(normalized_cover)
            
            closest_cover, cover_similarity = find_closest_match(cover_name, actual_files)
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É —Å—Ö–æ–¥—Å—Ç–≤–∞
            if cover_similarity >= 90:
                statistics['similarity_ranges']['90-100%'] += 1
                if cover_similarity == 100:
                    statistics['perfect_matches'] += 1
                else:
                    statistics['partial_matches'] += 1
            elif cover_similarity >= 80:
                statistics['similarity_ranges']['80-89%'] += 1
                statistics['partial_matches'] += 1
            elif cover_similarity >= 50:
                statistics['similarity_ranges']['50-79%'] += 1
                statistics['partial_matches'] += 1
            else:
                statistics['similarity_ranges']['0-49%'] += 1
                statistics['no_matches'] += 1
            
            if closest_cover:
                used_files.add(normalize_filename(closest_cover))
            
            differences = find_char_differences(str(cover_name), str(closest_cover)) if closest_cover else '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
            
            result_entry = {
                    '–¢–∏–ø —Ñ–∞–π–ª–∞': '–û–±–ª–æ–∂–∫–∞',
                    '–ù–∞–∑–≤–∞–Ω–∏–µ –≤ Excel': cover_name,
                    '–ù–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ': closest_cover if closest_cover else '–ù–µ –Ω–∞–π–¥–µ–Ω',
                    '–ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ': closest_cover if closest_cover else '',
                '–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–¥—Å—Ç–≤–∞': round(cover_similarity, 2) if cover_similarity > 0 else 0,
                '–†–∞–∑–ª–∏—á–∏—è': differences,
                '–°—Ç–∞—Ç—É—Å': '–¢–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ' if cover_similarity == 100 else 
                         '–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ' if cover_similarity >= 50 else 
                         '–ù–µ –Ω–∞–π–¥–µ–Ω'
            }
            
            all_results.append(result_entry)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ errors_only —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
            if cover_similarity < 100:
                errors_only.append(result_entry)
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –æ—à–∏–±–∫—É
                if cover_similarity == 0:
                    debug_logger.warning(f"‚ùå –û–±–ª–æ–∂–∫–∞ –ù–ï –ù–ê–ô–î–ï–ù–ê: '{cover_name}'")
                elif cover_similarity < 50:
                    debug_logger.warning(f"üî¥ –û–±–ª–æ–∂–∫–∞ –Ω–∏–∑–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ ({cover_similarity}%): '{cover_name}' ‚Üí '{closest_cover}'")
                elif cover_similarity < 90:
                    debug_logger.debug(f"üü° –û–±–ª–æ–∂–∫–∞ —Å—Ä–µ–¥–Ω–µ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ ({cover_similarity}%): '{cover_name}' ‚Üí '{closest_cover}'")

    # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    debug_logger.info("üîç –ò—â–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    unused_files = []
    for file in actual_files:
        normalized_file = normalize_filename(file)
        if normalized_file not in used_files:
            unused_files.append({'–§–∞–π–ª –≤ –ø–∞–ø–∫–µ': file, '–°—Ç–∞—Ç—É—Å': '–ù–µ –Ω–∞–π–¥–µ–Ω –≤ Excel'})
            debug_logger.debug(f"üìÅ –ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: '{file}'")
    
    debug_logger.info(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    debug_logger.info(f"   üìÑ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ Excel: {statistics['total_excel_tracks'] + statistics['total_excel_covers']}")
    debug_logger.info(f"   üéØ –¢–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {statistics['perfect_matches']}")
    debug_logger.info(f"   üü° –ß–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {statistics['partial_matches']}")
    debug_logger.info(f"   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {statistics['no_matches']}")
    debug_logger.info(f"   üìÅ –ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(unused_files)}")

    # –°–æ–∑–¥–∞–µ–º DataFrames
    all_results_df = pd.DataFrame(all_results)
    
    # –î–ª—è –ª–∏—Å—Ç–∞ "–¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏" - –µ—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if len(errors_only) == 0:
        errors_only_df = pd.DataFrame([['–í—Å–µ —Ñ–∞–π–ª—ã –∏–∑ Excel –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏', '', '', '', '', '', '']], 
                                    columns=['–¢–∏–ø —Ñ–∞–π–ª–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ –≤ Excel', '–ù–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ', '–ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ', '–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–¥—Å—Ç–≤–∞', '–†–∞–∑–ª–∏—á–∏—è', '–°—Ç–∞—Ç—É—Å'])
    else:
        errors_only_df = pd.DataFrame(errors_only)
    
    unused_files_df = pd.DataFrame(unused_files)
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_files_excel = statistics['total_excel_tracks'] + statistics['total_excel_covers']
    success_rate = (statistics['perfect_matches'] / total_files_excel * 100) if total_files_excel > 0 else 0
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–ª–∏–∑–∞–º
    release_stats = {}
    for index, row in df.iterrows():
        release_name = row.get('release_name', '–ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞')
        if pd.isna(release_name) or str(release_name).strip() == '':
            release_name = '–ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞'
        
        if release_name not in release_stats:
            release_stats[release_name] = {
                'total_files': 0,
                'found_files': 0,
                'missing_files': 0
            }
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–∫–∏ –¥–ª—è —Ä–µ–ª–∏–∑–∞
        track_name = row['track (titel)']
        if pd.notna(track_name) and str(track_name).strip():
            release_stats[release_name]['total_files'] += 1
            closest_track, track_similarity = find_closest_match(track_name, actual_files)
            if track_similarity >= 50:  # –°—á–∏—Ç–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º –µ—Å–ª–∏ —Å—Ö–æ–¥—Å—Ç–≤–æ >= 50%
                release_stats[release_name]['found_files'] += 1
            else:
                release_stats[release_name]['missing_files'] += 1
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±–ª–æ–∂–∫–∏ –¥–ª—è —Ä–µ–ª–∏–∑–∞
        cover_name = row['cover (titel)']
        if pd.notna(cover_name) and str(cover_name).strip():
            release_stats[release_name]['total_files'] += 1  
            closest_cover, cover_similarity = find_closest_match(cover_name, actual_files)
            if cover_similarity >= 50:  # –°—á–∏—Ç–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º –µ—Å–ª–∏ —Å—Ö–æ–¥—Å—Ç–≤–æ >= 50%
                release_stats[release_name]['found_files'] += 1
            else:
                release_stats[release_name]['missing_files'] += 1
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—Ä–∞–∑—Ü—É
    executive_summary = [
        ['–°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–æ–≤', ''],
        ['', ''],
        ['–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', ''],
        ['–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ Excel:', total_files_excel],
        ['–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:', statistics['perfect_matches'] + statistics['partial_matches']],
        ['–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã:', statistics['no_matches']],
        ['–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', len(unused_files)],
        ['', ''],
        ['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤', ''],
        ['–ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤:', sum(1 for result in all_results if result['–¢–∏–ø —Ñ–∞–π–ª–∞'] == '–¢—Ä–µ–∫' and result['–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–¥—Å—Ç–≤–∞'] >= 50)],
        ['–ù–∞–π–¥–µ–Ω–æ –æ–±–ª–æ–∂–µ–∫:', sum(1 for result in all_results if result['–¢–∏–ø —Ñ–∞–π–ª–∞'] == '–û–±–ª–æ–∂–∫–∞' and result['–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–¥—Å—Ç–≤–∞'] >= 50)],
        ['–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–µ–∫–∏:', sum(1 for result in all_results if result['–¢–∏–ø —Ñ–∞–π–ª–∞'] == '–¢—Ä–µ–∫' and result['–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–¥—Å—Ç–≤–∞'] < 50)],
        ['–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±–ª–æ–∂–∫–∏:', sum(1 for result in all_results if result['–¢–∏–ø —Ñ–∞–π–ª–∞'] == '–û–±–ª–æ–∂–∫–∞' and result['–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–¥—Å—Ç–≤–∞'] < 50)],
        ['', ''],
        ['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–ª–∏–∑–∞–º', ''],
        ['–†–µ–ª–∏–∑', '–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤', '–ù–∞–π–¥–µ–Ω–æ', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', '–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö']
    ]
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–ª–∏–∑–∞–º –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –æ—Ç—á–µ—Ç
    debug_logger.info("üéµ –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–ª–∏–∑–∞–º:")
    for release_name, stats in sorted(release_stats.items()):
        percentage = (stats['found_files'] / stats['total_files'] * 100) if stats['total_files'] > 0 else 0
        debug_logger.info(f"   üìÄ '{release_name}': {stats['total_files']} —Ñ–∞–π–ª–æ–≤, –Ω–∞–π–¥–µ–Ω–æ {stats['found_files']} ({percentage:.0f}%)")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–µ–ª–∏–∑—É
    for release_name, stats in sorted(release_stats.items()):
        percentage = (stats['found_files'] / stats['total_files'] * 100) if stats['total_files'] > 0 else 0
        executive_summary.append([
            release_name,
            stats['total_files'],
            stats['found_files'], 
            stats['missing_files'],
            f"{percentage:.0f}%"
        ])
    
    executive_summary_df = pd.DataFrame(executive_summary)
    
    # –ß–∏—Ç–∞–µ–º JWT —Ç–æ–∫–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ config.json
    manager_token = '–ù–µ –Ω–∞–π–¥–µ–Ω'
    try:
        config_file = script_dir / 'pyqt_app' / 'data' / 'config.json'
        if os.path.exists(config_file):
            with open(config_file, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
                manager_token = config_data.get('jwt', '–ù–µ –Ω–∞–π–¥–µ–Ω')
                debug_logger.debug(f"üîë –ó–∞–≥—Ä—É–∂–µ–Ω JWT —Ç–æ–∫–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {manager_token[:50]}..." if len(str(manager_token)) > 50 else f"üîë –ó–∞–≥—Ä—É–∂–µ–Ω JWT —Ç–æ–∫–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {manager_token}")
    except Exception as e:
        debug_logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JWT —Ç–æ–∫–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {str(e)}")
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    detailed_stats = [
        ['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–ü—Ä–æ—Ü–µ–Ω—Ç'],
        ['–¢—Ä–µ–∫–∏ –≤ Excel', statistics['tracks_processed'], 
         f"{(statistics['tracks_processed']/total_files_excel*100):.1f}%" if total_files_excel > 0 else "0%"],
        ['–û–±–ª–æ–∂–∫–∏ –≤ Excel', statistics['covers_processed'], 
         f"{(statistics['covers_processed']/total_files_excel*100):.1f}%" if total_files_excel > 0 else "0%"],
        ['', '', ''],
        ['–¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (100%)', statistics['perfect_matches'], 
         f"{(statistics['perfect_matches']/total_files_excel*100):.1f}%" if total_files_excel > 0 else "0%"],
        ['–í—ã—Å–æ–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ (90-99%)', statistics['similarity_ranges']['90-100%'] - statistics['perfect_matches'], 
         f"{((statistics['similarity_ranges']['90-100%'] - statistics['perfect_matches'])/total_files_excel*100):.1f}%" if total_files_excel > 0 else "0%"],
        ['–°—Ä–µ–¥–Ω–µ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ (80-89%)', statistics['similarity_ranges']['80-89%'], 
         f"{(statistics['similarity_ranges']['80-89%']/total_files_excel*100):.1f}%" if total_files_excel > 0 else "0%"],
        ['–ù–∏–∑–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ (50-79%)', statistics['similarity_ranges']['50-79%'], 
         f"{(statistics['similarity_ranges']['50-79%']/total_files_excel*100):.1f}%" if total_files_excel > 0 else "0%"],
        ['–û—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ (0-49%)', statistics['similarity_ranges']['0-49%'], 
         f"{(statistics['similarity_ranges']['0-49%']/total_files_excel*100):.1f}%" if total_files_excel > 0 else "0%"],
        ['', '', ''],
        ['–ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã', len(unused_files), 
         f"{(len(unused_files)/statistics['total_actual_files']*100):.1f}%" if statistics['total_actual_files'] > 0 else "0%"],
        ['', '', ''],
        ['JWT —Ç–æ–∫–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞', manager_token, '']
    ]
    
    detailed_stats_df = pd.DataFrame(detailed_stats)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = []
    if statistics['perfect_matches'] == total_files_excel:
        recommendations.append(['‚úÖ –û—Ç–ª–∏—á–Ω–æ!', '–í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã —Å —Ç–æ—á–Ω—ã–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º'])
    else:
        if statistics['no_matches'] > 0:
            recommendations.append(['üö® –ö—Ä–∏—Ç–∏—á–Ω–æ', f'{statistics["no_matches"]} —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ö –Ω–∞–ª–∏—á–∏–µ'])
        if statistics['similarity_ranges']['0-49%'] > 0:
            recommendations.append(['‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ', f'{statistics["similarity_ranges"]["0-49%"]} —Ñ–∞–π–ª–æ–≤ —Å –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–º —Å—Ö–æ–¥—Å—Ç–≤–æ–º - –≤–æ–∑–º–æ–∂–Ω—ã –æ—à–∏–±–∫–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö'])
        if statistics['similarity_ranges']['50-79%'] > 0:
            recommendations.append(['üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è', f'{statistics["similarity_ranges"]["50-79%"]} —Ñ–∞–π–ª–æ–≤ —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏–π'])
        if len(unused_files) > 0:
            recommendations.append(['üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', f'{len(unused_files)} —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ Excel'])
        if statistics['partial_matches'] > statistics['perfect_matches']:
            recommendations.append(['üîß –£–ª—É—á—à–µ–Ω–∏–µ', '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤'])
    
    if not recommendations:
        recommendations.append(['‚úÖ –í—Å–µ —Ö–æ—Ä–æ—à–æ', '–ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ'])
    
    recommendations_df = pd.DataFrame(recommendations, columns=['–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è'])
    
    # –°–æ–∑–¥–∞–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    output_file = results_dir / f"file_comparison_results_{timestamp}.xlsx"
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    reports_archive_dir = script_dir / 'verification reports'
    debug_logger.debug(f"üìÅ –ü–∞–ø–∫–∞ –∞—Ä—Ö–∏–≤–∞ –æ—Ç—á–µ—Ç–æ–≤: {reports_archive_dir}")
    if not os.path.exists(reports_archive_dir):
        os.makedirs(reports_archive_dir)
        debug_logger.info("üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–∞ –æ—Ç—á–µ—Ç–æ–≤")
    
    # –ü—É—Ç—å –¥–ª—è –¥—É–±–ª–∏–∫–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –≤ –∞—Ä—Ö–∏–≤–µ
    archive_output_file = reports_archive_dir / f"file_comparison_results_{timestamp}.xlsx"
    
    debug_logger.info("üìä –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç Excel —Å 5 –ª–∏—Å—Ç–∞–º–∏")
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ (–±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–≤–∞–∂–¥—ã)
    def save_report_to_file(file_path):
        with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
            # –õ–∏—Å—Ç 1: –í—Å–µ —Ñ–∞–π–ª—ã (—Ç–µ–ø–µ—Ä—å –ø–µ—Ä–≤—ã–π)
            all_results_df.to_excel(writer, index=False, sheet_name='–í—Å–µ —Ñ–∞–π–ª—ã')
        
            # –õ–∏—Å—Ç 2: –¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ (—Ç–µ–ø–µ—Ä—å –≤—Ç–æ—Ä–æ–π)
            errors_only_df.to_excel(writer, index=False, sheet_name='–¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏')
            
            # –õ–∏—Å—Ç 3: –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞
            executive_summary_df.to_excel(writer, index=False, header=False, sheet_name='–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞')
            
            # –õ–∏—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            detailed_stats_df.to_excel(writer, index=False, header=False, sheet_name='–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
            
            # –õ–∏—Å—Ç 5: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations_df.to_excel(writer, index=False, sheet_name='–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
            
            # –õ–∏—Å—Ç 6: –ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if len(unused_files) > 0:
                unused_files_df.to_excel(writer, index=False, sheet_name='–ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–æ–≤
            _format_excel_sheets(writer, all_results_df, errors_only_df, len(unused_files))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É results (–¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
    debug_logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –ø–∞–ø–∫—É results")
    save_report_to_file(output_file)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç –≤ –∞—Ä—Ö–∏–≤–Ω—É—é –ø–∞–ø–∫—É (–≤—Å–µ–≥–¥–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –¥–∏–∞–ª–æ–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
    debug_logger.info("üìÇ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç –æ—Ç—á–µ—Ç–∞ –≤ –∞—Ä—Ö–∏–≤–Ω—É—é –ø–∞–ø–∫—É")
    save_report_to_file(archive_output_file)
    
    error_count = len(errors_only)
    success_message = f"–ù–∞–π–¥–µ–Ω–æ {error_count} —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞–∑–ª–∏—á–∏—è–º–∏" if error_count > 0 else "–í—Å–µ —Ñ–∞–π–ª—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∑–∞–ø–∏—Å—è–º –≤ Excel"
    
    result = {
        'success': True,
        'message': success_message,
        'results_file': str(output_file),
        'error_count': error_count,
        'results_data': all_results
    }

    if not result['success']:
        debug_logger.error(f"\n‚ùå {result['message']}")
    else:
        debug_logger.success(f"\n‚úÖ {result['message']}")
        debug_logger.info(f"üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {result['results_file']}")
        debug_logger.info(f"üìÇ –î—É–±–ª–∏–∫–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∞—Ä—Ö–∏–≤: {archive_output_file}")
        debug_logger.info(f"üìã –°–æ–∑–¥–∞–Ω–æ –ª–∏—Å—Ç–æ–≤: {'6' if len(unused_files) > 0 else '5'}")
        
        if result.get('error_count', 0) > 0:
            debug_logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {result['error_count']}")
            
            # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö —Å –æ—à–∏–±–∫–∞–º–∏
            debug_logger.info("üìù –î–µ—Ç–∞–ª–∏ —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏:")
            for i, error in enumerate(errors_only[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
                file_name = error.get('–ù–∞–∑–≤–∞–Ω–∏–µ –≤ Excel', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                file_type = error.get('–¢–∏–ø —Ñ–∞–π–ª–∞', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                similarity = error.get('–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–¥—Å—Ç–≤–∞', 0)
                found_file = error.get('–ù–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ', '–ù–µ –Ω–∞–π–¥–µ–Ω')
                
                if similarity == 0:
                    debug_logger.error(f"   {i}. ‚ùå {file_type}: '{file_name}' - –ù–ï –ù–ê–ô–î–ï–ù")
                elif similarity < 50:
                    debug_logger.warning(f"   {i}. üî¥ {file_type}: '{file_name}' - {similarity}% —Å—Ö–æ–¥—Å—Ç–≤–∞ —Å '{found_file}'")
                elif similarity < 80:
                    debug_logger.info(f"   {i}. üü° {file_type}: '{file_name}' - {similarity}% —Å—Ö–æ–¥—Å—Ç–≤–∞ —Å '{found_file}'")
                else:
                    debug_logger.info(f"   {i}. üü† {file_type}: '{file_name}' - {similarity}% —Å—Ö–æ–¥—Å—Ç–≤–∞ —Å '{found_file}'")
            
            if len(errors_only) > 10:
                debug_logger.info(f"   ... –∏ –µ—â–µ {len(errors_only) - 10} —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏")
                
        else:
            debug_logger.success(f"üéâ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

    return result


def _format_excel_sheets(writer, all_results_df, errors_only_df, unused_files_count):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ª–∏—Å—Ç—ã Excel –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª–∏
    red_fill = PatternFill(start_color='FFFF0000', end_color='FFFF0000', fill_type='solid')
    yellow_fill = PatternFill(start_color='FFFF00', end_color='FFFF00', fill_type='solid')
    green_fill = PatternFill(start_color='90EE90', end_color='90EE90', fill_type='solid')
    header_fill = PatternFill(start_color='366092', end_color='366092', fill_type='solid')
    header_font = Font(color='FFFFFF', bold=True)
    bold_font = Font(bold=True)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–∏—Å—Ç "–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞"
    if '–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞' in writer.sheets:
        ws = writer.sheets['–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        section_headers = ['–°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–æ–≤', '–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–ª–∏–∑–∞–º']
        table_header = ['–†–µ–ª–∏–∑', '–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤', '–ù–∞–π–¥–µ–Ω–æ', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', '–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö']
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ —Ç–∞–±–ª–∏—Ü—É
        for row_idx, row in enumerate(ws.iter_rows(), 1):
            for col_idx, cell in enumerate(row, 1):
                if cell.value:
                    # –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    if cell.value == '–°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–æ–≤':
                        cell.font = Font(bold=True, size=14)
                        cell.fill = PatternFill(start_color='366092', end_color='366092', fill_type='solid')
                        cell.font = Font(color='FFFFFF', bold=True, size=14)
                    
                    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
                    elif cell.value in section_headers[1:]:
                        cell.font = Font(bold=True, size=12)
                        cell.fill = PatternFill(start_color='D9E2F3', end_color='D9E2F3', fill_type='solid')
                    
                    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–ª–∏–∑–æ–≤
                    elif isinstance(cell.value, str) and cell.value in table_header:
                        cell.font = Font(bold=True)
                        cell.fill = PatternFill(start_color='E2EFDA', end_color='E2EFDA', fill_type='solid')
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ –≤—Å–µ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
                        for c in range(1, 6):  # 5 –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ —Ä–µ–ª–∏–∑–æ–≤
                            header_cell = ws.cell(row=row_idx, column=c)
                            header_cell.font = Font(bold=True)
                            header_cell.fill = PatternFill(start_color='E2EFDA', end_color='E2EFDA', fill_type='solid')
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
        ws.column_dimensions['A'].width = 35  # –ù–∞–∑–≤–∞–Ω–∏—è —Ä–µ–ª–∏–∑–æ–≤ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è
        ws.column_dimensions['B'].width = 15  # –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤
        ws.column_dimensions['C'].width = 15  # –ù–∞–π–¥–µ–Ω–æ
        ws.column_dimensions['D'].width = 15  # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç  
        ws.column_dimensions['E'].width = 18  # –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–∏—Å—Ç "–í—Å–µ —Ñ–∞–π–ª—ã"
    if '–í—Å–µ —Ñ–∞–π–ª—ã' in writer.sheets and len(all_results_df) > 0:
        ws = writer.sheets['–í—Å–µ —Ñ–∞–π–ª—ã']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –≥—Ä–∞–¥–∞—Ü–∏–∏
        perfect_green = PatternFill(start_color='00FF00', end_color='00FF00', fill_type='solid')  # –Ø—Ä–∫–æ-–∑–µ–ª–µ–Ω—ã–π –¥–ª—è 100%
        good_green = PatternFill(start_color='90EE90', end_color='90EE90', fill_type='solid')     # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π –¥–ª—è 90-99%
        orange_fill = PatternFill(start_color='FFA500', end_color='FFA500', fill_type='solid')   # –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è 80-89%
        light_orange = PatternFill(start_color='FFD700', end_color='FFD700', fill_type='solid')  # –°–≤–µ—Ç–ª–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è 50-79%
        light_red = PatternFill(start_color='FFB6C1', end_color='FFB6C1', fill_type='solid')     # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π –¥–ª—è 1-49%
        dark_red = PatternFill(start_color='FF0000', end_color='FF0000', fill_type='solid')      # –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π –¥–ª—è 0%
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        for cell in ws[1]:
            cell.fill = header_fill
            cell.font = header_font
        
        # –í—ã–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Ü–≤–µ—Ç–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å—Ö–æ–¥—Å—Ç–≤–∞
        for row in range(2, len(all_results_df) + 2):
            try:
                similarity = ws.cell(row=row, column=5).value  # –ö–æ–ª–æ–Ω–∫–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º —Å—Ö–æ–¥—Å—Ç–≤–∞
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å—Ö–æ–¥—Å—Ç–≤–∞
                if similarity == 100:
                    # –ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ - —è—Ä–∫–æ-–∑–µ–ª–µ–Ω—ã–π
                    fill_color = perfect_green
                elif similarity >= 90:
                    # –û—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ - —Å–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
                    fill_color = good_green
                elif similarity >= 80:
                    # –•–æ—Ä–æ—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ - –æ—Ä–∞–Ω–∂–µ–≤—ã–π
                    fill_color = orange_fill
                elif similarity >= 50:
                    # –°—Ä–µ–¥–Ω–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ - —Å–≤–µ—Ç–ª–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π/–∑–æ–ª–æ—Ç–æ–π
                    fill_color = light_orange
                elif similarity > 0:
                    # –ü–ª–æ—Ö–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ - —Å–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π
                    fill_color = light_red
                else:
                    # –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - —Ç–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
                    fill_color = dark_red
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫–æ –≤—Å–µ–π —Å—Ç—Ä–æ–∫–µ
                for col in range(1, 8):  # 7 –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
                    cell = ws.cell(row=row, column=col)
                    cell.fill = fill_color
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–¥–µ–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–¥—Å—Ç–≤–∞ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º –µ—Å–ª–∏ < 100%
                    if col == 5 and similarity < 100:  # –ö–æ–ª–æ–Ω–∫–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º —Å—Ö–æ–¥—Å—Ç–≤–∞
                        cell.font = Font(bold=True)
                        
            except Exception as e:
                debug_logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ {row}: {e}")
                pass
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É —Ü–≤–µ—Ç–æ–≤ –≤ –∫–æ–Ω—Ü–µ —Ç–∞–±–ª–∏—Ü—ã
        legend_start_row = len(all_results_df) + 4  # –û—Ç—Å—Ç—É–ø –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ª–µ–≥–µ–Ω–¥—ã
        legend_header = ws.cell(row=legend_start_row, column=1)
        legend_header.value = "–õ–µ–≥–µ–Ω–¥–∞ —Ü–≤–µ—Ç–æ–≤ (–ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É —Å—Ö–æ–¥—Å—Ç–≤–∞):"
        legend_header.font = Font(bold=True, size=12)
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã –ª–µ–≥–µ–Ω–¥—ã
        legend_items = [
            ("100% - –ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ", perfect_green),
            ("90-99% - –û—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ", good_green),
            ("80-89% - –•–æ—Ä–æ—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ", orange_fill),
            ("50-79% - –°—Ä–µ–¥–Ω–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ", light_orange),
            ("1-49% - –ü–ª–æ—Ö–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ", light_red),
            ("0% - –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", dark_red)
        ]
        
        for i, (text, color) in enumerate(legend_items):
            row_num = legend_start_row + 1 + i
            cell = ws.cell(row=row_num, column=1)
            cell.value = text
            cell.fill = color
            cell.font = Font(bold=True)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–¥–∞ –ª–µ–≥–µ–Ω–¥—ã
            ws.merge_cells(f'A{row_num}:C{row_num}')
        
        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        for column in ws.columns:
            max_length = 0
            column = [cell for cell in column]
            for cell in column:
                try:
                    if cell.value and len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            ws.column_dimensions[column[0].column_letter].width = adjusted_width
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–∏—Å—Ç "–¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏" (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    if '–¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏' in writer.sheets and len(errors_only_df) > 0:
        ws = writer.sheets['–¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏']
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        for cell in ws[1]:
            cell.fill = header_fill
            cell.font = header_font
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—à–∏–±–æ–∫
        success_message_row = None
        for row_idx in range(2, len(errors_only_df) + 2):
            cell_value = ws.cell(row=row_idx, column=1).value
            if cell_value == '–í—Å–µ —Ñ–∞–π–ª—ã –∏–∑ Excel –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏':
                success_message_row = row_idx
                break
        
        if success_message_row:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            success_cell = ws.cell(row=success_message_row, column=1)
            success_cell.font = Font(bold=True, size=12, color='008000')  # –ó–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç
            success_cell.fill = PatternFill(start_color='E8F5E8', end_color='E8F5E8', fill_type='solid')  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª—ë–Ω—ã–π —Ñ–æ–Ω
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –≤—Å—é —Å—Ç—Ä–æ–∫—É
            ws.merge_cells(f'A{success_message_row}:G{success_message_row}')
        else:
            # –í—ã–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Ü–≤–µ—Ç–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å—Ö–æ–¥—Å—Ç–≤–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏)
            for row in range(2, len(errors_only_df) + 2):
                try:
                    similarity = ws.cell(row=row, column=5).value  # –ö–æ–ª–æ–Ω–∫–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º —Å—Ö–æ–¥—Å—Ç–≤–∞
                    if similarity < 50:
                        for col in range(1, 8):
                            ws.cell(row=row, column=col).fill = red_fill
                    elif similarity < 80:
                        for col in range(1, 8):
                            ws.cell(row=row, column=col).fill = yellow_fill
                except:
                    pass
        
        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        for column in ws.columns:
            max_length = 0
            column = [cell for cell in column]
            for cell in column:
                try:
                    if cell.value and len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            ws.column_dimensions[column[0].column_letter].width = adjusted_width
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–∏—Å—Ç "–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    if '–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' in writer.sheets:
        ws = writer.sheets['–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å JWT —Ç–æ–∫–µ–Ω–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ—ë
        for row_idx, row in enumerate(ws.iter_rows(), 1):
            for col_idx, cell in enumerate(row, 1):
                if cell.value == 'JWT —Ç–æ–∫–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞':
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É —Å JWT —Ç–æ–∫–µ–Ω–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                    for c in range(1, 4):  # 3 –∫–æ–ª–æ–Ω–∫–∏ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
                        token_cell = ws.cell(row=row_idx, column=c)
                        token_cell.font = Font(bold=True, size=11)
                        token_cell.fill = PatternFill(start_color='FFE4B5', end_color='FFE4B5', fill_type='solid')  # –°–≤–µ—Ç–ª–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π —Ñ–æ–Ω
                    break
        
        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        for column in ws.columns:
            max_length = 0
            column = [cell for cell in column]
            for cell in column:
                try:
                    if cell.value and len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            ws.column_dimensions[column[0].column_letter].width = adjusted_width
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–∏—Å—Ç "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
    if '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏' in writer.sheets:
        ws = writer.sheets['–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏']
        
        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        for column in ws.columns:
            max_length = 0
            column = [cell for cell in column]
            for cell in column:
                try:
                    if cell.value and len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            ws.column_dimensions[column[0].column_letter].width = adjusted_width
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–∏—Å—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
    if unused_files_count > 0 and '–ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã' in writer.sheets:
        ws = writer.sheets['–ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã']
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        for cell in ws[1]:
            cell.fill = header_fill
            cell.font = header_font
        
        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        for column in ws.columns:
            max_length = 0
            column = [cell for cell in column]
            for cell in column:
                try:
                    if cell.value and len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            ws.column_dimensions[column[0].column_letter].width = adjusted_width


def print_debug_info(filename, normalized_filename):
    """–í—ã–≤–æ–¥–∏—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞"""
    debug_logger.debug(f"üîç –ò—Å–∫–æ–º—ã–π —Ñ–∞–π–ª: '{filename}'")
    debug_logger.debug(f"üîß –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: '{normalized_filename}'")


def compare_files_interactive():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
    script_dir = Path(__file__).parent.parent
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    files_directory = script_dir / 'src' / 'apps' / 'release-parser-5' / 'files'
    excel_file = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É: ")
    
    result = compare_files_with_excel(excel_file, str(files_directory))
    
    if result['success']:
        debug_logger.success(f"‚úÖ {result['message']}")
        debug_logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {result['results_file']}")
    else:
        debug_logger.error(f"‚ùå {result['message']}")


if __name__ == "__main__":
    compare_files_interactive()
