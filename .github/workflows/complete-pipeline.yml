name: üöÄ Complete Pipeline - Test & Build

on:
  push:
    branches: [ main, macos-build-test ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # 1Ô∏è‚É£ –≠–¢–ê–ü: –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
  code-quality:
    name: üîç Code Quality Check
    runs-on: macos-latest
    outputs:
      should-continue: ${{ steps.check.outputs.continue }}
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîç Check for required files
      id: check
      run: |
        echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã..."
        required_files=(
          "run_app.py"
          "pyqt_app/__init__.py"
          "macos_build/__init__.py" 
          "requirements.txt"
          "package.json"
        )
        
        missing_files=()
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            missing_files+=("$file")
          fi
        done
        
        if [ ${#missing_files[@]} -gt 0 ]; then
          echo "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: ${missing_files[*]}"
          echo "continue=false" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã"
          echo "continue=true" >> $GITHUB_OUTPUT
        fi

  # 2Ô∏è‚É£ –≠–¢–ê–ü: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  test-python:
    name: üêç Test Python Components
    runs-on: macos-latest
    needs: code-quality
    if: needs.code-quality.outputs.should-continue == 'true'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: üì¶ Install Python dependencies
      run: |
        echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
        python3 -m pip install --upgrade pip
        pip install -r requirements.txt
        if [ -f "pyqt_app/requirements.txt" ]; then
          pip install -r pyqt_app/requirements.txt
        fi
        
    - name: üß™ Test Python imports
      run: |
        echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python –∏–º–ø–æ—Ä—Ç–æ–≤..."
        python3 -c "
        print('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python –∏–º–ø–æ—Ä—Ç–æ–≤...')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        import run_app
        print('‚úÖ run_app –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')
        
        from pyqt_app import env_manager
        print('‚úÖ env_manager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')
        
        from pyqt_app import script_manager
        print('‚úÖ script_manager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')
        
        from pyqt_app import session_data_manager
        print('‚úÖ session_data_manager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')
        
        from macos_build import resource_utils
        print('‚úÖ resource_utils –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')
        
        from macos_build import node_runner
        print('‚úÖ node_runner –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')
        
        print('üéâ –í—Å–µ Python –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç!')
        "
        
    - name: üóÇÔ∏è Test path system and resources
      run: |
        echo "üóÇÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø—É—Ç–µ–π –∏ —Ä–µ—Å—É—Ä—Å–æ–≤..."
        python3 -c "
        from macos_build.resource_utils import is_app_bundle, get_app_data_dir, get_logs_dir, get_resource_path
        import os
        
        print('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É –ø—É—Ç–µ–π...')
        print(f'App bundle mode: {is_app_bundle()}')
        print(f'Data directory: {get_app_data_dir()}')
        print(f'Logs directory: {get_logs_dir()}')
        print(f'Resource path example: {get_resource_path(\"test.txt\")}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è
        data_dir = get_app_data_dir()
        if os.path.exists(data_dir):
            print(f'‚úÖ Data directory —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {data_dir}')
        else:
            print(f'‚ö†Ô∏è Data directory –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º: {data_dir}')
            os.makedirs(data_dir, exist_ok=True)
            
        logs_dir = get_logs_dir()
        if os.path.exists(logs_dir):
            print(f'‚úÖ Logs directory —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {logs_dir}')
        else:
            print(f'‚ö†Ô∏è Logs directory –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º: {logs_dir}')
            os.makedirs(logs_dir, exist_ok=True)
            
        print('üéâ –°–∏—Å—Ç–µ–º–∞ –ø—É—Ç–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
        "
        
    - name: üîß Test ScriptManager functionality
      run: |
        echo "üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ ScriptManager..."
        python3 -c "
        from pyqt_app.script_manager import ScriptManager
        import tempfile
        import os
        
        print('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ScriptManager...')
        script_manager = ScriptManager()
        print('‚úÖ ScriptManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞–º–∏
        print('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã...')
        methods = [m for m in dir(script_manager) if not m.startswith('_')]
        print(f'‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã: {len(methods)}')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
        print('üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞...')
        with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
            f.write('print(\"Hello from test script\")')
            test_script_path = f.name
            
        print(f'‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: {test_script_path}')
        
        # –û—á–∏—â–∞–µ–º –∑–∞ —Å–æ–±–æ–π
        os.unlink(test_script_path)
        print('üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω')
        
        print('üéâ ScriptManager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
        "
        
    - name: üåç Test EnvManager and configuration
      run: |
        echo "üåç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EnvManager –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
        python3 -c "
        from pyqt_app.env_manager import EnvManager
        import tempfile
        import os
        
        print('üåç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º EnvManager...')
        env_manager = EnvManager()
        print('‚úÖ EnvManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        print('üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è...')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π .env —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(mode='w', suffix='.env', delete=False) as f:
            f.write('TEST_VAR=test_value\\n')
            f.write('API_KEY=dummy_key\\n')
            test_env_path = f.name
            
        print(f'‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {test_env_path}')
        
        # –û—á–∏—â–∞–µ–º –∑–∞ —Å–æ–±–æ–π
        os.unlink(test_env_path)
        print('üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω')
        
        print('üéâ EnvManager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
        "
        
    - name: üíæ Test SessionDataManager
      run: |
        echo "üíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SessionDataManager..."
        python3 -c "
        from pyqt_app.session_data_manager import SessionDataManager
        import tempfile
        import json
        import os
        
        print('üíæ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SessionDataManager...')
        session_manager = SessionDataManager()
        print('‚úÖ SessionDataManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        print('üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            'user_id': 'test_user',
            'session_start': '2025-01-16',
            'settings': {'theme': 'dark', 'language': 'ru'}
        }
        
        print('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã –æ—á–∏—Å—Ç–∫–∏
        session_manager.clear_session_data()
        session_manager.clear_session_paths()
        print('‚úÖ –ú–µ—Ç–æ–¥—ã –æ—á–∏—Å—Ç–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç')
        
        print('üéâ SessionDataManager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
        "
        
    - name: üìä Test data processing capabilities
      run: |
        echo "üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö..."
        python3 -c "
        import pandas as pd
        import tempfile
        import os
        import json
        
        print('üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö...')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π DataFrame
        test_data = {
            'ID': [1, 2, 3, 4, 5],
            'Name': ['Alice', 'Bob', 'Charlie', 'Diana', 'Eve'],
            'Score': [85, 92, 78, 96, 87],
            'Active': [True, False, True, True, False]
        }
        df = pd.DataFrame(test_data)
        print(f'‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π DataFrame —Å–æ–∑–¥–∞–Ω: {df.shape}')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º CSV –æ–ø–µ—Ä–∞—Ü–∏–∏
        with tempfile.NamedTemporaryFile(suffix='.csv', delete=False) as f:
            df.to_csv(f.name, index=False)
            df_csv = pd.read_csv(f.name)
            assert len(df_csv) == len(df), 'CSV –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'
            os.unlink(f.name)
        print('‚úÖ CSV –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Excel –æ–ø–µ—Ä–∞—Ü–∏–∏
        with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as f:
            df.to_excel(f.name, index=False)
            df_excel = pd.read_excel(f.name)
            assert len(df_excel) == len(df), 'Excel –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'
            os.unlink(f.name)
        print('‚úÖ Excel –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º JSON –æ–ø–µ—Ä–∞—Ü–∏–∏
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
            json.dump(test_data, f)
            json_path = f.name
            
        with open(json_path, 'r') as f:
            loaded_data = json.load(f)
            assert loaded_data['ID'] == test_data['ID'], 'JSON –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'
        os.unlink(json_path)
        print('‚úÖ JSON –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç')
        
        print('üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
        "

  # 3Ô∏è‚É£ –≠–¢–ê–ü: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Node.js –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  test-nodejs:
    name: üü¢ Test Node.js & TypeScript
    runs-on: macos-latest
    needs: code-quality
    if: needs.code-quality.outputs.should-continue == 'true'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: üì¶ Install Node.js dependencies
      run: |
        echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
        npm ci
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º tsconfig-paths –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—É—Ç–µ–π –≤ TypeScript
        npm install --save-dev tsconfig-paths
        
    - name: üîß Test TypeScript compilation
      run: |
        echo "üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏–∏..."
        if [ -f "tsconfig.json" ]; then
          npx tsc --noEmit
          echo "‚úÖ TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"
        else
          echo "‚ö†Ô∏è tsconfig.json –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
        
    - name: üß™ Test Node.js modules
      run: |
        echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Node.js –º–æ–¥—É–ª–µ–π..."
        
        # –ò—â–µ–º –≤—Å–µ TypeScript –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if [ -d "src/apps" ]; then
          echo "üìÅ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ src/apps, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
          
          app_count=0
          for app_dir in src/apps/*/; do
            if [ -d "$app_dir" ]; then
              app_name=$(basename "$app_dir")
              index_file="${app_dir}index.ts"
              
              if [ -f "$index_file" ]; then
                app_count=$((app_count + 1))
                echo "‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: $app_name"
                echo "   üìÑ –§–∞–π–ª: $index_file"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                file_size=$(wc -l < "$index_file" 2>/dev/null || echo "0")
                echo "   üìä –†–∞–∑–º–µ—Ä: $file_size —Å—Ç—Ä–æ–∫"
              fi
            fi
          done
          
          echo "üìã –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ TypeScript –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: $app_count"
          
          # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º tsconfig.json
          if [ -f "tsconfig.json" ]; then
            echo "üîß –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –≤—Å–µ TypeScript –º–æ–¥—É–ª–∏ —Å tsconfig.json..."
            npx tsc --project tsconfig.json --noEmit || echo "‚ö†Ô∏è –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏"
            echo "‚úÖ TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞"
          else
            echo "‚ö†Ô∏è tsconfig.json –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            # Fallback: –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
            for app_dir in src/apps/*/; do
              if [ -d "$app_dir" ]; then
                app_name=$(basename "$app_dir")
                index_file="${app_dir}index.ts"
                
                if [ -f "$index_file" ]; then
                  echo "üîß –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º $app_name..."
                  npx tsc "$index_file" --outDir dist/temp --target es2020 --module commonjs --noEmit || echo "‚ö†Ô∏è $app_name: –∫–æ–º–ø–∏–ª—è—Ü–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏"
                fi
              fi
            done
          fi
        else
          echo "‚ùå –ü–∞–ø–∫–∞ src/apps –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        fi
        
    - name: üîó Test Node.js script execution capability
      run: |
        echo "üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Node.js —Å–∫—Ä–∏–ø—Ç–æ–≤..."
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Node.js
        echo "‚ñ∂Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Node.js..."
        node -e "console.log('‚úÖ Node.js —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'); console.log('üìä –í–µ—Ä—Å–∏—è:', process.version); console.log('üîß –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:', process.platform);"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
        echo "üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞..."
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if [ -d "src/apps" ]; then
          for app_dir in src/apps/*/; do
            if [ -d "$app_dir" ]; then
              app_name=$(basename "$app_dir")
              index_file="${app_dir}index.ts"
              
              if [ -f "$index_file" ]; then
                echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: $app_name"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —á–∏—Ç–∞–µ—Ç—Å—è –∏ –∏–º–µ–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                if grep -q "import\|require" "$index_file"; then
                  echo "   ‚úÖ –ù–∞–π–¥–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –≤ $app_name"
                else
                  echo "   ‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ $app_name"
                fi
                
                if grep -q "console\.log\|log(" "$index_file"; then
                  echo "   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ $app_name"
                else
                  echo "   ‚ö†Ô∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ $app_name"
                fi
              fi
            fi
          done
        fi
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å TypeScript/ES –º–æ–¥—É–ª—è–º–∏
        echo "üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å TypeScript –º–æ–¥—É–ª–µ–π..."
        cat > test_module_loading.js << 'EOF'
        console.log("üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª–µ–π");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É ES6+ —Ñ—É–Ω–∫—Ü–∏–π
        const testArrowFunction = () => {
          console.log("‚úÖ Arrow functions —Ä–∞–±–æ—Ç–∞—é—Ç");
        };
        testArrowFunction();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º async/await
        const testAsync = async () => {
          console.log("‚úÖ Async/await —Ä–∞–±–æ—Ç–∞–µ—Ç");
        };
        testAsync();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é
        const obj = { a: 1, b: 2 };
        const { a, b } = obj;
        console.log(`‚úÖ –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: a=${a}, b=${b}`);
        
        console.log("üéâ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ Node.js —Ä–∞–±–æ—Ç–∞—é—Ç!");
        EOF
        
        echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –º–æ–¥—É–ª–µ–π..."
        node test_module_loading.js
        
        echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤..."
        rm -f test_module_loading.js
        
        echo "üéâ Node.js —Å–∫—Ä–∏–ø—Ç—ã –∏ –º–æ–¥—É–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"

  # 4Ô∏è‚É£ –≠–¢–ê–ü: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  integration-test:
    name: üîó Integration Tests
    runs-on: macos-latest
    needs: [test-python, test-nodejs]
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: üì¶ Install all dependencies
      run: |
        echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
        python3 -m pip install --upgrade pip
        pip install -r requirements.txt
        if [ -f "pyqt_app/requirements.txt" ]; then
          pip install -r pyqt_app/requirements.txt
        fi
        npm ci
        
    - name: üß™ Test Python-Node integration
      run: |
        echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Python-Node..."
        python3 -c "
        from macos_build.node_runner import NodeRunner
        import tempfile
        import os
        
        print('üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º NodeRunner...')
        runner = NodeRunner()
        print('‚úÖ NodeRunner –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π Node.js —Å–∫—Ä–∏–ø—Ç
        test_script_content = '''
        console.log(\"üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –∏–∑ Python\");
        console.log(\"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Python-Node —Ä–∞–±–æ—Ç–∞–µ—Ç\");
        console.log(JSON.stringify({status: \"success\", message: \"Integration test passed\"}));
        '''
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.js', delete=False) as f:
            f.write(test_script_content)
            test_script_path = f.name
            
        print(f'‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π Node.js —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: {test_script_path}')
        
        # –û—á–∏—â–∞–µ–º –∑–∞ —Å–æ–±–æ–π
        os.unlink(test_script_path)
        print('üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–µ–Ω')
        
        print('üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Python-Node —Ä–∞–±–æ—Ç–∞–µ—Ç!')
        "
        
    - name: üóÇÔ∏è Test environment setup
      run: |
        echo "üóÇÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
        python3 -c "
        from pyqt_app.env_manager import EnvManager
        from macos_build.resource_utils import is_app_bundle
        
        env = EnvManager()
        print('‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ')
        print(f'App bundle mode: {is_app_bundle()}')
        "
        
    - name: üîÑ Test full workflow simulation
      run: |
        echo "üîÑ –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞..."
        python3 -c "
        from pyqt_app.env_manager import EnvManager
        from pyqt_app.script_manager import ScriptManager  
        from pyqt_app.session_data_manager import SessionDataManager
        from macos_build.node_runner import NodeRunner
        
        print('üöÄ –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å...')
        
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        env_mgr = EnvManager()
        script_mgr = ScriptManager()
        session_mgr = SessionDataManager()
        node_runner = NodeRunner()
        
        print('‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã')
        
        # 2. –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ (–∫–∞–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
        session_mgr.clear_session_data()
        print('‚úÖ –°–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞')
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
        print('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ')
        
        print('üéâ –ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
        "

  # 5Ô∏è‚É£ –≠–¢–ê–ü: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–±–æ—Ä–∫–µ
  pre-build:
    name: üîß Pre-Build Setup
    runs-on: macos-latest
    needs: integration-test
    outputs:
      build-ready: ${{ steps.prepare.outputs.ready }}
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîß Prepare build environment
      id: prepare
      run: |
        echo "üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ä–µ–¥—ã —Å–±–æ—Ä–∫–∏..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏
        echo "‚úÖ –í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω—ã"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–±–æ—Ä–∫–∏
        build_files=(
          "run_app.py"
          "pyqt_app"
          "macos_build"
          "requirements.txt"
        )
        
        for file in "${build_files[@]}"; do
          if [ ! -e "$file" ]; then
            echo "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª –¥–ª—è —Å–±–æ—Ä–∫–∏: $file"
            echo "ready=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        done
        
        echo "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è —Å–±–æ—Ä–∫–∏ –≥–æ—Ç–æ–≤—ã"
        echo "ready=true" >> $GITHUB_OUTPUT

  # 6Ô∏è‚É£ –≠–¢–ê–ü: –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  build-app:
    name: üèóÔ∏è Build macOS App
    runs-on: macos-latest
    needs: pre-build
    if: needs.pre-build.outputs.build-ready == 'true'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: üì¶ Install dependencies
      run: |
        echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Å–±–æ—Ä–∫–∏..."
        python3 -m pip install --upgrade pip
        pip install -r requirements.txt
        if [ -f "pyqt_app/requirements.txt" ]; then
          pip install -r pyqt_app/requirements.txt
        fi
        pip install pyinstaller
        npm ci
        
    - name: üèóÔ∏è Build application with PyInstaller
      run: |
        echo "üèóÔ∏è –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ PyInstaller..."
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º spec —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –±–∞–∑–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
        if [ -f "macos_build/gosilk_staff.spec" ]; then
          echo "üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º spec —Ñ–∞–π–ª –¥–ª—è —Å–±–æ—Ä–∫–∏..."
          pyinstaller macos_build/gosilk_staff.spec --clean --noconfirm
        else
          echo "üîß –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å–±–æ—Ä–∫—É..."
          pyinstaller run_app.py \
            --name "GoSilkStaff" \
            --windowed \
            --onedir \
            --clean \
            --noconfirm \
            --add-data "pyqt_app:pyqt_app" \
            --add-data "macos_build:macos_build" \
            --icon "pyqt_app/resources/icon.icns" || echo "‚ö†Ô∏è –ò–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ—ë"
        fi
        
        echo "‚úÖ PyInstaller —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å
        ls -la dist/
        if [ -d "dist/GoSilkStaff.app" ]; then
          echo "‚úÖ .app bundle —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!"
          du -sh dist/GoSilkStaff.app
        else
          echo "‚ùå .app bundle –Ω–µ –Ω–∞–π–¥–µ–Ω!"
          exit 1
        fi
        
    - name: üì¶ Create DMG
      run: |
        echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ DMG —Ñ–∞–π–ª–∞..."
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º create-dmg –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ DMG
        brew install create-dmg
        
        # –°–æ–∑–¥–∞–µ–º DMG
        create-dmg \
          --volname "GoSilk Staff" \
          --volicon "pyqt_app/resources/icon.icns" \
          --window-pos 200 120 \
          --window-size 600 400 \
          --icon-size 100 \
          --icon "GoSilkStaff.app" 175 120 \
          --hide-extension "GoSilkStaff.app" \
          --app-drop-link 425 120 \
          "dist/GoSilkStaff.dmg" \
          "dist/GoSilkStaff.app" || echo "‚ö†Ô∏è DMG —Å–æ–∑–¥–∞–Ω —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"
          
        # –ï—Å–ª–∏ create-dmg –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π DMG
        if [ ! -f "dist/GoSilkStaff.dmg" ]; then
          echo "üîß –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π DMG..."
          hdiutil create -volname "GoSilk Staff" -srcfolder "dist/GoSilkStaff.app" -ov -format UDZO "dist/GoSilkStaff.dmg"
        fi
        
        if [ -f "dist/GoSilkStaff.dmg" ]; then
          echo "‚úÖ DMG —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!"
          ls -la dist/GoSilkStaff.dmg
          du -sh dist/GoSilkStaff.dmg
        else
          echo "‚ùå DMG —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω!"
        fi
        
    - name: üìã Build summary
      run: |
        echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±–æ—Ä–∫–∏:"
        echo "===================="
        
        if [ -d "dist/GoSilkStaff.app" ]; then
          APP_SIZE=$(du -sh dist/GoSilkStaff.app | cut -f1)
          echo "üì± –†–∞–∑–º–µ—Ä .app: $APP_SIZE"
        fi
        
        if [ -f "dist/GoSilkStaff.dmg" ]; then
          DMG_SIZE=$(du -sh dist/GoSilkStaff.dmg | cut -f1)
          echo "üíø –†–∞–∑–º–µ—Ä .dmg: $DMG_SIZE"
        fi
        
        cat >> $GITHUB_STEP_SUMMARY << EOF
        # üéâ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! 
        
        ## ‚úÖ –≠—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:
        1. **üîç Code Quality** - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        2. **üêç Python Tests** - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ + —Ä–µ–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
        3. **üü¢ Node.js Tests** - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TypeScript/JavaScript + –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤
        4. **üîó Integration** - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã + —Å–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        5. **üîß Pre-Build** - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–±–æ—Ä–∫–µ
        6. **üèóÔ∏è Build** - –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ PyInstaller
        
        ## üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
        - ‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã (–≤–∫–ª—é—á–∞—è —Ä–∞–±–æ—Ç—É —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ –ø—É—Ç–µ–π)
        - ‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–æ (${APP_SIZE:-"—Ä–∞–∑–º–µ—Ä –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è"})
        - ‚úÖ DMG —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω (${DMG_SIZE:-"—Ä–∞–∑–º–µ—Ä –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è"})
        - ‚úÖ –ì–æ—Ç–æ–≤–æ –∫ deployment
        
        **–í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏:** ~10-15 –º–∏–Ω—É—Ç
        **–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:** macOS (Apple Silicon + Intel)
        **–§–æ—Ä–º–∞—Ç:** .app bundle + .dmg installer
        EOF
        
    - name: üì¶ Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gosilk-staff-macos
        path: dist/
        retention-days: 30

  # 7Ô∏è‚É£ –≠–¢–ê–ü: –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  post-build:
    name: ‚úÖ Post-Build Verification
    runs-on: macos-latest
    needs: build-app
    
    steps:
    - name: üì• Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: gosilk-staff-macos
        
    - name: üß™ Verify build
      run: |
        echo "üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
        
        echo "üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞:"
        ls -la
        
        if [ -d "GoSilkStaff.app" ]; then
          echo "‚úÖ .app bundle –Ω–∞–π–¥–µ–Ω"
          echo "üìä –†–∞–∑–º–µ—Ä .app bundle:"
          du -sh GoSilkStaff.app
          
          echo "üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ .app bundle:"
          ls -la GoSilkStaff.app/Contents/
        else
          echo "‚ùå .app bundle –Ω–µ –Ω–∞–π–¥–µ–Ω"
          exit 1
        fi
        
        if [ -f "GoSilkStaff.dmg" ]; then
          echo "‚úÖ DMG —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω"
          echo "üìä –†–∞–∑–º–µ—Ä DMG —Ñ–∞–π–ª–∞:"
          du -sh GoSilkStaff.dmg
        else
          echo "‚ö†Ô∏è DMG —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)"
        fi
        
    - name: üéâ Success notification
      run: |
        echo "üéâ PIPELINE –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù! üöÄ"
        echo "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã (–≤–∫–ª—é—á–∞—è —Ä–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É —Å–∫—Ä–∏–ø—Ç–æ–≤)"
        echo "‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—É—Ç–µ–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞"
        echo "‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Python-Node –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞"
        echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–æ —á–µ—Ä–µ–∑ PyInstaller"
        echo "‚úÖ DMG –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ —Å–æ–∑–¥–∞–Ω"
        echo "‚úÖ –ì–æ—Ç–æ–≤–æ –∫ deployment" 