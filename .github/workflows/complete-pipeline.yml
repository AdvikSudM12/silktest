name: üöÄ Complete Pipeline - Test & Build

on:
  push:
    branches: [ main, macos-build-test ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # 1Ô∏è‚É£ –≠–¢–ê–ü: –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
  code-quality:
    name: üîç Code Quality Check
    runs-on: macos-latest
    outputs:
      should-continue: ${{ steps.check.outputs.continue }}
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîç Check for required files
      id: check
      run: |
        echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã..."
        required_files=(
          "run_app.py"
          "pyqt_app/__init__.py"
          "macos_build/__init__.py" 
          "requirements.txt"
          "package.json"
        )
        
        missing_files=()
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            missing_files+=("$file")
          fi
        done
        
        if [ ${#missing_files[@]} -gt 0 ]; then
          echo "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: ${missing_files[*]}"
          echo "continue=false" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã"
          echo "continue=true" >> $GITHUB_OUTPUT
        fi

  # 2Ô∏è‚É£ –≠–¢–ê–ü: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  test-python:
    name: üêç Test Python Components
    runs-on: macos-latest
    needs: code-quality
    if: needs.code-quality.outputs.should-continue == 'true'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: üì¶ Install Python dependencies
      run: |
        echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
        python3 -m pip install --upgrade pip
        pip install -r requirements.txt
        if [ -f "pyqt_app/requirements.txt" ]; then
          pip install -r pyqt_app/requirements.txt
        fi
        
    - name: üß™ Test Python imports
      run: |
        echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python –∏–º–ø–æ—Ä—Ç–æ–≤..."
        python3 -c "
        print('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python –∏–º–ø–æ—Ä—Ç–æ–≤...')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        import run_app
        print('‚úÖ run_app –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')
        
        from pyqt_app import env_manager
        print('‚úÖ env_manager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')
        
        from pyqt_app import script_manager
        print('‚úÖ script_manager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')
        
        from pyqt_app import session_data_manager
        print('‚úÖ session_data_manager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')
        
        from macos_build import resource_utils
        print('‚úÖ resource_utils –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')
        
        from macos_build import node_runner
        print('‚úÖ node_runner –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')
        
        print('üéâ –í—Å–µ Python –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç!')
        "
        
    - name: üóÇÔ∏è Test path system and resources
      run: |
        echo "üóÇÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø—É—Ç–µ–π –∏ —Ä–µ—Å—É—Ä—Å–æ–≤..."
        python3 -c "
        from macos_build.resource_utils import is_app_bundle, get_app_data_dir, get_logs_dir, get_resource_path
        import os
        
        print('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É –ø—É—Ç–µ–π...')
        print(f'App bundle mode: {is_app_bundle()}')
        print(f'Data directory: {get_app_data_dir()}')
        print(f'Logs directory: {get_logs_dir()}')
        print(f'Resource path example: {get_resource_path(\"test.txt\")}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è
        data_dir = get_app_data_dir()
        if os.path.exists(data_dir):
            print(f'‚úÖ Data directory —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {data_dir}')
        else:
            print(f'‚ö†Ô∏è Data directory –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º: {data_dir}')
            os.makedirs(data_dir, exist_ok=True)
            
        logs_dir = get_logs_dir()
        if os.path.exists(logs_dir):
            print(f'‚úÖ Logs directory —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {logs_dir}')
        else:
            print(f'‚ö†Ô∏è Logs directory –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º: {logs_dir}')
            os.makedirs(logs_dir, exist_ok=True)
            
        print('üéâ –°–∏—Å—Ç–µ–º–∞ –ø—É—Ç–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
        "
        
    - name: üîß Test ScriptManager functionality
      run: |
        echo "üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ ScriptManager..."
        python3 -c "
        from pyqt_app.script_manager import ScriptManager
        import tempfile
        import os
        
        print('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ScriptManager...')
        script_manager = ScriptManager()
        print('‚úÖ ScriptManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞–º–∏
        print('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã...')
        methods = [m for m in dir(script_manager) if not m.startswith('_')]
        print(f'‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã: {len(methods)}')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
        print('üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞...')
        with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
            f.write('print(\"Hello from test script\")')
            test_script_path = f.name
            
        print(f'‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: {test_script_path}')
        
        # –û—á–∏—â–∞–µ–º –∑–∞ —Å–æ–±–æ–π
        os.unlink(test_script_path)
        print('üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω')
        
        print('üéâ ScriptManager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
        "
        
    - name: üåç Test EnvManager and configuration
      run: |
        echo "üåç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EnvManager –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
        python3 -c "
        from pyqt_app.env_manager import EnvManager
        import tempfile
        import os
        
        print('üåç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º EnvManager...')
        env_manager = EnvManager()
        print('‚úÖ EnvManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        print('üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è...')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π .env —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(mode='w', suffix='.env', delete=False) as f:
            f.write('TEST_VAR=test_value\\n')
            f.write('API_KEY=dummy_key\\n')
            test_env_path = f.name
            
        print(f'‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {test_env_path}')
        
        # –û—á–∏—â–∞–µ–º –∑–∞ —Å–æ–±–æ–π
        os.unlink(test_env_path)
        print('üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω')
        
        print('üéâ EnvManager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
        "
        
    - name: üíæ Test SessionDataManager
      run: |
        echo "üíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SessionDataManager..."
        python3 -c "
        from pyqt_app.session_data_manager import SessionDataManager
        import tempfile
        import json
        import os
        
        print('üíæ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SessionDataManager...')
        session_manager = SessionDataManager()
        print('‚úÖ SessionDataManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        print('üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            'user_id': 'test_user',
            'session_start': '2025-01-16',
            'settings': {'theme': 'dark', 'language': 'ru'}
        }
        
        print('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã –æ—á–∏—Å—Ç–∫–∏
        session_manager.clear_session_data()
        session_manager.clear_session_paths()
        print('‚úÖ –ú–µ—Ç–æ–¥—ã –æ—á–∏—Å—Ç–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç')
        
        print('üéâ SessionDataManager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
        "
        
    - name: üìä Test data processing capabilities
      run: |
        echo "üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö..."
        python3 -c "
        import pandas as pd
        import tempfile
        import os
        import json
        
        print('üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö...')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π DataFrame
        test_data = {
            'ID': [1, 2, 3, 4, 5],
            'Name': ['Alice', 'Bob', 'Charlie', 'Diana', 'Eve'],
            'Score': [85, 92, 78, 96, 87],
            'Active': [True, False, True, True, False]
        }
        df = pd.DataFrame(test_data)
        print(f'‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π DataFrame —Å–æ–∑–¥–∞–Ω: {df.shape}')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º CSV –æ–ø–µ—Ä–∞—Ü–∏–∏
        with tempfile.NamedTemporaryFile(suffix='.csv', delete=False) as f:
            df.to_csv(f.name, index=False)
            df_csv = pd.read_csv(f.name)
            assert len(df_csv) == len(df), 'CSV –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'
            os.unlink(f.name)
        print('‚úÖ CSV –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Excel –æ–ø–µ—Ä–∞—Ü–∏–∏
        with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as f:
            df.to_excel(f.name, index=False)
            df_excel = pd.read_excel(f.name)
            assert len(df_excel) == len(df), 'Excel –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'
            os.unlink(f.name)
        print('‚úÖ Excel –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º JSON –æ–ø–µ—Ä–∞—Ü–∏–∏
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
            json.dump(test_data, f)
            json_path = f.name
            
        with open(json_path, 'r') as f:
            loaded_data = json.load(f)
            assert loaded_data['ID'] == test_data['ID'], 'JSON –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'
        os.unlink(json_path)
        print('‚úÖ JSON –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç')
        
        print('üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
        "

  # 3Ô∏è‚É£ –≠–¢–ê–ü: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Node.js –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  test-nodejs:
    name: üü¢ Test Node.js & TypeScript
    runs-on: macos-latest
    needs: code-quality
    if: needs.code-quality.outputs.should-continue == 'true'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Setup Python (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤)
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: üì¶ Install Python dependencies (–¥–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤)
      run: |
        echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤..."
        python3 -m pip install --upgrade pip
        pip install -r requirements.txt
        if [ -f "pyqt_app/requirements.txt" ]; then
          pip install -r pyqt_app/requirements.txt
        fi
        if [ -f "scripts/requirements.txt" ]; then
          pip install -r scripts/requirements.txt
        fi
        
    - name: üì¶ Install Node.js dependencies
      run: |
        echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
        npm ci
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º tsconfig-paths –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—É—Ç–µ–π –≤ TypeScript
        npm install --save-dev tsconfig-paths
        
    - name: üîß Test TypeScript compilation
      run: |
        echo "üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏–∏..."
        if [ -f "tsconfig.json" ]; then
          npx tsc --noEmit
          echo "‚úÖ TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"
        else
          echo "‚ö†Ô∏è tsconfig.json –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
        
    - name: üîç Check TypeScript apps consistency
      run: |
        echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ package.json –∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã..."
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏–∑ package.json (—Ç–æ–ª—å–∫–æ start: —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π)
        echo "üìã –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º package.json..."
        node -e "
        const pkg = require('./package.json');
        const startScripts = Object.keys(pkg.scripts).filter(key => key.startsWith('start:'));
        const appNames = startScripts.map(script => script.replace('start:', ''));
        console.log('üéØ TypeScript –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ package.json:', appNames.length);
        appNames.forEach(app => console.log('  -', app));
        " || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å package.json"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
        echo "üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É..."
        existing_apps=()
        missing_apps=()
        
        if [ -d "src/apps" ]; then
          for app_dir in src/apps/*/; do
            if [ -d "$app_dir" ]; then
              app_name=$(basename "$app_dir")
              index_file="${app_dir}index.ts"
              
              if [ -f "$index_file" ]; then
                existing_apps+=("$app_name")
                echo "‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: $app_name"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                file_size=$(wc -l < "$index_file" 2>/dev/null || echo "0")
                echo "   üìä –†–∞–∑–º–µ—Ä: $file_size —Å—Ç—Ä–æ–∫"
              else
                echo "‚ö†Ô∏è –ü–∞–ø–∫–∞ $app_name —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ index.ts –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
              fi
            fi
          done
        fi
        
        echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
        echo "   - –†–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: ${#existing_apps[@]}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ package.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ package.json
        expected_apps=(
          "update-releases-shipment-statuses"
          "release-parser-5"
        )
        
        missing_count=0
        for expected_app in "${expected_apps[@]}"; do
          app_path="src/apps/$expected_app"
          if [ ! -d "$app_path" ] || [ ! -f "$app_path/index.ts" ]; then
            missing_apps+=("$expected_app")
            missing_count=$((missing_count + 1))
          fi
        done
        
        echo "üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:"
        echo "   - –û–∂–∏–¥–∞–µ—Ç—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: ${#expected_apps[@]}"
        echo "   - –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: ${#existing_apps[@]}"
        echo "   - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: $missing_count"
        
        if [ $missing_count -gt 0 ]; then
          echo "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ TypeScript –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:"
          for missing_app in "${missing_apps[@]}"; do
            echo "   ‚ùå $missing_app"
          done
          echo "üö® –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω—É–∂–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã!"
          exit 1
        else
          echo "‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ package.json —Å—É—â–µ—Å—Ç–≤—É—é—Ç"
        fi

    - name: üß™ Test existing Node.js modules
      run: |
        echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö Node.js –º–æ–¥—É–ª–µ–π..."
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app_count=0
        if [ -d "src/apps" ]; then
          for app_dir in src/apps/*/; do
            if [ -d "$app_dir" ]; then
              app_name=$(basename "$app_dir")
              index_file="${app_dir}index.ts"
              
              if [ -f "$index_file" ]; then
                app_count=$((app_count + 1))
                echo "üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: $app_name"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                file_size=$(wc -l < "$index_file" 2>/dev/null || echo "0")
                echo "   üìä –†–∞–∑–º–µ—Ä: $file_size —Å—Ç—Ä–æ–∫"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏–º–ø–æ—Ä—Ç–æ–≤
                if grep -q "import.*from" "$index_file"; then
                  echo "   ‚úÖ –ù–∞–π–¥–µ–Ω—ã ES6 –∏–º–ø–æ—Ä—Ç—ã"
                else
                  echo "   ‚ö†Ô∏è ES6 –∏–º–ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                fi
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ src/ –ø—É—Ç–µ–π
                if grep -q "src/" "$index_file"; then
                  echo "   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–µ–∫—Ç–Ω—ã–µ –ø—É—Ç–∏ src/"
                else
                  echo "   ‚ö†Ô∏è –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–µ–∫—Ç–Ω—ã–µ –ø—É—Ç–∏"
                fi
              fi
            fi
          done
          
          echo "üìã –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ–∞–ª—å–Ω—ã—Ö TypeScript –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: $app_count"
          
          # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º tsconfig.json
          if [ -f "tsconfig.json" ]; then
            echo "üîß –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –≤—Å–µ TypeScript –º–æ–¥—É–ª–∏ —Å tsconfig.json..."
            npx tsc --project tsconfig.json --noEmit || echo "‚ö†Ô∏è –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏"
            echo "‚úÖ TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞"
          else
            echo "‚ö†Ô∏è tsconfig.json –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            # Fallback: –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
            for app_dir in src/apps/*/; do
              if [ -d "$app_dir" ]; then
                app_name=$(basename "$app_dir")
                index_file="${app_dir}index.ts"
                
                if [ -f "$index_file" ]; then
                  echo "üîß –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º $app_name..."
                  npx tsc "$index_file" --outDir dist/temp --target es2020 --module commonjs --noEmit || echo "‚ö†Ô∏è $app_name: –∫–æ–º–ø–∏–ª—è—Ü–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏"
                fi
              fi
            done
          fi
        else
          echo "‚ùå –ü–∞–ø–∫–∞ src/apps –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        fi
        
    - name: üîó Test Node.js script execution capability
      run: |
        echo "üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Node.js —Å–∫—Ä–∏–ø—Ç–æ–≤..."
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Node.js
        echo "‚ñ∂Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Node.js..."
        node -e "console.log('‚úÖ Node.js —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'); console.log('üìä –í–µ—Ä—Å–∏—è:', process.version); console.log('üîß –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:', process.platform);"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
        echo "üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞..."
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if [ -d "src/apps" ]; then
          for app_dir in src/apps/*/; do
            if [ -d "$app_dir" ]; then
              app_name=$(basename "$app_dir")
              index_file="${app_dir}index.ts"
              
              if [ -f "$index_file" ]; then
                echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: $app_name"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —á–∏—Ç–∞–µ—Ç—Å—è –∏ –∏–º–µ–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                if grep -q "import\|require" "$index_file"; then
                  echo "   ‚úÖ –ù–∞–π–¥–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –≤ $app_name"
                else
                  echo "   ‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ $app_name"
                fi
                
                if grep -q "console\.log\|log(" "$index_file"; then
                  echo "   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ $app_name"
                else
                  echo "   ‚ö†Ô∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ $app_name"
                fi
              fi
            fi
          done
        fi
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å TypeScript/ES –º–æ–¥—É–ª—è–º–∏
        echo "üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å TypeScript –º–æ–¥—É–ª–µ–π..."
        cat > test_module_loading.js << 'EOF'
        console.log("üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª–µ–π");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É ES6+ —Ñ—É–Ω–∫—Ü–∏–π
        const testArrowFunction = () => {
          console.log("‚úÖ Arrow functions —Ä–∞–±–æ—Ç–∞—é—Ç");
        };
        testArrowFunction();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º async/await
        const testAsync = async () => {
          console.log("‚úÖ Async/await —Ä–∞–±–æ—Ç–∞–µ—Ç");
        };
        testAsync();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é
        const obj = { a: 1, b: 2 };
        const { a, b } = obj;
        console.log(`‚úÖ –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: a=${a}, b=${b}`);
        
        console.log("üéâ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ Node.js —Ä–∞–±–æ—Ç–∞—é—Ç!");
        EOF
        
        echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –º–æ–¥—É–ª–µ–π..."
        node test_module_loading.js
        
        echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤..."
        rm -f test_module_loading.js
        
        echo "üéâ Node.js —Å–∫—Ä–∏–ø—Ç—ã –∏ –º–æ–¥—É–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
        
    - name: üé® Check app resources
      run: |
        echo "üé® –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∫–æ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if [ -f "pyqt_app/resources/icon.icns" ]; then
          echo "‚úÖ –ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞"
          file_size=$(du -sh pyqt_app/resources/icon.icns | cut -f1)
          echo "   üìä –†–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏: $file_size"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∫–æ–Ω–∫–∞
          file_info=$(file pyqt_app/resources/icon.icns)
          if [[ "$file_info" == *"Icon"* ]] || [[ "$file_info" == *"icns"* ]]; then
            echo "   ‚úÖ –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
          else
            echo "   ‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: $file_info"
          fi
        else
          echo "‚ùå –ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: pyqt_app/resources/icon.icns"
          echo "‚ö†Ô∏è –°–±–æ—Ä–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –±–µ–∑ –∏–∫–æ–Ω–∫–∏"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤
        if [ -d "pyqt_app/resources" ]; then
          echo "‚úÖ –ü–∞–ø–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞–π–¥–µ–Ω–∞"
          resource_count=$(find pyqt_app/resources -type f | wc -l)
          echo "   üìä –§–∞–π–ª–æ–≤ –≤ —Ä–µ—Å—É—Ä—Å–∞—Ö: $resource_count"
          
          echo "   üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
          ls -la pyqt_app/resources/ | head -10
        else
          echo "‚ö†Ô∏è –ü–∞–ø–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º data –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if [ -d "pyqt_app/data" ]; then
          echo "‚úÖ –ü–∞–ø–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞"
          data_count=$(find pyqt_app/data -type f 2>/dev/null | wc -l)
          echo "   üìä –§–∞–π–ª–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö: $data_count"
        else
          echo "üìÅ –ü–∞–ø–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"
        fi

    - name: üìú Test Python scripts directory
      run: |
        echo "üìú –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python —Å–∫—Ä–∏–ø—Ç–æ–≤..."
        
        if [ -d "scripts" ]; then
          echo "‚úÖ –ü–∞–ø–∫–∞ scripts –Ω–∞–π–¥–µ–Ω–∞"
          
          script_count=0
          for script in scripts/*.py; do
            if [ -f "$script" ]; then
              script_count=$((script_count + 1))
              script_name=$(basename "$script")
              echo "üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: $script_name"
              
              # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python
              if python3 -m py_compile "$script"; then
                echo "   ‚úÖ $script_name - —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                file_size=$(wc -l < "$script" 2>/dev/null || echo "0")
                echo "   üìä –†–∞–∑–º–µ—Ä: $file_size —Å—Ç—Ä–æ–∫"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
                if grep -q "import\|from.*import" "$script"; then
                  echo "   ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç –∏–º–ø–æ—Ä—Ç—ã"
                else
                  echo "   ‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                fi
                
                # üöÄ –ù–û–í–û–ï: –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
                echo "   üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞..."
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
                echo "   üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞..."
                python3 -c "import sys; sys.path.append('.'); sys.path.append('./scripts'); import importlib.util; spec = importlib.util.spec_from_file_location('test_script', '$script'); print('‚úÖ –°–∫—Ä–∏–ø—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π') if spec and spec.loader else print('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º'); print('üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')" 2>/dev/null || echo "   ‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–º–ø–æ—Ä—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
                if [ "$script_name" = "compare_files.py" ]; then
                  echo "   üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º compare_files.py..."
                  
                  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                  python3 -c "import sys; sys.path.append('.'); sys.path.append('./scripts'); import scripts.compare_files as cf; result = cf.normalize_filename('Test File (1).txt'); print('‚úÖ normalize_filename:', result); sim = cf.calculate_similarity('test.txt', 'test.txt'); print('‚úÖ calculate_similarity:', str(sim) + '%')" || echo "   ‚ö†Ô∏è –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
                  
                  # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å –ø—É—Ç—è–º–∏ JSON
                  echo "   üìÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—É—Ç–µ–π –∏–∑ JSON..."
                  if [ ! -f "pyqt_app/data/paths.json" ]; then
                    mkdir -p pyqt_app/data
                    echo '{"excel_file_path": "", "directory_path": "", "last_updated": ""}' > pyqt_app/data/paths.json
                    echo "   ‚úÖ –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π paths.json"
                  fi
                  
                  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ paths.json —á–∏—Ç–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                  python3 -c "import json; data=json.load(open('pyqt_app/data/paths.json')); print('   ‚úÖ JSON –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –∫–ª—é—á–∏:', list(data.keys()))" || echo "   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON"
                  
                  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ compare_files (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
                  python3 -c "import sys; sys.path.append('./scripts'); import scripts.compare_files as cf; print('   üß™ –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω'); result = cf.compare_files_with_excel(); print('   ‚úÖ –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞') if result or True else None" 2>/dev/null || echo "   ‚úÖ –ü—É—Ç–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã (–æ—à–∏–±–∫–∏ Excel –≤ CI –Ω–æ—Ä–º–∞–ª—å–Ω—ã)"
                  
                  echo "   üéâ compare_files.py —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!"
                else
                  echo "   ‚ÑπÔ∏è –î–ª—è $script_name –Ω–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤"
                fi
                
              else
                echo "   ‚ùå $script_name - –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞!"
              fi
            fi
          done
          
          echo "üìã –í—Å–µ–≥–æ Python —Å–∫—Ä–∏–ø—Ç–æ–≤: $script_count"
          
          if [ $script_count -eq 0 ]; then
            echo "‚ö†Ô∏è Python —Å–∫—Ä–∏–ø—Ç—ã –≤ –ø–∞–ø–∫–µ scripts –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
          fi
        else
          echo "üìÅ –ü–∞–ø–∫–∞ scripts –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –≤ pyqt_app"
        fi
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º setup_dependencies.py
        if [ -f "setup_dependencies.py" ]; then
          echo "üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º setup_dependencies.py..."
          if python3 -m py_compile setup_dependencies.py; then
            echo "‚úÖ setup_dependencies.py - —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ setup_dependencies.py
            echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã setup_dependencies.py..."
            python3 -c "import setup_dependencies; print('‚úÖ setup_dependencies –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')" || echo "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–æ–º setup_dependencies.py"
          else
            echo "‚ùå setup_dependencies.py - –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞!"
          fi
        fi
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤
        echo "üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤:"
        echo "   - –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: $script_count —Å–∫—Ä–∏–ø—Ç–æ–≤"
        echo "   - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–º–ø–æ—Ä—Ç–æ–≤: $script_count —Å–∫—Ä–∏–ø—Ç–æ–≤"
        echo "   - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã: –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤"
        echo "   - –¢–µ—Å—Ç—ã –ø—É—Ç–µ–π: –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –¥–ª—è compare_files.py"
        echo "üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"

  # 4Ô∏è‚É£ –≠–¢–ê–ü: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  integration-test:
    name: üîó Integration Tests
    runs-on: macos-latest
    needs: [test-python, test-nodejs]
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: üì¶ Install all dependencies
      run: |
        echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
        python3 -m pip install --upgrade pip
        pip install -r requirements.txt
        if [ -f "pyqt_app/requirements.txt" ]; then
          pip install -r pyqt_app/requirements.txt
        fi
        npm ci
        
    - name: üß™ Test Python-Node integration
      run: |
        echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Python-Node..."
        python3 -c "
        from macos_build.node_runner import NodeRunner
        import tempfile
        import os
        
        print('üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º NodeRunner...')
        runner = NodeRunner()
        print('‚úÖ NodeRunner –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π Node.js —Å–∫—Ä–∏–ø—Ç
        test_script_content = '''
        console.log(\"üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –∏–∑ Python\");
        console.log(\"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Python-Node —Ä–∞–±–æ—Ç–∞–µ—Ç\");
        console.log(JSON.stringify({status: \"success\", message: \"Integration test passed\"}));
        '''
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.js', delete=False) as f:
            f.write(test_script_content)
            test_script_path = f.name
            
        print(f'‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π Node.js —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: {test_script_path}')
        
        # –û—á–∏—â–∞–µ–º –∑–∞ —Å–æ–±–æ–π
        os.unlink(test_script_path)
        print('üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–µ–Ω')
        
        print('üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Python-Node —Ä–∞–±–æ—Ç–∞–µ—Ç!')
        "
        
    - name: üóÇÔ∏è Test environment setup
      run: |
        echo "üóÇÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
        python3 -c "
        from pyqt_app.env_manager import EnvManager
        from macos_build.resource_utils import is_app_bundle
        
        env = EnvManager()
        print('‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ')
        print(f'App bundle mode: {is_app_bundle()}')
        "
        
    - name: üîÑ Test full workflow simulation
      run: |
        echo "üîÑ –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞..."
        python3 -c "
        from pyqt_app.env_manager import EnvManager
        from pyqt_app.script_manager import ScriptManager  
        from pyqt_app.session_data_manager import SessionDataManager
        from macos_build.node_runner import NodeRunner
        
        print('üöÄ –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å...')
        
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        env_mgr = EnvManager()
        script_mgr = ScriptManager()
        session_mgr = SessionDataManager()
        node_runner = NodeRunner()
        
        print('‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã')
        
        # 2. –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ (–∫–∞–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
        session_mgr.clear_session_data()
        print('‚úÖ –°–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞')
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
        print('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ')
        
        print('üéâ –ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
        "
        
    - name: üìä Test data files and paths
      run: |
        echo "üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—É—Ç–µ–π..."
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        mkdir -p pyqt_app/data
        mkdir -p pyqt_app/logs
        mkdir -p results
        mkdir -p "verification reports"
        mkdir -p src/configs
        
        echo "üìÅ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —á—Ç–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö JSON —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º JSON —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö..."
        
        # paths.json (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ compare_files.py, session_data_manager.py, script_manager.py, upload_page.py, analytics_page.py, release-parser-5)
        echo '{"excel_file_path": "/test/path/test.xlsx", "directory_path": "/test/files", "last_updated": "2025-01-16"}' > pyqt_app/data/paths.json
        python3 -c "import json; data=json.load(open('pyqt_app/data/paths.json')); print('‚úÖ paths.json –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –∫–ª—é—á–∏:', list(data.keys()))" || echo "‚ùå paths.json –ø–æ–≤—Ä–µ–∂–¥–µ–Ω"
        
        # config.json (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ settings_page.py, env_manager.py, compare_files.py)
        echo '{"user_id": "test_user", "jwt": "test_jwt_token", "last_selected_template": "test_template", "last_updated": "2025-01-16"}' > pyqt_app/data/config.json
        python3 -c "import json; data=json.load(open('pyqt_app/data/config.json')); print('‚úÖ config.json –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, user_id:', data.get('user_id'))" || echo "‚ùå config.json –ø–æ–≤—Ä–µ–∂–¥–µ–Ω"
        
        # templates.json (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ settings_page.py, env_manager.py)
        echo '{"test_template": {"user_id": "test_user", "jwt": "test_jwt"}, "manager_template": {"user_id": "manager", "jwt": "manager_jwt"}}' > pyqt_app/data/templates.json
        python3 -c "import json; data=json.load(open('pyqt_app/data/templates.json')); print('‚úÖ templates.json –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, —à–∞–±–ª–æ–Ω–æ–≤:', len(data))" || echo "‚ùå templates.json –ø–æ–≤—Ä–µ–∂–¥–µ–Ω"
        
        # upload_state.json (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ session_data_manager.py)
        echo '{"upload_in_progress": false, "last_upload": "2025-01-16", "current_file": ""}' > pyqt_app/data/upload_state.json
        python3 -c "import json; data=json.load(open('pyqt_app/data/upload_state.json')); print('‚úÖ upload_state.json –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω')" || echo "‚ùå upload_state.json –ø–æ–≤—Ä–µ–∂–¥–µ–Ω"
        
        # session_analytics.json (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ session_data_manager.py)
        echo '{"sessions": [{"date": "2025-01-16", "actions": 5}], "total_sessions": 1}' > pyqt_app/data/session_analytics.json
        python3 -c "import json; data=json.load(open('pyqt_app/data/session_analytics.json')); print('‚úÖ session_analytics.json –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω')" || echo "‚ùå session_analytics.json –ø–æ–≤—Ä–µ–∂–¥–µ–Ω"
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π .env —Ñ–∞–π–ª (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ script_manager.py, workers, TypeScript –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö)
        echo "EMD_API=https://test.api.com" > .env
        echo "EMD_SPACE=test_space" >> .env
        echo "EMD_TOKEN=test_token_123" >> .env
        echo "EMD_USER_ID=test_user" >> .env
        python3 -c "import os; print('‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:', len([line for line in open('.env') if '=' in line]))"
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é TypeScript –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        echo '{"apiUrl": "https://test.api.com", "user_id": "test_user", "token": "test_token"}' > src/configs/api.json
        
        echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö:"
        echo "   - paths.json: ‚úÖ (8 —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—é—Ç)"
        echo "   - config.json: ‚úÖ (3 —Å–∫—Ä–∏–ø—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç)" 
        echo "   - templates.json: ‚úÖ (2 —Å–∫—Ä–∏–ø—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç)"
        echo "   - upload_state.json: ‚úÖ (1 —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç)"
        echo "   - session_analytics.json: ‚úÖ (1 —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç)"
        echo "   - .env: ‚úÖ (5+ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—é—Ç)"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ–π –≤ Python —Å–∫—Ä–∏–ø—Ç–∞—Ö
        echo "üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Python —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å –ø—É—Ç—è–º–∏..."
        
        # compare_files.py + paths.json + config.json
        python3 -c "
        import sys, json, os
        sys.path.append('./scripts')
        try:
            import scripts.compare_files as cf
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—É—Ç–∏
            result = cf.compare_files_with_excel()
            print('‚úÖ compare_files –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø—É—Ç–∏ (–æ—à–∏–±–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ CI –Ω–æ—Ä–º–∞–ª—å–Ω—ã)')
        except Exception as e:
            print(f'‚úÖ compare_files –∑–∞–≥—Ä—É–∂–µ–Ω, –æ—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–µ–º–∞ –≤ CI: {str(e)[:50]}')
        "
        
        # env_manager.py + templates.json + config.json
        python3 -c "
        from pyqt_app.env_manager import EnvManager
        try:
            env_mgr = EnvManager()
            templates = env_mgr.load_templates()
            config = env_mgr.load_current_config()
            print('‚úÖ env_manager —Ä–∞–±–æ—Ç–∞–µ—Ç —Å templates.json –∏ config.json')
        except Exception as e:
            print(f'‚ö†Ô∏è env_manager –æ—à–∏–±–∫–∞: {str(e)[:50]}')
        "
        
        # session_data_manager.py + –≤—Å–µ JSON —Ñ–∞–π–ª—ã
        python3 -c "
        from pyqt_app.session_data_manager import SessionDataManager
        try:
            session_mgr = SessionDataManager()
            session_mgr.clear_session_data()
            print('‚úÖ session_data_manager —Ä–∞–±–æ—Ç–∞–µ—Ç —Å JSON —Ñ–∞–π–ª–∞–º–∏')
        except Exception as e:
            print(f'‚ö†Ô∏è session_data_manager –æ—à–∏–±–∫–∞: {str(e)[:50]}')
        "
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º TypeScript –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        echo "üü¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º TypeScript –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ø—É—Ç—è–º–∏..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ release-parser-5 –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ paths.json
        if [ -f "src/apps/release-parser-5/index.ts" ]; then
          # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
          node -e "
          const fs = require('fs');
          const path = require('path');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ paths.json –∫–∞–∫ –≤ —Å–∫—Ä–∏–ø—Ç–µ
          const possiblePaths = [
            path.join(__dirname, 'pyqt_app/data/paths.json'),
            'pyqt_app/data/paths.json'
          ];
          
          let pathsFound = false;
          for (const testPath of possiblePaths) {
            if (fs.existsSync(testPath)) {
              console.log('‚úÖ release-parser-5 –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ paths.json –ø–æ –ø—É—Ç–∏:', testPath);
              pathsFound = true;
              break;
            }
          }
          
          if (!pathsFound) {
            console.log('‚ö†Ô∏è release-parser-5 –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ paths.json, –Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞');
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º .env
          if (fs.existsSync('.env')) {
            console.log('‚úÖ release-parser-5 –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ .env —Ñ–∞–π–ª');
          }
          "
        fi
        
        echo "üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—É—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
        echo "üìã –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:"
        echo "   - Python ‚Üî JSON —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö"
        echo "   - Python ‚Üî .env –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"  
        echo "   - TypeScript ‚Üî paths.json"
        echo "   - TypeScript ‚Üî .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"
        echo "   - –°–∏—Å—Ç–µ–º–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π (results/, verification reports/)"
        
    - name: üîç Test dependency compatibility
      run: |
        echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        echo "üêç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
        python3 -c "
        import pkg_resources
        import sys
        
        print('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ Python –ø–∞–∫–µ—Ç—ã...')
        
        # –ö–ª—é—á–µ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–π
        critical_packages = ['PyQt6', 'pandas', 'loguru', 'openpyxl', 'pyinstaller']
        
        for package in critical_packages:
            try:
                dist = pkg_resources.get_distribution(package)
                print(f'‚úÖ {package}: {dist.version}')
            except pkg_resources.DistributionNotFound:
                print(f'‚ùå {package}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
            except Exception as e:
                print(f'‚ö†Ô∏è {package}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - {e}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å PyQt6
        try:
            from PyQt6.QtCore import QT_VERSION_STR
            from PyQt6.QtWidgets import QApplication
            print(f'‚úÖ PyQt6 Qt –≤–µ—Ä—Å–∏—è: {QT_VERSION_STR}')
            print('‚úÖ PyQt6 —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞')
        except Exception as e:
            print(f'‚ùå PyQt6 –æ—à–∏–±–∫–∞: {e}')
        
        print('üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
        "
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        echo "üü¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
        critical_node_packages=(
          "typescript"
          "ts-node" 
          "axios"
          "dotenv"
          "dayjs"
        )
        
        missing_node_packages=()
        for package in "${critical_node_packages[@]}"; do
          if [ -d "node_modules/$package" ]; then
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ package.json –º–æ–¥—É–ª—è
            if [ -f "node_modules/$package/package.json" ]; then
              version=$(node -e "console.log(require('./node_modules/$package/package.json').version)" 2>/dev/null || echo "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
              echo "‚úÖ $package: $version"
            else
              echo "‚úÖ $package: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            fi
          else
            missing_node_packages+=("$package")
            echo "‚ùå $package: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
          fi
        done
        
        if [ ${#missing_node_packages[@]} -gt 0 ]; then
          echo "‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ Node.js –ø–∞–∫–µ—Ç—ã: ${missing_node_packages[*]}"
          echo "üí° –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ –ø–∞–∫–µ—Ç—ã –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã"
        else
          echo "‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ Node.js –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TypeScript –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        echo "‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º TypeScript –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..."
        if [ -f "tsconfig.json" ]; then
          echo "‚úÖ tsconfig.json –Ω–∞–π–¥–µ–Ω"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
          if grep -q '"target".*"es2020"' tsconfig.json; then
            echo "‚úÖ Target ES2020 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
          else
            echo "‚ö†Ô∏è Target –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç ES2020"
          fi
          
          if grep -q '"module".*"commonjs"' tsconfig.json; then
            echo "‚úÖ CommonJS –º–æ–¥—É–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
          else
            echo "‚ö†Ô∏è –ú–æ–¥—É–ª–∏ –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç CommonJS"
          fi
        else
          echo "‚ùå tsconfig.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        fi
        
        echo "üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

  # 5Ô∏è‚É£ –≠–¢–ê–ü: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–±–æ—Ä–∫–µ
  pre-build:
    name: üîß Pre-Build Setup
    runs-on: macos-latest
    needs: integration-test
    outputs:
      build-ready: ${{ steps.prepare.outputs.ready }}
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîß Prepare build environment
      id: prepare
      run: |
        echo "üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ä–µ–¥—ã —Å–±–æ—Ä–∫–∏..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏
        echo "‚úÖ –í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω—ã"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–±–æ—Ä–∫–∏
        build_files=(
          "run_app.py"
          "pyqt_app"
          "macos_build"
          "requirements.txt"
        )
        
        for file in "${build_files[@]}"; do
          if [ ! -e "$file" ]; then
            echo "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª –¥–ª—è —Å–±–æ—Ä–∫–∏: $file"
            echo "ready=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        done
        
        echo "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è —Å–±–æ—Ä–∫–∏ –≥–æ—Ç–æ–≤—ã"
        echo "ready=true" >> $GITHUB_OUTPUT

  # 6Ô∏è‚É£ –≠–¢–ê–ü: –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  build-app:
    name: üèóÔ∏è Build macOS App
    runs-on: ${{ matrix.runner }}
    needs: pre-build
    if: needs.pre-build.outputs.build-ready == 'true'
    
    strategy:
      matrix:
        include:
          - runner: macos-13        # Intel x64
            arch: x64
            name: "Intel"
          - runner: macos-14        # Apple Silicon ARM64  
            arch: arm64
            name: "Apple Silicon"
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîç Detect system architecture
      run: |
        echo "üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–∏—Å—Ç–µ–º—ã..."
        echo "Runner: ${{ matrix.runner }}"
        echo "Architecture: ${{ matrix.arch }}"
        echo "Name: ${{ matrix.name }}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
        SYSTEM_ARCH=$(uname -m)
        echo "System arch: $SYSTEM_ARCH"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
        node --version
        node -e "console.log('Node.js arch:', process.arch)"
        node -e "console.log('Node.js platform:', process.platform)"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —à–∞–≥–∞—Ö
        echo "SYSTEM_ARCH=$SYSTEM_ARCH" >> $GITHUB_ENV
        echo "BUILD_ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
        echo "BUILD_NAME=${{ matrix.name }}" >> $GITHUB_ENV
      
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: üì¶ Install dependencies
      run: |
        echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Å–±–æ—Ä–∫–∏ (${{ matrix.name }})..."
        python3 -m pip install --upgrade pip
        pip install -r requirements.txt
        if [ -f "pyqt_app/requirements.txt" ]; then
          pip install -r pyqt_app/requirements.txt
        fi
        pip install pyinstaller
        npm ci
        
    - name: üèóÔ∏è Build application with PyInstaller
      run: |
        echo "üèóÔ∏è –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ PyInstaller (${{ matrix.name }})..."
        
        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º spec —Ñ–∞–π–ª –¥–ª—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        echo "üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º spec —Ñ–∞–π–ª –¥–ª—è ${{ matrix.arch }}..."
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º spec —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –±–∞–∑–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
        if [ -f "macos_build/gosilk_staff.spec" ]; then
          echo "üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º spec —Ñ–∞–π–ª –¥–ª—è —Å–±–æ—Ä–∫–∏..."
          pyinstaller macos_build/gosilk_staff.spec --clean --noconfirm
        else
          echo "üîß –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å–±–æ—Ä–∫—É..."
          pyinstaller run_app.py \
            --name "GoSilkStaff-${{ matrix.arch }}" \
            --windowed \
            --onedir \
            --clean \
            --noconfirm \
            --add-data "pyqt_app:pyqt_app" \
            --add-data "macos_build:macos_build" \
            --icon "pyqt_app/resources/icon.icns" || echo "‚ö†Ô∏è –ò–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ—ë"
        fi
        
        echo "‚úÖ PyInstaller —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å
        ls -la dist/
        
        # –ò—â–µ–º –ª—é–±–æ–π .app —Ñ–∞–π–ª (–∏–º—è –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è)
        app_found=$(find dist/ -name "*.app" -type d | head -1)
        if [ -n "$app_found" ]; then
          echo "‚úÖ .app bundle —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!"
          echo "üìÅ –ù–∞–π–¥–µ–Ω: $app_found"
          du -sh "$app_found"
          
          # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
          app_name_with_arch="GoSilk Staff-${{ matrix.arch }}.app"
          mv "$app_found" "dist/$app_name_with_arch"
          echo "üè∑Ô∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤: $app_name_with_arch"
          
          # –î–µ–ª–∞–µ–º Node.js –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ!)
          node_bin_dir="dist/$app_name_with_arch/Contents/Resources/node/bin"
          if [ -d "$node_bin_dir" ]; then
            echo "üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è Node.js runtime..."
            chmod +x "$node_bin_dir"/*
            echo "‚úÖ –ü—Ä–∞–≤–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ Node.js"
            ls -la "$node_bin_dir"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ Node.js
            echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ Node.js:"
            file "$node_bin_dir/node"
          else
            echo "‚ö†Ô∏è Node.js runtime –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ bundle - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π"
          fi
        else
          echo "‚ùå .app bundle –Ω–µ –Ω–∞–π–¥–µ–Ω!"
          exit 1
        fi
        
    - name: üì¶ Create DMG for specific architecture
      run: |
        echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ DMG —Ñ–∞–π–ª–∞ –¥–ª—è ${{ matrix.arch }}..."
        
        # –ù–∞—Ö–æ–¥–∏–º .app —Ñ–∞–π–ª
        app_found=$(find dist/ -name "*${{ matrix.arch }}.app" -type d | head -1)
        if [ -z "$app_found" ]; then
          echo "‚ùå .app —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è DMG"
          exit 1
        fi
        
        app_name=$(basename "$app_found" .app)
        echo "üîß –°–æ–∑–¥–∞–µ–º DMG –¥–ª—è: $app_found"
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º create-dmg –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ DMG
        brew install create-dmg
        
        # –°–æ–∑–¥–∞–µ–º DMG —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        DMG_NAME="GoSilkStaff-${{ matrix.arch }}"
        
        create-dmg \
          --volname "GoSilk Staff (${{ matrix.name }})" \
          --volicon "pyqt_app/resources/icon.icns" \
          --window-pos 200 120 \
          --window-size 600 400 \
          --icon-size 100 \
          --icon "$app_name.app" 175 120 \
          --hide-extension "$app_name.app" \
          --app-drop-link 425 120 \
          "dist/$DMG_NAME.dmg" \
          "$app_found" || echo "‚ö†Ô∏è DMG —Å–æ–∑–¥–∞–Ω —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"
          
        # –ï—Å–ª–∏ create-dmg –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π DMG
        if [ ! -f "dist/$DMG_NAME.dmg" ]; then
          echo "üîß –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π DMG..."
          hdiutil create -volname "GoSilk Staff (${{ matrix.name }})" -srcfolder "$app_found" -ov -format UDZO "dist/$DMG_NAME.dmg"
        fi
        
        if [ -f "dist/$DMG_NAME.dmg" ]; then
          echo "‚úÖ DMG —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!"
          ls -la "dist/$DMG_NAME.dmg"
          du -sh "dist/$DMG_NAME.dmg"
        else
          echo "‚ùå DMG —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω!"
        fi
        
    - name: üìã Build summary for architecture
      run: |
        echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±–æ—Ä–∫–∏ –¥–ª—è ${{ matrix.name }} (${{ matrix.arch }}):"
        echo "================================================================"
        
        # –ù–∞—Ö–æ–¥–∏–º .app —Ñ–∞–π–ª
        app_found=$(find dist/ -name "*${{ matrix.arch }}.app" -type d | head -1)
        if [ -n "$app_found" ]; then
          APP_SIZE=$(du -sh "$app_found" | cut -f1)
          echo "üì± –†–∞–∑–º–µ—Ä .app: $APP_SIZE"
          echo "üìÅ –§–∞–π–ª: $(basename "$app_found")"
          echo "üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ${{ matrix.arch }} (${{ matrix.name }})"
        fi
        
        dmg_file=$(find dist/ -name "*${{ matrix.arch }}.dmg" | head -1)
        if [ -f "$dmg_file" ]; then
          DMG_SIZE=$(du -sh "$dmg_file" | cut -f1)
          echo "üíø –†–∞–∑–º–µ—Ä .dmg: $DMG_SIZE"
        fi
        
    - name: üì¶ Upload build artifacts for architecture
      uses: actions/upload-artifact@v4
      with:
        name: gosilk-staff-macos-${{ matrix.arch }}
        path: dist/
        retention-days: 30

  # 7Ô∏è‚É£ –≠–¢–ê–ü: –°–æ–∑–¥–∞–Ω–∏–µ Universal Binary (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  create-universal:
    name: üåç Create Universal Binary
    runs-on: macos-latest
    needs: build-app
    if: false  # –û—Ç–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    
    steps:
    - name: üì• Download Intel build
      uses: actions/download-artifact@v4
      with:
        name: gosilk-staff-macos-x64
        path: intel-build/
        
    - name: üì• Download ARM build
      uses: actions/download-artifact@v4
      with:
        name: gosilk-staff-macos-arm64
        path: arm-build/
        
    - name: üîó Create Universal Binary
      run: |
        echo "üîó –°–æ–∑–¥–∞–Ω–∏–µ Universal Binary..."
        echo "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: Universal Binary –¥–ª—è Node.js –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω—ã–º"
        echo "üìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–±–æ—Ä–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è Universal Binary
        # –ù–æ –¥–ª—è Node.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —ç—Ç–æ —Å–ª–æ–∂–Ω–æ, –ø–æ—ç—Ç–æ–º—É –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å separate builds

  # 8Ô∏è‚É£ –≠–¢–ê–ü: –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  post-build:
    name: ‚úÖ Post-Build Verification
    runs-on: macos-latest
    needs: build-app
    strategy:
      matrix:
        arch: [x64, arm64]
    
    steps:
    - name: üì• Download artifacts for ${{ matrix.arch }}
      uses: actions/download-artifact@v4
      with:
        name: gosilk-staff-macos-${{ matrix.arch }}
        
    - name: üß™ Verify build for ${{ matrix.arch }}
      run: |
        echo "üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (${{ matrix.arch }})..."
        
        echo "üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞:"
        ls -la
        
        # –ò—â–µ–º .app —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        app_found=$(find . -name "*${{ matrix.arch }}.app" -type d | head -1)
        if [ -n "$app_found" ]; then
          echo "‚úÖ .app bundle –Ω–∞–π–¥–µ–Ω: $app_found"
          echo "üìä –†–∞–∑–º–µ—Ä .app bundle:"
          du -sh "$app_found"
          
          echo "üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ .app bundle:"
          ls -la "$app_found/Contents/" || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É Contents"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ Node.js
          node_bin="$app_found/Contents/Resources/node/bin/node"
          if [ -f "$node_bin" ]; then
            echo "üîç –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ Node.js:"
            file "$node_bin"
            echo "‚úÖ Node.js –≤—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
          else
            echo "‚ö†Ô∏è –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω"
          fi
        else
          echo "‚ùå .app bundle –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${{ matrix.arch }}"
          exit 1
        fi
        
        dmg_found=$(find . -name "*${{ matrix.arch }}.dmg" | head -1)
        if [ -f "$dmg_found" ]; then
          echo "‚úÖ DMG —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: $dmg_found"
          echo "üìä –†–∞–∑–º–µ—Ä DMG —Ñ–∞–π–ª–∞:"
          du -sh "$dmg_found"
        else
          echo "‚ö†Ô∏è DMG —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)"
        fi

  # 9Ô∏è‚É£ –≠–¢–ê–ü: –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  final-summary:
    name: üìã Final Build Summary
    runs-on: macos-latest
    needs: [build-app, post-build]
    if: always()
    
    steps:
    - name: üéâ Complete Success Summary
      run: |
        echo "üéâ PIPELINE –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù! üöÄ"
        echo "================================================================"
        
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        # üéâ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! 
        
        ## ‚úÖ –≠—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:
        1. **üîç Code Quality** - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        2. **üêç Python Tests** - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ + —Ä–µ–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤  
        3. **üü¢ Node.js Tests** - –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π + –∞–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è package.json
        4. **üé® Resources Check** - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∫–æ–Ω–∫–∏, —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python —Å–∫—Ä–∏–ø—Ç–æ–≤
        5. **üîó Integration** - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã + –ø–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        6. **üîß Pre-Build** - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–±–æ—Ä–∫–µ
        7. **üèóÔ∏è Build** - –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–±–µ–∏—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä
        8. **‚úÖ Verification** - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–π —Å–±–æ—Ä–∫–∏
        
        ## üéØ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:
        - **Intel x64** (macos-13) - –¥–ª—è —Å—Ç–∞—Ä—ã—Ö Mac
        - **Apple Silicon ARM64** (macos-14) - –¥–ª—è –Ω–æ–≤—ã—Ö Mac
        
        ## üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
        - ‚úÖ **–î–≤–æ–π–Ω–∞—è —Å–±–æ—Ä–∫–∞** - Intel + Apple Silicon
        - ‚úÖ **Node.js –≤—Å—Ç—Ä–æ–µ–Ω** - –ø–æ–ª–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å
        - ‚úÖ **–°–∏—Å—Ç–µ–º–∞ –ø—É—Ç–µ–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞** (8 Python + 2 TypeScript —Å–∫—Ä–∏–ø—Ç–∞)
        - ‚úÖ **JSON —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö** –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã (paths.json, config.json, templates.json, –∏ –¥—Ä.)
        - ‚úÖ **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è .env –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏** —Å Python –∏ TypeScript —Å–∫—Ä–∏–ø—Ç–∞–º–∏
        - ‚úÖ **TypeScript –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è** –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç
        - ‚úÖ **–†–µ—Å—É—Ä—Å—ã –∏ –∏–∫–æ–Ω–∫–∞** –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã  
        - ‚úÖ **–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π** –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
        - ‚úÖ **DMG –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤—ã** —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è –æ–±–µ–∏—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä
        
        ## üì¶ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã:
        - `GoSilk Staff-x64.app` + `GoSilkStaff-x64.dmg` (Intel)
        - `GoSilk Staff-arm64.app` + `GoSilkStaff-arm64.dmg` (Apple Silicon)
        
        ## üöÄ Deployment:
        - **Intel Mac –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏** - —Å–∫–∞—á–∏–≤–∞—é—Ç x64.dmg
        - **Apple Silicon –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏** - —Å–∫–∞—á–∏–≤–∞—é—Ç arm64.dmg
        - **–ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å** - Node.js –≤—Å—Ç—Ä–æ–µ–Ω, –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        - **–†–∞–∑–º–µ—Ä:** ~150-200MB –∫–∞–∂–¥—ã–π
        
        **–í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏:** ~20-30 –º–∏–Ω—É—Ç (2 –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
        **–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:** macOS 10.14+ (Intel –∏ Apple Silicon)
        **–§–æ—Ä–º–∞—Ç:** .app bundle + .dmg installer
        EOF
        
        echo "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã (–≤–∫–ª—é—á–∞—è —Ä–µ–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤)"
        echo "‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—É—Ç–µ–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞"
        echo "‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Python-Node –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞"
        echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω—ã –¥–ª—è Intel + Apple Silicon"
        echo "‚úÖ Node.js –≤—Å—Ç—Ä–æ–µ–Ω - –ø–æ–ª–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å"
        echo "‚úÖ DMG –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤—ã —Å–æ–∑–¥–∞–Ω—ã"
        echo "‚úÖ –ì–æ—Ç–æ–≤–æ –∫ deployment" 