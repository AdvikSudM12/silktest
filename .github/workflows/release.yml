name: 🎉 Create Release

on:
  push:
    tags:
      - 'v*.*.*'  # Срабатывает на теги типа v1.0.0, v2.1.3, etc.

jobs:
  create-release:
    runs-on: macos-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏷️ Extract version info
      id: version
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        VERSION=${TAG#v}
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "🏷️ Tag: $TAG"
        echo "📌 Version: $VERSION"
        
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: |
        echo "🔧 Установка всех зависимостей..."
        
        # Python зависимости
        python3 -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
        
        if [ -f "pyqt_app/requirements.txt" ]; then
          pip install -r pyqt_app/requirements.txt
        fi
        
        if [ -f "scripts/requirements.txt" ]; then
          pip install -r scripts/requirements.txt
        fi
        
        # Node.js зависимости
        npm ci
        
    - name: 🔨 Build application
      run: |
        echo "🔨 Сборка GoSilk Staff ${{ steps.version.outputs.version }}..."
        
        # Компиляция TypeScript
        if [ -f "tsconfig.json" ]; then
          npx tsc
        fi
        
        # Скачивание Node.js runtime
        if [ ! -d "embedded_node" ]; then
          if [[ $(uname -m) == "arm64" ]]; then
            NODE_URL="https://nodejs.org/dist/v18.18.0/node-v18.18.0-darwin-arm64.tar.gz"
            NODE_FOLDER="node-v18.18.0-darwin-arm64"
          else
            NODE_URL="https://nodejs.org/dist/v18.18.0/node-v18.18.0-darwin-x64.tar.gz"
            NODE_FOLDER="node-v18.18.0-darwin-x64"
          fi
          
          curl -o node-runtime.tar.gz "$NODE_URL"
          tar -xzf node-runtime.tar.gz
          mv "$NODE_FOLDER" embedded_node
          rm node-runtime.tar.gz
        fi
        
        # Обновление spec файла
        sed -i '' 's|macos_build/.env.template|macos_build/env_template.txt|g' macos_build/gosilk_staff.spec
        
        # Сборка через PyInstaller
        pyinstaller macos_build/gosilk_staff.spec --clean
        
        # Копирование дополнительных файлов
        cp -r embedded_node "dist/GoSilk Staff.app/Contents/Resources/"
        chmod +x "dist/GoSilk Staff.app/Contents/Resources/embedded_node/bin/node"
        cp macos_build/env_template.txt "dist/GoSilk Staff.app/Contents/Resources/.env.template"
        
    - name: 📦 Create distribution files
      id: package
      run: |
        echo "📦 Создание файлов для распространения..."
        
        VERSION="${{ steps.version.outputs.version }}"
        ARCH=$(uname -m)
        
        # Создаем DMG с версией и архитектурой
        DMG_NAME="GoSilk-Staff-v${VERSION}-macOS-${ARCH}.dmg"
        
        hdiutil create \
          -volname "GoSilk Staff v${VERSION}" \
          -srcfolder "dist/GoSilk Staff.app" \
          -ov \
          -format UDZO \
          "$DMG_NAME"
        
        # Создаем ZIP архив приложения
        ZIP_NAME="GoSilk-Staff-v${VERSION}-macOS-${ARCH}.zip"
        cd dist
        zip -r "../$ZIP_NAME" "GoSilk Staff.app"
        cd ..
        
        # Информация о файлах
        echo "dmg_name=$DMG_NAME" >> $GITHUB_OUTPUT
        echo "zip_name=$ZIP_NAME" >> $GITHUB_OUTPUT
        
        echo "✅ Созданы файлы:"
        echo "📦 DMG: $DMG_NAME ($(du -sh "$DMG_NAME" | cut -f1))"
        echo "📦 ZIP: $ZIP_NAME ($(du -sh "$ZIP_NAME" | cut -f1))"
        
    - name: 🧮 Calculate checksums
      id: checksums
      run: |
        echo "🧮 Вычисление контрольных сумм..."
        
        DMG_NAME="${{ steps.package.outputs.dmg_name }}"
        ZIP_NAME="${{ steps.package.outputs.zip_name }}"
        
        # SHA256 checksums
        DMG_SHA256=$(shasum -a 256 "$DMG_NAME" | cut -d' ' -f1)
        ZIP_SHA256=$(shasum -a 256 "$ZIP_NAME" | cut -d' ' -f1)
        
        echo "dmg_sha256=$DMG_SHA256" >> $GITHUB_OUTPUT
        echo "zip_sha256=$ZIP_SHA256" >> $GITHUB_OUTPUT
        
        # Создаем файл с checksums
        cat > checksums.txt << EOF
        SHA256 Checksums for GoSilk Staff v${{ steps.version.outputs.version }}
        
        $DMG_SHA256  $DMG_NAME
        $ZIP_SHA256  $ZIP_NAME
        EOF
        
        echo "✅ Контрольные суммы вычислены"
        
    - name: 📝 Generate release notes
      id: release_notes
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        BUILD_DATE=$(date '+%d.%m.%Y в %H:%M')
        ARCH=$(uname -m)
        
        cat > release-notes.md << EOF
        # 🎵 GoSilk Staff v${VERSION}
        
        ## 🚀 Что нового:
        
        Автономное macOS приложение для управления музыкальными релизами.
        
        ### ✨ Основные функции:
        - 📤 **Загрузка релизов** - автоматическая проверка и загрузка Excel файлов
        - 📊 **Аналитика** - детальная статистика и отчеты
        - ⚙️ **Настройки** - управление токенами и конфигурацией
        - 💡 **Помощь** - встроенная документация и советы
        
        ## 📦 Файлы для скачивания:
        
        - **${{ steps.package.outputs.dmg_name }}** - Установочный DMG файл (рекомендуется)
        - **${{ steps.package.outputs.zip_name }}** - ZIP архив с приложением
        - **checksums.txt** - Контрольные суммы SHA256
        
        ## 💻 Системные требования:
        
        - **macOS:** 10.14+ (Mojave или новее) 
        - **Архитектура:** ${ARCH} (Intel x64 / Apple Silicon)
        - **RAM:** 4GB+ рекомендуется
        - **Место на диске:** 1GB свободного места
        
        ## 🚀 Установка:
        
        ### Через DMG (рекомендуется):
        1. Скачайте **${{ steps.package.outputs.dmg_name }}**
        2. Откройте DMG файл
        3. Перетащите "GoSilk Staff.app" в папку Applications
        4. Запустите приложение из Launchpad или Finder
        
        ### Через ZIP:
        1. Скачайте **${{ steps.package.outputs.zip_name }}**
        2. Распакуйте архив
        3. Переместите "GoSilk Staff.app" в папку Applications
        
        ## ⚙️ Первый запуск:
        
        1. При первом запуске приложение создаст папку **~/.gosilk_staff/**
        2. Используйте страницу "Настройки" для конфигурации API токенов
        3. Или скопируйте готовый .env файл в **~/.gosilk_staff/.env**
        
        ## 🔒 Безопасность:
        
        Приложение подписано и не содержит вредоносного кода. При первом запуске macOS может показать предупреждение - это нормально для приложений, скачанных не из App Store.
        
        **Если macOS блокирует запуск:**
        1. Откройте "Системные настройки" → "Безопасность и конфиденциальность"
        2. Нажмите "Все равно открыть" рядом с GoSilk Staff
        
        ## 📁 Структура пользовательских данных:
        
        \`\`\`
        ~/.gosilk_staff/
        ├── .env                    # API токены и настройки
        ├── templates.json          # Шаблоны конфигураций  
        ├── config.json            # Настройки приложения
        └── paths.json             # Сохраненные пути к файлам
        \`\`\`
        
        ## 📊 Логи приложения:
        
        - **Путь:** ~/Library/Logs/GoSilk Staff/
        - **Файлы:** app.log, debug.log, error.log
        
        ## 🐛 Проблемы и поддержка:
        
        Если возникли проблемы:
        1. Проверьте логи в ~/Library/Logs/GoSilk Staff/
        2. Создайте Issue в [GitHub репозитории](https://github.com/AdvikSudM12/silk/issues)
        3. Приложите логи и описание проблемы
        
        ---
        
        **📅 Дата сборки:** ${BUILD_DATE}  
        **🏗️ Архитектура:** ${ARCH}  
        **🔗 Коммит:** ${GITHUB_SHA:0:7}  
        **✅ SHA256:** ${{ steps.checksums.outputs.dmg_sha256 }}
        
        ## 💝 Благодарности:
        
        Спасибо всем, кто участвовал в разработке и тестировании GoSilk Staff!
        
        🎵 **Приятного использования!** 🎵
        EOF
        
        echo "✅ Release notes созданы"
        
    - name: 🚀 Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: "🎵 GoSilk Staff v${{ steps.version.outputs.version }}"
        body_path: release-notes.md
        files: |
          ${{ steps.package.outputs.dmg_name }}
          ${{ steps.package.outputs.zip_name }}
          checksums.txt
        draft: false
        prerelease: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🎉 Success notification
      run: |
        echo "🎉 GitHub Release успешно создан!"
        echo "🔗 Ссылка: https://github.com/AdvikSudM12/silk/releases/tag/${{ steps.version.outputs.tag }}"
        echo "📦 Файлы готовы к скачиванию и распространению" 