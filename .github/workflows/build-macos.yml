name: 🍎 Build macOS App

on:
  push:
    branches: [ main, macos-build-test ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Позволяет запускать вручную

jobs:
  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 🔍 System Info
      run: |
        echo "🖥️ macOS Version: $(sw_vers -productVersion)"
        echo "🏗️ Architecture: $(uname -m)"
        echo "🐍 Python: $(python3 --version)"
        echo "📦 Node.js: $(node --version)"
        echo "📋 NPM: $(npm --version)"
        
    - name: 🐍 Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
        if [ -f "pyqt_app/requirements.txt" ]; then
          pip install -r pyqt_app/requirements.txt
        fi
        if [ -f "scripts/requirements.txt" ]; then
          pip install -r scripts/requirements.txt
        fi
        
    - name: 📦 Install Node.js dependencies
      run: npm ci
      
    - name: 🔨 Compile TypeScript
      run: |
        if [ -f "tsconfig.json" ]; then
          npx tsc
          echo "✅ TypeScript compiled successfully"
        else
          echo "⚠️ No tsconfig.json found, skipping TypeScript compilation"
        fi
        
    - name: ⬇️ Download Node.js runtime
      run: |
        if [ ! -d "embedded_node" ]; then
          echo "📥 Downloading Node.js runtime for macOS..."
          
          # Определяем архитектуру
          if [[ $(uname -m) == "arm64" ]]; then
            NODE_ARCH="arm64"
            NODE_URL="https://nodejs.org/dist/v18.18.0/node-v18.18.0-darwin-arm64.tar.gz"
            NODE_FOLDER="node-v18.18.0-darwin-arm64"
          else
            NODE_ARCH="x64"
            NODE_URL="https://nodejs.org/dist/v18.18.0/node-v18.18.0-darwin-x64.tar.gz"
            NODE_FOLDER="node-v18.18.0-darwin-x64"
          fi
          
          echo "🏗️ Architecture: $NODE_ARCH"
          curl -o node-runtime.tar.gz "$NODE_URL"
          tar -xzf node-runtime.tar.gz
          mv "$NODE_FOLDER" embedded_node
          rm node-runtime.tar.gz
          echo "✅ Node.js runtime downloaded"
        else
          echo "✅ embedded_node already exists"
        fi
        
    - name: 🔧 Update PyInstaller spec
      run: |
        echo "🔧 Updating PyInstaller configuration..."
        sed -i '' 's|macos_build/.env.template|macos_build/env_template.txt|g' macos_build/gosilk_staff.spec
        
    - name: 🔨 Build with PyInstaller
      run: |
        echo "🔨 Building application with PyInstaller..."
        pyinstaller macos_build/gosilk_staff.spec --clean
        
    - name: 📋 Copy Node.js runtime to app bundle
      run: |
        echo "📋 Copying Node.js runtime to app bundle..."
        cp -r embedded_node "dist/GoSilk Staff.app/Contents/Resources/"
        chmod +x "dist/GoSilk Staff.app/Contents/Resources/embedded_node/bin/node"
        
    - name: ⚙️ Copy configuration template
      run: |
        echo "⚙️ Copying configuration template..."
        cp macos_build/env_template.txt "dist/GoSilk Staff.app/Contents/Resources/.env.template"
        
    - name: 🔍 Verify app bundle
      run: |
        echo "🔍 Verifying app bundle..."
        if [ -d "dist/GoSilk Staff.app" ]; then
          APP_SIZE=$(du -sh "dist/GoSilk Staff.app" | cut -f1)
          echo "✅ App bundle created successfully!"
          echo "📦 Size: $APP_SIZE"
          echo "📁 Path: dist/GoSilk Staff.app"
          
          # Проверяем структуру
          echo "📋 App bundle structure:"
          ls -la "dist/GoSilk Staff.app/Contents/"
          ls -la "dist/GoSilk Staff.app/Contents/MacOS/"
          ls -la "dist/GoSilk Staff.app/Contents/Resources/" | head -10
        else
          echo "❌ App bundle not found!"
          exit 1
        fi
        
    - name: 📦 Create DMG
      run: |
        echo "📦 Creating DMG installer..."
        
        # Получаем версию из git тега или используем дату
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="$(date +%Y%m%d)-$(echo ${GITHUB_SHA} | cut -c1-7)"
        fi
        
        DMG_NAME="GoSilk-Staff-${VERSION}-macOS.dmg"
        
        hdiutil create \
          -volname "GoSilk Staff" \
          -srcfolder "dist/GoSilk Staff.app" \
          -ov \
          -format UDZO \
          "$DMG_NAME"
          
        echo "✅ DMG created: $DMG_NAME"
        echo "DMG_NAME=$DMG_NAME" >> $GITHUB_ENV
        
    - name: 📊 App Info
      run: |
        echo "📊 Final build information:"
        echo "🍎 macOS App: dist/GoSilk Staff.app"
        echo "📦 DMG Installer: $DMG_NAME"
        echo "📏 App Size: $(du -sh "dist/GoSilk Staff.app" | cut -f1)"
        echo "📏 DMG Size: $(du -sh "$DMG_NAME" | cut -f1)"
        
        # Создаем релиз ноты
        cat > release-notes.md << EOF
        # 🎵 GoSilk Staff для macOS
        
        ## 📦 Что включено:
        - ✅ Автономное macOS приложение (.app bundle)
        - ✅ Встроенный Python runtime
        - ✅ Встроенный Node.js runtime  
        - ✅ Все зависимости включены
        - ✅ Готов к распространению
        
        ## 💻 Системные требования:
        - macOS 10.14+ (Mojave или новее)
        - Архитектура: $(uname -m)
        - RAM: 4GB+ рекомендуется
        
        ## 🚀 Установка:
        1. Скачайте DMG файл
        2. Откройте DMG 
        3. Перетащите "GoSilk Staff.app" в папку Applications
        4. Запустите приложение
        
        ## ⚙️ Первый запуск:
        1. При первом запуске приложение создаст папку ~/.gosilk_staff/
        2. Скопируйте ваш .env файл в ~/.gosilk_staff/.env
        3. Или используйте страницу "Настройки" для конфигурации токенов
        
        ---
        
        📅 Сборка: $(date)  
        🔗 Коммит: ${GITHUB_SHA}  
        🏗️ Архитектура: $(uname -m)
        EOF
        
    - name: 🔺 Upload App Bundle
      uses: actions/upload-artifact@v4
      with:
        name: GoSilk-Staff-macOS-App
        path: dist/GoSilk Staff.app
        retention-days: 30
        
    - name: 🔺 Upload DMG
      uses: actions/upload-artifact@v4
      with:
        name: GoSilk-Staff-macOS-DMG
        path: ${{ env.DMG_NAME }}
        retention-days: 90
        
    - name: 🔺 Upload Release Notes
      uses: actions/upload-artifact@v4
      with:
        name: Release-Notes
        path: release-notes.md
        retention-days: 30
        
    # Создаем GitHub Release только для тегов
    - name: 🚀 Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ env.DMG_NAME }}
        body_path: release-notes.md
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 