#!/usr/bin/env python
# -*- coding: utf-8 -*-

import json
import os
from datetime import datetime
from typing import Dict, Optional, Any
from pathlib import Path

# DEBUG: –∏–º–ø–æ—Ä—Ç –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç–ª–∞–¥–∫–∏ - –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∂–µ
from .logger_config import get_logger
debug_logger = get_logger("session_data_manager")


class SessionDataManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    
    –•—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –î–∞–Ω–Ω—ã–µ —É–¥–∞–ª—è—é—Ç—Å—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.data_dir = Path(__file__).parent / "data"
        self.session_file = self.data_dir / "session_analytics.json"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        self.data_dir.mkdir(exist_ok=True)
        
        debug_logger.info(f"üöÄ SessionDataManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        debug_logger.debug(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: {self.data_dir}")
        debug_logger.debug(f"üìÑ –§–∞–π–ª —Å–µ—Å—Å–∏–∏: {self.session_file}")
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (—Å–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã)
        self.clear_all_session_data()
    
    def save_comparison_result(self, comparison_result: Dict[str, Any], 
                             excel_file_path: str = "", 
                             directory_path: str = "") -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        Args:
            comparison_result: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            excel_file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É  
            directory_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            debug_logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –∏–∑ paths.json –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
            if not excel_file_path or not directory_path:
                excel_file_path, directory_path = self._get_paths_from_config()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            session_data = {
                "timestamp": datetime.now().isoformat(),
                "excel_file_path": excel_file_path,
                "directory_path": directory_path,
                "comparison_result": comparison_result,
                "analytics_summary": self._create_analytics_summary(comparison_result)
            }
            
            debug_logger.debug(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {list(session_data.keys())}")
            debug_logger.debug(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {comparison_result.get('error_count', 0)}")
            debug_logger.debug(f"üìÑ –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {comparison_result.get('results_file', '–ù–µ—Ç')}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open(self.session_file, "w", encoding="utf-8") as f:
                json.dump(session_data, f, ensure_ascii=False, indent=2)
            
            debug_logger.success("‚úÖ –°–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            return True
            
        except Exception as e:
            debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def get_latest_analytics_data(self) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–∑ —Å–µ—Å—Å–∏–∏
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–ª–∏ None –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
        """
        try:
            if not self.session_file.exists():
                debug_logger.warning("‚ö†Ô∏è –§–∞–π–ª —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
            
            debug_logger.info("üìñ –ß–∏—Ç–∞–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
            
            with open(self.session_file, "r", encoding="utf-8") as f:
                session_data = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
            if not session_data or len(session_data) == 0:
                debug_logger.warning("üì≠ –§–∞–π–ª —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–æ–π")
                return None
            
            debug_logger.success("‚úÖ –°–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            debug_logger.debug(f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {session_data.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            return session_data
            
        except Exception as e:
            debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def clear_session_data(self) -> bool:
        """
        –û—á–∏—â–∞–µ—Ç —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
        
        Returns:
            True –µ—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            empty_session_data = {}
            
            # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
            with open(self.session_file, "w", encoding="utf-8") as f:
                json.dump(empty_session_data, f, ensure_ascii=False, indent=2)
            
            debug_logger.info("üóëÔ∏è –°–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã (—Ñ–∞–π–ª –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω)")
            return True
            
        except Exception as e:
            debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def clear_session_paths(self) -> bool:
        """
        –û—á–∏—â–∞–µ—Ç —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –ø—É—Ç–∏ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
        
        Returns:
            True –µ—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—É—Ç–µ–π
            empty_paths_data = {
                "excel_file_path": "",
                "directory_path": "",
                "last_updated": ""
            }
            
            paths_file = self.data_dir / "paths.json"
            
            # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
            with open(paths_file, "w", encoding="utf-8") as f:
                json.dump(empty_paths_data, f, ensure_ascii=False, indent=2)
            
            debug_logger.info("üìÅ –°–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –ø—É—Ç–∏ –æ—á–∏—â–µ–Ω—ã (—Ñ–∞–π–ª –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω)")
            return True
            
        except Exception as e:
            debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—É—Ç–µ–π: {e}")
            return False
    
    def clear_all_session_data(self) -> bool:
        """
        –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ + –ø—É—Ç–∏)
        
        Returns:
            True –µ—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        analytics_cleared = self.clear_session_data()
        paths_cleared = self.clear_session_paths()
        
        if analytics_cleared and paths_cleared:
            debug_logger.success("‚úÖ –í—Å–µ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã")
            return True
        else:
            debug_logger.warning("‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return False
    
    def has_analytics_data(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ —Å–µ—Å—Å–∏–∏
        
        Returns:
            True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
        """
        try:
            if not self.session_file.exists():
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
            with open(self.session_file, "r", encoding="utf-8") as f:
                session_data = json.load(f)
            
            # –§–∞–π–ª —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—É—Å—Ç—ã–º –µ—Å–ª–∏ —ç—Ç–æ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –∏–ª–∏ None
            return bool(session_data and len(session_data) > 0)
            
        except Exception:
            return False
    
    def _get_paths_from_config(self) -> tuple[str, str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ paths.json
        
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (excel_path, directory_path)
        """
        try:
            paths_file = self.data_dir / "paths.json"
            if paths_file.exists():
                with open(paths_file, "r", encoding="utf-8") as f:
                    paths_data = json.load(f)
                    
                excel_path = paths_data.get("excel_file_path", "")
                directory_path = paths_data.get("directory_path", "")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—É—Ç–∏ –Ω–µ –ø—É—Å—Ç—ã–µ
                if not excel_path or not directory_path:
                    debug_logger.debug("üì≠ –ü—É—Ç–∏ –≤ —Ñ–∞–π–ª–µ –ø—É—Å—Ç—ã–µ")
                    return "", ""
                    
                return excel_path, directory_path
            return "", ""
            
        except Exception as e:
            debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ paths.json: {e}")
            return "", ""
    
    def _create_analytics_summary(self, comparison_result: Dict[str, Any]) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        
        Args:
            comparison_result: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–≤–æ–¥–∫–æ–π
        """
        try:
            error_count = comparison_result.get('error_count', 0)
            results_data = comparison_result.get('results_data', [])
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
            audio_errors = len([r for r in results_data if r.get('–¢–∏–ø —Ñ–∞–π–ª–∞') == '–¢—Ä–µ–∫'])
            cover_errors = len([r for r in results_data if r.get('–¢–∏–ø —Ñ–∞–π–ª–∞') == '–û–±–ª–æ–∂–∫–∞'])
            
            summary = {
                "total_errors": error_count,
                "audio_errors": audio_errors,
                "cover_errors": cover_errors,
                "has_errors": error_count > 0,
                "results_file": comparison_result.get('results_file', ''),
                "success": comparison_result.get('success', False),
                "message": comparison_result.get('message', '')
            }
            
            debug_logger.debug(f"üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–≤–æ–¥–∫–∞: –æ—à–∏–±–æ–∫={error_count}, –∞—É–¥–∏–æ={audio_errors}, –æ–±–ª–æ–∂–∫–∏={cover_errors}")
            
            return summary
            
        except Exception as e:
            debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–≤–æ–¥–∫–∏: {e}")
            return {
                "total_errors": 0,
                "audio_errors": 0, 
                "cover_errors": 0,
                "has_errors": False,
                "results_file": "",
                "success": False,
                "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏"
            }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
session_manager = SessionDataManager() 