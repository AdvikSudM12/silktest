"""
–í–æ—Ä–∫–µ—Ä –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Ä–µ–ª–∏–∑–æ–≤
"""

import os
import re
import subprocess
import shutil
from typing import Dict, Any
from PyQt6.QtCore import QThread, pyqtSignal
from loguru import logger as debug_logger


class UpdateStatusWorker(QThread):
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Ä–µ–ª–∏–∑–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è —Å–≤—è–∑–∏ —Å UI
    progress_updated = pyqtSignal(str)      # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ª–æ–≥–∞
    progress_percent = pyqtSignal(int)      # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ (0-100)
    stage_changed = pyqtSignal(str)         # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ (init, api_check, fetching, updating, etc.)
    finished = pyqtSignal(bool, str)        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ (success, message)
    error_occurred = pyqtSignal(str)        # –û—à–∏–±–∫–∞
    
    def __init__(self, script_manager):
        super().__init__()
        self.script_manager = script_manager
        self.is_cancelled = False
        
    def cancel(self):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        self.is_cancelled = True
        debug_logger.warning("üõë –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤")
        
    def emit_progress(self, message: str, stage: str = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ UI –∏ –∫–æ–Ω—Å–æ–ª—å"""
        # –î—É–±–ª–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
        print(f"[UPDATE_STATUS] {message}")
        debug_logger.info(f"üîÑ {message}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ UI
        self.progress_updated.emit(message)
        
        if stage:
            self.stage_changed.emit(stage)
            
    def parse_progress_line(self, line: str) -> int:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç"""
        try:
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: [‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë] 33% (1/3)
            progress_match = re.search(r'(\d+)%\s*\((\d+)/(\d+)\)', line)
            if progress_match:
                percent = int(progress_match.group(1))
                current = int(progress_match.group(2))
                total = int(progress_match.group(3))
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–¥–∏–∏
                self.emit_progress(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ {current} –∏–∑ {total}", "updating")
                return percent
                
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: [#####=====] 50%
            update_progress_match = re.search(r'\[([#=]+[‚ñë=]*)\]\s*(\d+)%', line)
            if update_progress_match:
                return int(update_progress_match.group(2))
                
        except Exception as e:
            debug_logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            
        return None
        
    def parse_stage_from_line(self, line: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞–¥–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–æ–∫–µ –ª–æ–≥–∞"""
        if "üöÄ –ó–ê–ü–£–°–ö –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–£–°–û–í" in line:
            return "init"
        elif "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API" in line:
            return "api_check"
        elif "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è" in line:
            return "api_test"
        elif "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–∏–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'new'" in line:
            return "fetching"
        elif "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏" in line or "Backup is created" in line:
            return "backup"
        elif "–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤" in line:
            return "updating"
        elif "–û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–û–í –ó–ê–í–ï–†–®–ï–ù–û" in line:
            return "completed"
        elif "–û–¢–ß–ï–¢ –û–ë –û–ë–ù–û–í–õ–ï–ù–ò–ò" in line:
            return "report"
        else:
            return None
            
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            self.emit_progress("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Ä–µ–ª–∏–∑–æ–≤...", "init")
            
            if self.is_cancelled:
                return
                
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É —Å–∫—Ä–∏–ø—Ç–∞
            script_path = os.path.join(
                self.script_manager.root_dir, 
                'src', 'apps', 'update-releases-shipment-statuses'
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
            index_file = os.path.join(script_path, 'index.ts')
            if not os.path.exists(index_file):
                self.error_occurred.emit(f"–°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {index_file}")
                return
                
            self.emit_progress("‚úÖ –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞–π–¥–µ–Ω", "init")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            env = os.environ.copy()
            from ..path_manager import get_env_file_path
            env_file = str(get_env_file_path())
            
            if os.path.exists(env_file):
                self.emit_progress("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...", "init")
                try:
                    with open(env_file, 'r', encoding='utf-8') as f:
                        for line in f:
                            line = line.strip()
                            if line and not line.startswith('#') and '=' in line:
                                key, value = line.split('=', 1)
                                env[key.strip()] = value.strip()
                    self.emit_progress("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã", "init")
                except Exception as e:
                    self.error_occurred.emit(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env: {e}")
                    return
            else:
                self.error_occurred.emit("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            if self.is_cancelled:
                return
                
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            npx_path = shutil.which('npx')
            if npx_path:
                cmd = [npx_path, 'ts-node', 'index.ts']
            else:
                cmd = ['cmd', '/c', 'npx', 'ts-node', 'index.ts']
                
            self.emit_progress(f"üîß –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: {' '.join(cmd)}", "init")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            process = subprocess.Popen(
                cmd,
                cwd=script_path,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,  # –û–±—ä–µ–¥–∏–Ω—è–µ–º stderr —Å stdout
                text=True,
                encoding='utf-8',
                env=env,
                bufsize=1,  # –ü–æ—Å—Ç—Ä–æ—á–Ω–∞—è –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è
                universal_newlines=True
            )
            
            self.emit_progress("‚è≥ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞...", "running")
            
            # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            current_progress = 0
            
            try:
                while True:
                    if self.is_cancelled:
                        process.terminate()
                        self.emit_progress("üõë –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", "cancelled")
                        self.finished.emit(False, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                        return
                        
                    output = process.stdout.readline()
                    
                    if output == '' and process.poll() is not None:
                        break
                        
                    if output:
                        line = output.strip()
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ UI
                        self.emit_progress(line)
                        
                        # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                        progress = self.parse_progress_line(line)
                        if progress is not None and progress != current_progress:
                            current_progress = progress
                            self.progress_percent.emit(progress)
                            
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–¥–∏—é
                        stage = self.parse_stage_from_line(line)
                        if stage:
                            self.stage_changed.emit(stage)
                            
            except Exception as e:
                self.error_occurred.emit(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞: {e}")
                return
                
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            return_code = process.wait()
            
            if return_code == 0:
                self.emit_progress("üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —Ä–µ–ª–∏–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!", "completed")
                self.progress_percent.emit(100)
                self.finished.emit(True, "–°—Ç–∞—Ç—É—Å—ã —Ä–µ–ª–∏–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                error_msg = f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ (–∫–æ–¥: {return_code})"
                self.emit_progress(f"‚ùå {error_msg}", "error")
                self.finished.emit(False, error_msg)
                
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            debug_logger.critical(f"üí• {error_msg}")
            self.emit_progress(f"üí• {error_msg}", "error")
            self.finished.emit(False, error_msg) 