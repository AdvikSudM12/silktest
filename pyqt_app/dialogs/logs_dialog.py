# -*- coding: utf-8 -*-

"""
–î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π loguru –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–µ F12
"""

import os
from datetime import datetime
from pathlib import Path
from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QTextEdit, 
    QPushButton, QLineEdit, QLabel, QCheckBox,
    QFrame, QMessageBox, QFileDialog, QApplication
)
from PyQt6.QtCore import Qt, QTimer, pyqtSignal
from PyQt6.QtGui import QShortcut, QKeySequence, QFont

# –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–≥–µ—Ä –≤ –¥–∏–∞–ª–æ–≥–µ –ª–æ–≥–æ–≤ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–∏!


class LogsDialog(QDialog):
    """–î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –°–∏–≥–Ω–∞–ª –¥–ª—è thread-safe –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤
    new_log_signal = pyqtSignal(str)
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.logs_buffer = []
        self.last_file_size = 0  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–∞
        self.log_file_path = None  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
        
        self.setup_ui()
        self.setup_shortcuts()
        self.setup_connections()
        self.setup_auto_refresh()
        self.load_existing_logs()
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("üîç –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - GoSilk Staff")
        self.setModal(False)  # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.resize(800, 600)
        self.setMinimumSize(400, 300)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(10, 10, 10, 10)
        main_layout.setSpacing(10)
        
        # === –í–ï–†–•–ù–Ø–Ø –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø ===
        self.setup_control_panel(main_layout)
        
        # === –û–°–ù–û–í–ù–ê–Ø –û–ë–õ–ê–°–¢–¨ –õ–û–ì–û–í ===
        self.setup_logs_area(main_layout)
        
        # === –ù–ò–ñ–ù–Ø–Ø –ü–ê–ù–ï–õ–¨ –ö–ù–û–ü–û–ö ===
        self.setup_bottom_panel(main_layout)
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
        self.apply_styles()
        
    def setup_control_panel(self, main_layout):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        control_frame = QFrame()
        control_layout = QHBoxLayout(control_frame)
        control_layout.setContentsMargins(0, 0, 0, 0)
        
        # –§–∏–ª—å—Ç—Ä—ã –ø–æ —É—Ä–æ–≤–Ω—è–º –ª–æ–≥–æ–≤
        self.filter_debug = QCheckBox("DEBUG")
        self.filter_info = QCheckBox("INFO")
        self.filter_warning = QCheckBox("WARNING")  
        self.filter_error = QCheckBox("ERROR")
        self.filter_all = QCheckBox("ALL")
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
        self.filter_all.setChecked(True)
        
        # –ü–æ–∏—Å–∫
        search_label = QLabel("üîç")
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("–ü–æ–∏—Å–∫ –ø–æ –ª–æ–≥–∞–º...")
        self.search_input.setMaximumWidth(200)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        self.clear_button = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã
        control_layout.addWidget(QLabel("–§–∏–ª—å—Ç—Ä—ã:"))
        control_layout.addWidget(self.filter_debug)
        control_layout.addWidget(self.filter_info)
        control_layout.addWidget(self.filter_warning)
        control_layout.addWidget(self.filter_error)
        control_layout.addWidget(self.filter_all)
        control_layout.addStretch()
        control_layout.addWidget(search_label)
        control_layout.addWidget(self.search_input)
        control_layout.addWidget(self.clear_button)
        
        main_layout.addWidget(control_frame)
        
    def setup_logs_area(self, main_layout):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤"""
        self.logs_text = QTextEdit()
        self.logs_text.setReadOnly(True)
        self.logs_text.setFont(QFont("Consolas", 9))  # –ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.logs_text.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        self.logs_text.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        
        main_layout.addWidget(self.logs_text)
        
    def setup_bottom_panel(self, main_layout):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏ –∫–Ω–æ–ø–æ–∫"""
        bottom_frame = QFrame()
        bottom_layout = QHBoxLayout(bottom_frame)
        bottom_layout.setContentsMargins(0, 0, 0, 0)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ª–æ–≥–æ–≤
        self.logs_count_label = QLabel("–õ–æ–≥–æ–≤: 0")
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        self.export_button = QPushButton("üíæ –≠–∫—Å–ø–æ—Ä—Ç")
        self.copy_button = QPushButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å")
        self.refresh_button = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        self.close_button = QPushButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã
        bottom_layout.addWidget(self.logs_count_label)
        bottom_layout.addStretch()
        bottom_layout.addWidget(self.export_button)
        bottom_layout.addWidget(self.copy_button)
        bottom_layout.addWidget(self.refresh_button)
        bottom_layout.addWidget(self.close_button)
        
        main_layout.addWidget(bottom_frame)
        
    def setup_shortcuts(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        # Escape - –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ
        self.close_shortcut = QShortcut(QKeySequence("Escape"), self)
        self.close_shortcut.activated.connect(self.close)
        
        # Ctrl+F - —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–∏—Å–∫
        self.search_shortcut = QShortcut(QKeySequence("Ctrl+F"), self)
        self.search_shortcut.activated.connect(self.focus_search)
        
        # Ctrl+C - –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ
        self.copy_shortcut = QShortcut(QKeySequence("Ctrl+C"), self)
        self.copy_shortcut.activated.connect(self.copy_selected)
        
        # F5 - –æ–±–Ω–æ–≤–∏—Ç—å
        self.refresh_shortcut = QShortcut(QKeySequence("F5"), self)
        self.refresh_shortcut.activated.connect(self.refresh_logs)
        
    def setup_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # –ö–Ω–æ–ø–∫–∏
        self.clear_button.clicked.connect(self.clear_logs)
        self.export_button.clicked.connect(self.export_logs)
        self.copy_button.clicked.connect(self.copy_all_logs)
        self.refresh_button.clicked.connect(self.refresh_logs)
        self.close_button.clicked.connect(self.close)
        
        # –§–∏–ª—å—Ç—Ä—ã
        self.filter_debug.toggled.connect(self.apply_filters)
        self.filter_info.toggled.connect(self.apply_filters)
        self.filter_warning.toggled.connect(self.apply_filters)
        self.filter_error.toggled.connect(self.apply_filters)
        self.filter_all.toggled.connect(self.on_filter_all_changed)
        
        # –ü–æ–∏—Å–∫ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        self.search_timer = QTimer()
        self.search_timer.timeout.connect(self.perform_search)
        self.search_timer.setSingleShot(True)
        self.search_input.textChanged.connect(self.on_search_changed)
        
        # –°–∏–≥–Ω–∞–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤
        self.new_log_signal.connect(self.append_log_message)
        
    def setup_auto_refresh(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É"""
        self.auto_refresh_timer = QTimer()
        self.auto_refresh_timer.timeout.connect(self.check_for_new_logs)
        self.auto_refresh_timer.start(1000)  # –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        
    def apply_styles(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        self.setStyleSheet("""
            QDialog {
                background-color: #f5f5f5;
            }
            
            QTextEdit {
                background-color: #1e1e1e;
                color: #ffffff;
                border: 1px solid #555555;
                border-radius: 5px;
                padding: 5px;
                font-family: 'Consolas', 'Monaco', monospace;
            }
            
            QLineEdit {
                border: 1px solid #cccccc;
                border-radius: 3px;
                padding: 3px 5px;
                background-color: white;
            }
            
            QPushButton {
                background-color: #6352EC;
                color: white;
                border: none;
                border-radius: 5px;
                padding: 5px 15px;
                font-weight: bold;
            }
            
            QPushButton:hover {
                background-color: #5041d4;
            }
            
            QPushButton:pressed {
                background-color: #3f32b8;
            }
            
            QCheckBox {
                spacing: 5px;
                font-weight: bold;
            }
            
            QLabel {
                color: #333333;
                font-weight: bold;
            }
        """)
        
    def load_existing_logs(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–æ–≥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ loguru"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ path_manager
            from ..path_manager import get_log_file_path
            self.log_file_path = get_log_file_path()
            
            if not self.log_file_path.exists():
                return
                
            # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ (—á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å—Ä–∞–∑—É 999 —Å—Ç—Ä–æ–∫)
            with open(self.log_file_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫
            recent_lines = lines[-100:] if len(lines) > 100 else lines
            
            for line in recent_lines:
                line = line.strip()
                if line:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    self.append_log_message(line)
                    
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            self.last_file_size = self.log_file_path.stat().st_size
            self.update_logs_count()
            
        except Exception as e:
            # Fallback –∫ —Ç–µ—Å—Ç–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            self.load_fallback_logs()
            
    def load_fallback_logs(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ–≥–æ–≤ –∫–∞–∫ fallback"""
        test_logs = [
            "2025-01-17 15:30:01 | INFO     | main_window | ‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ",
            "2025-01-17 15:30:02 | DEBUG    | logger_config | üìÇ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è", 
            "2025-01-17 15:30:03 | INFO     | env_manager | üîß –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ .env",
            "2025-01-17 15:30:04 | WARNING  | session_manager | ‚ö†Ô∏è –§–∞–π–ª paths.json –Ω–µ –Ω–∞–π–¥–µ–Ω",
            "2025-01-17 15:30:05 | ERROR    | script_manager | ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Node.js —Å–∫—Ä–∏–ø—Ç–∞",
            "2025-01-17 15:30:06 | INFO     | logs_dialog | üöÄ –û–∫–Ω–æ –ª–æ–≥–æ–≤ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ (fallback)"
        ]
        
        for log in test_logs:
            self.append_log_message(log)
            
        self.update_logs_count()
        
    def check_for_new_logs(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª–µ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)"""
        try:
            if not self.log_file_path or not self.log_file_path.exists():
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            current_size = self.log_file_path.stat().st_size
            if current_size <= self.last_file_size:
                return  # –ù–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
                
            # –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
            with open(self.log_file_path, 'r', encoding='utf-8') as f:
                f.seek(self.last_file_size)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–µ—Å—Ç—É –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å
                new_lines = f.readlines()
                
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
            for line in new_lines:
                line = line.strip()
                if line:
                    self.append_log_message(line)
                    
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            self.last_file_size = current_size
            
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
            pass
        
    # ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ==================
    
    def on_filter_all_changed(self, checked):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ '–í—Å–µ'"""
        if checked:
            # –û—Ç–∫–ª—é—á–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            self.filter_debug.setChecked(False)
            self.filter_info.setChecked(False)
            self.filter_warning.setChecked(False)
            self.filter_error.setChecked(False)
        self.apply_filters()
        
    def apply_filters(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é –ª–æ–≥–æ–≤"""
        # –õ–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —ç—Ç–∞–ø–µ 3
        pass
        
    def on_search_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ–∏—Å–∫–∞"""
        self.search_timer.start(300)  # Debounce 300ms
        
    def perform_search(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ –ª–æ–≥–∞–º"""
        search_text = self.search_input.text().strip()
        # –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —ç—Ç–∞–ø–µ 3
        
    def focus_search(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞"""
        self.search_input.setFocus()
        self.search_input.selectAll()
        
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ª–æ–≥–æ–≤"""
        reply = QMessageBox.question(
            self, "–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            self.logs_text.clear()
            self.logs_buffer.clear()
            self.update_logs_count()
            
    def refresh_logs(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–æ–≥–∏
        self.logs_text.clear()
        self.logs_buffer.clear()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
        self.load_existing_logs()
        
    def copy_selected(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        if self.logs_text.textCursor().hasSelection():
            self.logs_text.copy()
            
    def copy_all_logs(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ª–æ–≥–æ–≤ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        clipboard = QApplication.clipboard()
        clipboard.setText(self.logs_text.toPlainText())
        
    def export_logs(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        default_filename = f"gosilk_logs_{timestamp}.txt"
        
        filename, _ = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏", default_filename,
            "Text files (*.txt);;All files (*.*)"
        )
        
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(f"# –õ–æ–≥–∏ GoSilk Staff\n")
                    f.write(f"# –≠–∫—Å–ø–æ—Ä—Ç: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                    f.write(f"# –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(self.logs_buffer)}\n\n")
                    f.write(self.logs_text.toPlainText())
                    
                QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç", f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:\n{filename}")
                
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:\n{e}")
                
    def append_log_message(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤"""
        # –¶–≤–µ—Ç–æ–≤–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
        colored_message = self.colorize_log_message(message)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤—É—é –æ–±–ª–∞—Å—Ç—å
        self.logs_text.append(colored_message)
        
        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        scrollbar = self.logs_text.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
        self.logs_buffer.append(message)
        self.update_logs_count()
        
    def colorize_log_message(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –ª–æ–≥–∞"""
        if "ERROR" in message:
            return f'<span style="color: #ff4444;">{message}</span>'
        elif "WARNING" in message:
            return f'<span style="color: #ffaa00;">{message}</span>'
        elif "INFO" in message:
            return f'<span style="color: #44aaff;">{message}</span>'
        elif "DEBUG" in message:
            return f'<span style="color: #888888;">{message}</span>'
        elif "SUCCESS" in message:
            return f'<span style="color: #44ff44;">{message}</span>'
        else:
            return f'<span style="color: #ffffff;">{message}</span>'
            
    def update_logs_count(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ª–æ–≥–æ–≤"""
        count = len(self.logs_buffer)
        self.logs_count_label.setText(f"–õ–æ–≥–æ–≤: {count}")
        
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if hasattr(self, 'auto_refresh_timer'):
            self.auto_refresh_timer.stop()
        event.accept() 