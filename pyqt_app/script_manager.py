#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import importlib.util
import json
from typing import Dict, Any, Callable, List, Optional
from pathlib import Path

# DEBUG: –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ ScriptManager
from pyqt_app.logger_config import get_logger
debug_logger = get_logger("script_manager")

class ScriptManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    """
    def __init__(self, scripts_dir: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
        
        Args:
            scripts_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ —Å–∫—Ä–∏–ø—Ç–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–∞–ø–∫–∞ scripts –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞)
        """
        debug_logger.info("üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ScriptManager")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞)
        self.root_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
        debug_logger.debug(f"üìÅ –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.root_dir}")
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ —Å–∫—Ä–∏–ø—Ç–∞–º–∏
        self.scripts_dir = scripts_dir or os.path.join(self.root_dir, 'scripts')
        debug_logger.debug(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤: {self.scripts_dir}")
        
        # –°–ª–æ–≤–∞—Ä—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        self.loaded_modules: Dict[str, Any] = {}
        
        # –°–ª–æ–≤–∞—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Å–∫—Ä–∏–ø—Ç–æ–≤
        self.available_functions: Dict[str, Callable] = {}
          
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        if self.root_dir not in sys.path:
            sys.path.append(self.root_dir)
            debug_logger.debug(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤ sys.path: {self.root_dir}")
        
        debug_logger.success("‚úÖ ScriptManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def load_paths_from_json(self) -> Dict[str, str]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—É—Ç–∏ –∏–∑ paths.json
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø—É—Ç—è–º–∏ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        paths_file = os.path.join(self.root_dir, 'pyqt_app', 'data', 'paths.json')
        if os.path.exists(paths_file):
            try:
                with open(paths_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ paths.json: {str(e)}")
        return {}
    
    def run_file_comparison(self) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        """
        debug_logger.info("üìã –ù–∞—á–∏–Ω–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å compare_files
        debug_logger.debug("üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å compare_files.py")
        module = self.load_script('compare_files.py')
        if not module:
            debug_logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å compare_files.py")
            return {
                'success': False,
                'message': "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å compare_files.py"
            }
        
        debug_logger.success("‚úÖ –ú–æ–¥—É–ª—å compare_files.py –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        debug_logger.debug("üîç –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é compare_files_with_excel")
        if not hasattr(module, 'compare_files_with_excel'):
            debug_logger.error("‚ùå –§—É–Ω–∫—Ü–∏—è compare_files_with_excel –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return {
                'success': False,
                'message': "–§—É–Ω–∫—Ü–∏—è compare_files_with_excel –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–æ–¥—É–ª–µ"
            }
        
        debug_logger.success("‚úÖ –§—É–Ω–∫—Ü–∏—è compare_files_with_excel –Ω–∞–π–¥–µ–Ω–∞")
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        try:
            debug_logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
            compare_function = getattr(module, 'compare_files_with_excel')
            result = compare_function()
            debug_logger.success(f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {result.get('success', False)}")
            return result
        except Exception as e:
            debug_logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏: {str(e)}")
            import traceback
            debug_logger.error(f"üîç Traceback: {traceback.format_exc()}")
            return {
                'success': False,
                'message': f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {str(e)}"
            }
    
    def run_excel_processing(self, error_file_path: str = None) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É Excel —Ñ–∞–π–ª–∞ —Å –æ—à–∏–±–∫–∞–º–∏
        
        Args:
            error_file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel —Ñ–∞–π–ª–∞
        """
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å excel_operations
        module = self.load_script('excel_operations.py')
        if not module:
            return {
                'success': False,
                'message': "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å excel_operations.py"
            }
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if not hasattr(module, 'process_excel_errors'):
            return {
                'success': False,
                'message': "–§—É–Ω–∫—Ü–∏—è process_excel_errors –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–æ–¥—É–ª–µ"
            }
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
        try:
            process_function = getattr(module, 'process_excel_errors')
            return process_function(error_file_path=error_file_path)
        except Exception as e:
            return {
                'success': False,
                'message': f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel —Ñ–∞–π–ª–∞: {str(e)}"
            }
    
    def run_complete_workflow(self) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π workflow: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ ‚Üí –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ workflow
        """
        debug_logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ workflow")
        
        # –≠—Ç–∞–ø 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        debug_logger.info("üìã –≠—Ç–∞–ø 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤")
        comparison_result = self.run_file_comparison()
        debug_logger.debug(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {comparison_result.get('success', False)}")
        
        if not comparison_result['success']:
            debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {comparison_result['message']}")
            return {
                'success': False,
                'message': f"–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {comparison_result['message']}",
                'stage': 'comparison'
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        error_count = comparison_result.get('error_count', 0)
        debug_logger.info(f"üìà –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {error_count}")
        
        if error_count == 0:
            debug_logger.success("üéâ –ù–µ—Ç –æ—à–∏–±–æ–∫ - workflow –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return {
                'success': True,
                'message': "–í—Å–µ —Ñ–∞–π–ª—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∑–∞–ø–∏—Å—è–º –≤ Excel. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.",
                'stage': 'completed',
                'comparison_result': comparison_result
            }
        
        # –≠—Ç–∞–ø 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ Excel
        debug_logger.info("üìù –≠—Ç–∞–ø 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ Excel")
        results_file = comparison_result.get('results_file')
        debug_logger.debug(f"üìÑ –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {results_file}")
        
        excel_result = self.run_excel_processing(results_file)
        debug_logger.debug(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel: {excel_result.get('success', False)}")
        
        if not excel_result['success']:
            debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel: {excel_result['message']}")
            return {
                'success': False,
                'message': f"–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel: {excel_result['message']}",
                'stage': 'excel_processing',
                'comparison_result': comparison_result
            }
        
        debug_logger.success("üéä –ü–æ–ª–Ω—ã–π workflow –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return {
            'success': True,
            'message': f"Workflow –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! {comparison_result['message']} {excel_result['message']}",
            'stage': 'completed',
            'comparison_result': comparison_result,
            'excel_result': excel_result
        }
    
    def load_script(self, script_name: str) -> Optional[Any]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        
        Args:
            script_name: –ò–º—è —Ñ–∞–π–ª–∞ —Å–∫—Ä–∏–ø—Ç–∞ (—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .py)
            
        Returns:
            –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if script_name in self.loaded_modules:
            return self.loaded_modules[script_name]
        
        script_path = os.path.join(self.scripts_dir, script_name)
        
        if not os.path.exists(script_path):
            debug_logger.error(f"‚ùå –°–∫—Ä–∏–ø—Ç {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {self.scripts_dir}")
            return None
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å
            spec = importlib.util.spec_from_file_location(script_name.replace('.py', ''), script_path)
            if spec and spec.loader:
                module = importlib.util.module_from_spec(spec)
                spec.loader.exec_module(module)
                self.loaded_modules[script_name] = module
                return module
        except Exception as e:
            debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫—Ä–∏–ø—Ç–∞ {script_name}: {str(e)}")
            return None
    
    def get_available_scripts(self) -> List[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ scripts
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ —Å–∫—Ä–∏–ø—Ç–æ–≤
        """
        if not os.path.exists(self.scripts_dir):
            return []
        
        return [f for f in os.listdir(self.scripts_dir) if f.endswith('.py')]
    
    def register_function(self, script_name: str, function_name: str) -> bool:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        
        Args:
            script_name: –ò–º—è —Ñ–∞–π–ª–∞ —Å–∫—Ä–∏–ø—Ç–∞
            function_name: –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–∫—Ä–∏–ø—Ç–µ
            
        Returns:
            True –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞, –∏–Ω–∞—á–µ False
        """
        module = self.load_script(script_name)
        if not module:
            return False
        
        if not hasattr(module, function_name):
            debug_logger.error(f"‚ùå –§—É–Ω–∫—Ü–∏—è {function_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ {script_name}")
            return False
        
        function = getattr(module, function_name)
        if not callable(function):
            debug_logger.error(f"‚ùå {function_name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π –≤ —Å–∫—Ä–∏–ø—Ç–µ {script_name}")
            return False
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
        key = f"{script_name.replace('.py', '')}.{function_name}"
        self.available_functions[key] = function
        return True
    
    def call_function(self, function_key: str, *args, **kwargs) -> Any:
        """
        –í—ã–∑—ã–≤–∞–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        
        Args:
            function_key: –ö–ª—é—á —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "script_name.function_name"
            *args, **kwargs: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        """
        if function_key not in self.available_functions:
            debug_logger.error(f"‚ùå –§—É–Ω–∫—Ü–∏—è {function_key} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            return None
        
        try:
            return self.available_functions[function_key](*args, **kwargs)
        except Exception as e:
            debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ {function_key}: {str(e)}")
            return None
    
    def check_nodejs_dependencies(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ Node.js –∏ ts-node –¥–ª—è –∑–∞–ø—É—Å–∫–∞ TypeScript —Å–∫—Ä–∏–ø—Ç–æ–≤
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        """
        debug_logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Node.js")
        
        try:
            import subprocess
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js
            try:
                result = subprocess.run(['node', '--version'], 
                                      capture_output=True, text=True, timeout=10)
                if result.returncode == 0:
                    node_version = result.stdout.strip()
                    debug_logger.success(f"‚úÖ Node.js –Ω–∞–π–¥–µ–Ω: {node_version}")
                else:
                    debug_logger.error("‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return {
                        'success': False,
                        'message': "Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–ª–∏–∑–æ–≤.",
                        'missing': ['nodejs']
                    }
            except (subprocess.TimeoutExpired, FileNotFoundError):
                debug_logger.error("‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return {
                    'success': False,
                    'message': "Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–ª–∏–∑–æ–≤.",
                    'missing': ['nodejs']
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º ts-node —á–µ—Ä–µ–∑ npx (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏)
            try:
                result = subprocess.run(['npx', 'ts-node', '--version'], 
                                      capture_output=True, text=True, timeout=10)
                if result.returncode == 0:
                    ts_node_version = result.stdout.strip()
                    debug_logger.success(f"‚úÖ ts-node –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ npx: {ts_node_version}")
                else:
                    debug_logger.warning("‚ö†Ô∏è ts-node –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ npx")
                    return {
                        'success': False,
                        'message': "ts-node –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É Node.js –∏ npm.",
                        'missing': ['ts-node']
                    }
            except (subprocess.TimeoutExpired, FileNotFoundError):
                debug_logger.warning("‚ö†Ô∏è npx –∏–ª–∏ ts-node –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return {
                    'success': False,
                    'message': "npx –∏–ª–∏ ts-node –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É Node.js.",
                    'missing': ['ts-node']
                }
            
            debug_logger.success("üéâ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Node.js –Ω–∞–π–¥–µ–Ω—ã")
            return {
                'success': True,
                'message': "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Node.js –¥–æ—Å—Ç—É–ø–Ω—ã",
                'node_version': node_version,
                'ts_node_version': ts_node_version
            }
            
        except Exception as e:
            debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {str(e)}")
            return {
                'success': False,
                'message': f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {str(e)}",
                'error': str(e)
            }

    def run_release_upload(self) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ–ª–∏–∑–æ–≤ —á–µ—Ä–µ–∑ TypeScript —Å–∫—Ä–∏–ø—Ç release-parser-5
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–ª–∏–∑–æ–≤
        """
        debug_logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–ª–∏–∑–æ–≤")
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - —Å–∫—Ä–∏–ø—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ npx
        debug_logger.info("üîß –ó–∞–ø—É—Å–∫ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º npx)")
        
        try:
            # –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É –∑–∞–≥—Ä—É–∑–∫–∏
            script_path = os.path.join(self.root_dir, 'src', 'apps', 'test', 'release-parser-5')
            debug_logger.debug(f"üìÇ –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É: {script_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
            index_file = os.path.join(script_path, 'index.ts')
            if not os.path.exists(index_file):
                debug_logger.error(f"‚ùå –§–∞–π–ª —Å–∫—Ä–∏–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {index_file}")
                return {
                    'success': False,
                    'message': f"–°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {index_file}"
                }
            
            debug_logger.success("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–π–¥–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞ —Å —Ç–æ–∫–µ–Ω–∞–º–∏
            env_file = os.path.join(self.root_dir, '.env')
            if not os.path.exists(env_file):
                debug_logger.error("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {
                    'success': False,
                    'message': "–§–∞–π–ª .env —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –ù–ê–°–¢–†–û–ô–ö–ò."
                }
            
            debug_logger.success("‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—É—Ç–∏ –∏–∑ paths.json
            paths = self.load_paths_from_json()
            if not paths:
                debug_logger.error("‚ùå –ü—É—Ç–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                return {
                    'success': False,
                    'message': "–ü—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—É—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ UPLOAD."
                }
            
            debug_logger.success(f"‚úÖ –ü—É—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {list(paths.keys())}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º TypeScript —Å–∫—Ä–∏–ø—Ç —á–µ—Ä–µ–∑ Node.js
            import subprocess
            
            debug_logger.info("üîß –ó–∞–ø—É—Å–∫ TypeScript —Å–∫—Ä–∏–ø—Ç–∞ —á–µ—Ä–µ–∑ Node.js")
            
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ —Å –ø–æ–ª–Ω—ã–º –ø—É—Ç–µ–º –¥–ª—è Windows
            import shutil
            npx_path = shutil.which('npx')
            if npx_path:
                cmd = [npx_path, 'ts-node', 'index.ts']
                debug_logger.debug(f"üîç –ù–∞–π–¥–µ–Ω npx: {npx_path}")
            else:
                # Fallback: –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ cmd
                cmd = ['cmd', '/c', 'npx', 'ts-node', 'index.ts']
                debug_logger.warning("‚ö†Ô∏è npx –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º cmd /c")
            
            debug_logger.debug(f"üíª –ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
            debug_logger.debug(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {script_path}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            env = os.environ.copy()  # –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
            env_file = os.path.join(self.root_dir, '.env')
            if os.path.exists(env_file):
                debug_logger.info("üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞")
                try:
                    with open(env_file, 'r', encoding='utf-8') as f:
                        for line in f:
                            line = line.strip()
                            if line and not line.startswith('#') and '=' in line:
                                key, value = line.split('=', 1)
                                env[key.strip()] = value.strip()
                                debug_logger.debug(f"üîß –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {key.strip()}={'***' if 'TOKEN' in key else value.strip()}")
                    debug_logger.success("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                    key_vars = ['EMD_API', 'EMD_SPACE', 'EMD_TOKEN', 'EMD_USER_ID']
                    debug_logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:")
                    for var in key_vars:
                        if var in env:
                            display_value = '***—Å–∫—Ä—ã—Ç–æ***' if 'TOKEN' in var else env[var]
                            debug_logger.success(f"‚úÖ {var}: {display_value}")
                        else:
                            debug_logger.error(f"‚ùå {var}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                            
                except Exception as e:
                    debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env: {e}")
            else:
                debug_logger.warning("‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            process = subprocess.Popen(
                cmd,
                cwd=script_path,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                encoding='utf-8',
                env=env  # –ü–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            )
            
            debug_logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏...")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            stdout, stderr = process.communicate()
            
            debug_logger.debug(f"üì§ STDOUT: {stdout}")
            if stderr:
                debug_logger.warning(f"‚ö†Ô∏è STDERR: {stderr}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞
            if process.returncode == 0:
                debug_logger.success("üéâ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–ª–∏–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                return {
                    'success': True,
                    'message': "–†–µ–ª–∏–∑—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É",
                    'output': stdout,
                    'stage': 'upload_completed'
                }
            else:
                debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏, –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {process.returncode}")
                return {
                    'success': False,
                    'message': f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–ª–∏–∑–æ–≤: {stderr or stdout}",
                    'error_code': process.returncode,
                    'stage': 'upload_failed'
                }
                
        except Exception as e:
            debug_logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {str(e)}")
            import traceback
            debug_logger.error(f"üîç Traceback: {traceback.format_exc()}")
            return {
                'success': False,
                'message': f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–ª–∏–∑–æ–≤: {str(e)}",
                'stage': 'critical_error'
            }

    def run_update_releases_statuses(self) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —Ä–µ–ª–∏–∑–æ–≤ —á–µ—Ä–µ–∑ TypeScript —Å–∫—Ä–∏–ø—Ç update-releases-shipment-statuses
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Ä–µ–ª–∏–∑–æ–≤
        """
        debug_logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Ä–µ–ª–∏–∑–æ–≤")
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - —Å–∫—Ä–∏–ø—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ npx
        debug_logger.info("üîß –ó–∞–ø—É—Å–∫ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º npx)")
        
        try:
            # –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
            script_path = os.path.join(self.root_dir, 'src', 'apps', 'update-releases-shipment-statuses')
            debug_logger.debug(f"üìÇ –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É: {script_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
            index_file = os.path.join(script_path, 'index.ts')
            if not os.path.exists(index_file):
                debug_logger.error(f"‚ùå –§–∞–π–ª —Å–∫—Ä–∏–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {index_file}")
                return {
                    'success': False,
                    'message': f"–°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {index_file}"
                }
            
            debug_logger.success("‚úÖ –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞–π–¥–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞ —Å —Ç–æ–∫–µ–Ω–∞–º–∏
            env_file = os.path.join(self.root_dir, '.env')
            if not os.path.exists(env_file):
                debug_logger.error("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {
                    'success': False,
                    'message': "–§–∞–π–ª .env —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –ù–ê–°–¢–†–û–ô–ö–ò."
                }
            
            debug_logger.success("‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º TypeScript —Å–∫—Ä–∏–ø—Ç —á–µ—Ä–µ–∑ Node.js
            import subprocess
            
            debug_logger.info("üîß –ó–∞–ø—É—Å–∫ TypeScript —Å–∫—Ä–∏–ø—Ç–∞ —á–µ—Ä–µ–∑ Node.js")
            
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ —Å –ø–æ–ª–Ω—ã–º –ø—É—Ç–µ–º –¥–ª—è Windows
            import shutil
            npx_path = shutil.which('npx')
            if npx_path:
                cmd = [npx_path, 'ts-node', 'index.ts']
                debug_logger.debug(f"üîç –ù–∞–π–¥–µ–Ω npx: {npx_path}")
            else:
                # Fallback: –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ cmd
                cmd = ['cmd', '/c', 'npx', 'ts-node', 'index.ts']
                debug_logger.warning("‚ö†Ô∏è npx –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º cmd /c")
            
            debug_logger.debug(f"üíª –ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
            debug_logger.debug(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {script_path}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            env = os.environ.copy()  # –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
            env_file = os.path.join(self.root_dir, '.env')
            if os.path.exists(env_file):
                debug_logger.info("üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞")
                try:
                    with open(env_file, 'r', encoding='utf-8') as f:
                        for line in f:
                            line = line.strip()
                            if line and not line.startswith('#') and '=' in line:
                                key, value = line.split('=', 1)
                                env[key.strip()] = value.strip()
                                debug_logger.debug(f"üîß –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {key.strip()}={'***' if 'TOKEN' in key else value.strip()}")
                    debug_logger.success("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                    key_vars = ['EMD_API', 'EMD_SPACE', 'EMD_TOKEN', 'EMD_USER_ID']
                    debug_logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:")
                    for var in key_vars:
                        if var in env:
                            display_value = '***—Å–∫—Ä—ã—Ç–æ***' if 'TOKEN' in var else env[var]
                            debug_logger.success(f"‚úÖ {var}: {display_value}")
                        else:
                            debug_logger.error(f"‚ùå {var}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                            
                except Exception as e:
                    debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env: {e}")
            else:
                debug_logger.warning("‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            process = subprocess.Popen(
                cmd,
                cwd=script_path,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                encoding='utf-8',
                env=env  # –ü–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            )
            
            debug_logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤...")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            stdout, stderr = process.communicate()
            
            debug_logger.debug(f"üì§ STDOUT: {stdout}")
            if stderr:
                debug_logger.warning(f"‚ö†Ô∏è STDERR: {stderr}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞
            if process.returncode == 0:
                debug_logger.success("üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —Ä–µ–ª–∏–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                return {
                    'success': True,
                    'message': "–°—Ç–∞—Ç—É—Å—ã —Ä–µ–ª–∏–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                    'output': stdout,
                    'stage': 'update_completed'
                }
            else:
                debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤, –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {process.returncode}")
                return {
                    'success': False,
                    'message': f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ —Ä–µ–ª–∏–∑–æ–≤: {stderr or stdout}",
                    'error_code': process.returncode,
                    'stage': 'update_failed'
                }
                
        except Exception as e:
            debug_logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤: {str(e)}")
            import traceback
            debug_logger.error(f"üîç Traceback: {traceback.format_exc()}")
            return {
                'success': False,
                'message': f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ —Ä–µ–ª–∏–∑–æ–≤: {str(e)}",
                'stage': 'critical_error'
            }


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    manager = ScriptManager()
    debug_logger.info(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã: {manager.get_available_scripts()}")
    
    # –ü—Ä–∏–º–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞
    # manager.register_function("compare_files.py", "compare_two_files")
    # result = manager.call_function("compare_files.compare_two_files", "file1.txt", "file2.txt")
