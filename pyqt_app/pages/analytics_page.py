#!/usr/bin/env python
# -*- coding: utf-8 -*-

from PyQt6.QtWidgets import (
    QLabel, QVBoxLayout, QHBoxLayout, QWidget, QFrame, 
    QPushButton, QScrollArea, QGridLayout, QSizePolicy
)
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QFont, QPainter, QPen, QColor
from datetime import datetime
import json
import os
import pandas as pd

# DEBUG: –∏–º–ø–æ—Ä—Ç –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç–ª–∞–¥–∫–∏ - –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∂–µ
from ..logger_config import get_logger
debug_logger = get_logger("analytics_page")

# –ò–º–ø–æ—Ä—Ç —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
from ..session_data_manager import session_manager

from .base_page import BasePage

class AnalyticsCard(QFrame):
    """–ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    def __init__(self, title: str, value: str, color: str = "#6352EC", parent=None):
        super().__init__(parent)
        self.setObjectName("analyticsCard")
        self.setup_ui(title, value, color)
        
    def setup_ui(self, title: str, value: str, color: str):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –∫–∞—Ä—Ç–æ—á–∫–∏"""
        self.setStyleSheet(f"""
            #analyticsCard {{
                background-color: white;
                border-radius: 15px;
                border: 1px solid #e0e0e0;
                border-right: 3px solid {color};
                border-bottom: 3px solid {color};
                padding: 15px;
            }}
        """)
        
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 15, 20, 15)
        layout.setSpacing(8)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel(title)
        title_label.setStyleSheet(f"""
            color: {color};
            font-size: 14px;
            font-weight: bold;
        """)
        layout.addWidget(title_label)
        
        # –ó–Ω–∞—á–µ–Ω–∏–µ
        value_label = QLabel(value)
        value_label.setStyleSheet("""
            color: #333333;
            font-size: 24px;
            font-weight: bold;
        """)
        layout.addWidget(value_label)

class AnalyticsPage(BasePage):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–∫—Ä–∏–ø—Ç–æ–≤
    """
    
    # –°–∏–≥–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    update_analytics = pyqtSignal()
    
    def __init__(self, parent=None):
        super().__init__("", parent)  # –ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, –¥–æ–±–∞–≤–∏–º —Å–≤–æ–π
        self.analytics_data = None
        self.setup_ui()
        self.load_analytics_data()
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–ª–æ–≥–æ —Ñ–æ–Ω–∞
        self.setStyleSheet("background-color: white;")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π scrollable –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_scroll_area = QScrollArea()
        main_scroll_area.setWidgetResizable(True)
        main_scroll_area.setStyleSheet("""
            QScrollArea {
                border: none;
                background-color: white;
            }
            QScrollBar:vertical {
                background: #f0f0f0;
                width: 10px;
                margin: 0px;
            }
            QScrollBar::handle:vertical {
                background: #d0d0d0;
                min-height: 20px;
                border-radius: 5px;
            }
            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
                height: 0px;
            }
            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {
                background: transparent;
            }
        """)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤—Å–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        scroll_content = QWidget()
        scroll_content_layout = QVBoxLayout(scroll_content)
        scroll_content_layout.setContentsMargins(40, 30, 40, 30)
        scroll_content_layout.setSpacing(30)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º
        title_label = QLabel("–ê–ù–ê–õ–ò–¢–ò–ö–ê")
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title_label.setStyleSheet("""
            font-size: 48px;
            font-weight: bold;
            color: #6352EC;
            margin: 20px 0;
        """)
        scroll_content_layout.addWidget(title_label)
        
        # –†–∞–∑–¥–µ–ª "–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ"
        self.setup_report_section(scroll_content_layout)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç –≤ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—É—é –æ–±–ª–∞—Å—Ç—å
        main_scroll_area.setWidget(scroll_content)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—É—é –æ–±–ª–∞—Å—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        self.layout.addWidget(main_scroll_area)
        
    def setup_report_section(self, parent_layout):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ —Å –∏–∫–æ–Ω–∫–æ–π
        section_header = QWidget()
        section_layout = QHBoxLayout(section_header)
        section_layout.setContentsMargins(0, 0, 0, 10)
        section_layout.setSpacing(10)
        
        # –ò–∫–æ–Ω–∫–∞ –æ—Ç—á–µ—Ç–∞
        report_icon = QLabel("üìä")
        report_icon.setStyleSheet("font-size: 24px;")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        section_title = QLabel("–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ")
        section_title.setStyleSheet("""
            color: #6352EC;
            font-size: 20px;
            font-weight: bold;
        """)
        
        section_layout.addWidget(report_icon)
        section_layout.addWidget(section_title)
        section_layout.addStretch()
        
        parent_layout.addWidget(section_header)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Ç—á–µ—Ç–∞
        self.report_container = QFrame()
        self.report_container.setObjectName("reportContainer")
        self.report_container.setStyleSheet("""
            #reportContainer {
                background-color: #f8f7ff;
                border-radius: 20px;
                border: 1px solid #e6e0ff;
                border-right: 4px solid #d7cdff;
                border-bottom: 4px solid #d7cdff;
            }
        """)
        
        self.report_layout = QVBoxLayout(self.report_container)
        self.report_layout.setContentsMargins(30, 25, 30, 25)
        self.report_layout.setSpacing(20)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç—á–µ—Ç–µ
        self.setup_report_info()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–µ–∫
        self.setup_statistics_cards()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.setup_result_section()
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞
        self.setup_save_button()
        
        parent_layout.addWidget(self.report_container)
        
    def setup_report_info(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç—á–µ—Ç–µ"""
        info_widget = QWidget()
        info_layout = QVBoxLayout(info_widget)
        info_layout.setContentsMargins(0, 0, 0, 0)
        info_layout.setSpacing(8)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
        report_title = QLabel("–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
        report_title.setStyleSheet("""
            font-size: 18px;
            font-weight: bold;
            color: #333333;
        """)
        info_layout.addWidget(report_title)
        
        # –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞
        self.date_label = QLabel(f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}")
        self.date_label.setStyleSheet("""
            font-size: 14px;
            color: #666666;
        """)
        info_layout.addWidget(self.date_label)
        
        self.report_layout.addWidget(info_widget)
        
    def setup_statistics_cards(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
        cards_container = QWidget()
        cards_layout = QGridLayout(cards_container)
        cards_layout.setContentsMargins(0, 10, 0, 10)
        cards_layout.setSpacing(15)
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
        self.releases_card = AnalyticsCard("–í—Å–µ–≥–æ —Ä–µ–ª–∏–∑–æ–≤ –∏–∑ Excel:", "0", "#6352EC")
        self.tracks_card = AnalyticsCard("–í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤ –≤ Excel:", "0", "#19c790")
        self.covers_card = AnalyticsCard("–í—Å–µ–≥–æ –æ–±–ª–æ–∂–µ–∫ –≤ Excel:", "0", "#f7a440")
        
        self.found_audio_card = AnalyticsCard("–ù–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤:", "0 –∏–∑ 0", "#8B7FFF")
        self.found_covers_card = AnalyticsCard("–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –æ–±–ª–æ–∂–µ–∫:", "0 –∏–∑ 0", "#17b683")
        
        # –†–∞–∑–º–µ—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Å–µ—Ç–∫–µ
        cards_layout.addWidget(self.releases_card, 0, 0)
        cards_layout.addWidget(self.tracks_card, 0, 1)
        cards_layout.addWidget(self.covers_card, 0, 2)
        
        cards_layout.addWidget(self.found_audio_card, 1, 0)
        cards_layout.addWidget(self.found_covers_card, 1, 1)
        
        # –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞ –¥–ª—è —Å–∏–º–º–µ—Ç—Ä–∏–∏
        empty_widget = QWidget()
        cards_layout.addWidget(empty_widget, 1, 2)
        
        self.report_layout.addWidget(cards_container)
        
    def setup_result_section(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–∫—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.result_container = QFrame()
        self.result_container.setStyleSheet("""
            QFrame {
                background-color: #e6ffe6;
                border: 1px solid #ccffcc;
                border-radius: 15px;
                border-right: 3px solid #b3ffb3;
                border-bottom: 3px solid #b3ffb3;
                padding: 15px;
            }
        """)
        
        result_layout = QHBoxLayout(self.result_container)
        result_layout.setContentsMargins(20, 15, 20, 15)
        result_layout.setSpacing(15)
        
        # –ò–∫–æ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.result_icon = QLabel("‚úÖ")
        self.result_icon.setStyleSheet("font-size: 24px;")
        
        # –¢–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.result_text = QLabel("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–∞–π–ª–æ–≤.")
        self.result_text.setStyleSheet("""
            font-size: 16px;
            font-weight: bold;
            color: #333333;
        """)
        
        result_layout.addWidget(self.result_icon)
        result_layout.addWidget(self.result_text, 1)
        
        self.report_layout.addWidget(self.result_container)
        
    def setup_save_button(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
        button_container = QWidget()
        button_layout = QHBoxLayout(button_container)
        button_layout.setContentsMargins(0, 10, 0, 0)
        
        self.save_button = QPushButton("–°–û–•–†–ê–ù–ò–¢–¨ –û–¢–ß–ï–¢")
        self.save_button.setStyleSheet("""
            QPushButton {
                background-color: #6352EC;
                color: white;
                border-radius: 15px;
                padding: 12px 30px;
                font-weight: bold;
                font-size: 14px;
                border: 1px solid #5143c9;
                border-right: 3px solid #473aad;
                border-bottom: 3px solid #473aad;
                max-width: 200px;
            }
            QPushButton:hover {
                background-color: #5143c9;
            }
            QPushButton:pressed {
                background-color: #473aad;
            }
            QPushButton:disabled {                background-color: #cccccc;
                color: #888888;
                border: 1px solid #bbbbbb;
                border-right: 3px solid #aaaaaa;
                border-bottom: 3px solid #aaaaaa;
            }
        """)
        self.save_button.setCursor(Qt.CursorShape.PointingHandCursor)
        self.save_button.clicked.connect(self.save_report)
        self.save_button.setEnabled(False)  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞
        
        button_layout.addWidget(self.save_button)
        button_layout.addStretch()
        
        self.report_layout.addWidget(button_container)
        
    def load_analytics_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–∑ —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            debug_logger.info("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
            
            # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if session_manager.has_analytics_data():
                debug_logger.info("‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
                session_data = session_manager.get_latest_analytics_data()
                if session_data:
                    self.load_from_session_data(session_data)
                    return
            
            debug_logger.info("‚ö†Ô∏è –°–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—â–µ–º —Ñ–∞–π–ª—ã results")
            
            # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ò—â–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ results (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)
            results_dir = os.path.join(os.path.dirname(__file__), "..", "..", "results")
            
            if os.path.exists(results_dir):
                # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                result_files = [f for f in os.listdir(results_dir) 
                              if f.startswith('file_comparison_results_') and f.endswith('.xlsx')]
                
                if result_files:
                    result_files.sort(reverse=True)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –ø–µ—Ä–≤—ã–π)
                    latest_file = result_files[0]
                    
                    debug_logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {latest_file}")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    date_part = latest_file.replace('file_comparison_results_', '').replace('.xlsx', '')
                    formatted_date = date_part.replace('_', ' ').replace('-', '.')
                    self.date_label.setText(f"–î–∞—Ç–∞: {formatted_date}")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞
                    self.load_excel_data(os.path.join(results_dir, latest_file))
                    return
            
            debug_logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
            # –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.show_empty_state()
                    
        except Exception as e:
            debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            self.show_empty_state()
    
    def load_from_session_data(self, session_data: dict):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–∑ —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        try:
            debug_logger.info("üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
            
            comparison_result = session_data.get('comparison_result', {})
            analytics_summary = session_data.get('analytics_summary', {})
            timestamp = session_data.get('timestamp', '')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É
            if timestamp:
                from datetime import datetime
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00') if timestamp.endswith('Z') else timestamp)
                formatted_date = dt.strftime('%d.%m.%Y %H:%M')
                self.date_label.setText(f"–î–∞—Ç–∞: {formatted_date}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
            self.update_from_comparison_result(comparison_result)
            
            debug_logger.success("‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
        except Exception as e:
            debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ —Å–µ—Å—Å–∏–∏: {e}")
            # Fallback –∫ –ø—É—Å—Ç–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
            self.show_empty_state()
    
    def show_empty_state(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–≥–¥–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        self.update_analytics_display({
            'total_releases': 0,
            'total_tracks': 0,
            'total_covers': 0,
            'found_audio': "‚Äî –∏–∑ ‚Äî",
            'found_covers': "‚Äî –∏–∑ ‚Äî", 
            'all_found': False
        })
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.result_container.setStyleSheet("""
            QFrame {
                background-color: #f5f5f5;
                border: 1px solid #e0e0e0;
                border-radius: 15px;
                border-right: 3px solid #cccccc;
                border-bottom: 3px solid #cccccc;
                padding: 15px;
            }
        """)
        self.result_icon.setText("üìä")
        self.result_text.setText("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É '–ó–∞–≥—Ä—É–∑–∫–∞' –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–∞–π–ª–æ–≤.")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É
        self.date_label.setText("–î–∞—Ç–∞: ‚Äî")
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
        self.save_button.setEnabled(False)
            
    def load_excel_data(self, file_path: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞"""
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            df = pd.read_excel(file_path, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã')
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_errors = len(df)
            audio_errors = len(df[df['–¢–∏–ø —Ñ–∞–π–ª–∞'] == '–¢—Ä–µ–∫'])
            cover_errors = len(df[df['–¢–∏–ø —Ñ–∞–π–ª–∞'] == '–û–±–ª–æ–∂–∫–∞'])
              # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏–∑ Excel
            excel_stats = self.get_excel_statistics()
            self.update_analytics_display({
                'total_releases': excel_stats['total_releases'],
                'total_tracks': excel_stats['total_tracks'],   
                'total_covers': excel_stats['total_covers'],
                'found_audio': f"{excel_stats['total_tracks'] - audio_errors} –∏–∑ {excel_stats['total_tracks']}",
                'found_covers': f"{excel_stats['total_covers'] - cover_errors} –∏–∑ {excel_stats['total_covers']}",
                'all_found': total_errors == 0
            })
            
            self.analytics_data = {
                'file_path': file_path,
                'total_errors': total_errors,
                'audio_errors': audio_errors,
                'cover_errors': cover_errors
            }
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            self.save_button.setEnabled(True)
            
        except Exception as e:
            debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {e}")
            
    def update_analytics_display(self, data: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
        self.releases_card.findChild(QLabel).setText("–í—Å–µ–≥–æ —Ä–µ–ª–∏–∑–æ–≤ –∏–∑ Excel:")
        self.releases_card.findChildren(QLabel)[1].setText(str(data['total_releases']))
        
        self.tracks_card.findChildren(QLabel)[1].setText(str(data['total_tracks']))
        self.covers_card.findChildren(QLabel)[1].setText(str(data['total_covers']))
        
        self.found_audio_card.findChildren(QLabel)[1].setText(data['found_audio'])
        self.found_covers_card.findChildren(QLabel)[1].setText(data['found_covers'])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if data['all_found']:
            self.result_container.setStyleSheet("""
                QFrame {
                    background-color: #e6ffe6;
                    border: 1px solid #ccffcc;
                    border-radius: 15px;
                    border-right: 3px solid #b3ffb3;
                    border-bottom: 3px solid #b3ffb3;
                    padding: 15px;
                }
            """)
            self.result_icon.setText("‚úÖ")
            self.result_text.setText("–í—Å–µ —Ñ–∞–π–ª—ã –∏–∑ Excel –Ω–∞–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        else:
            self.result_container.setStyleSheet("""
                QFrame {
                    background-color: #fff9e6;
                    border: 1px solid #ffefcc;
                    border-radius: 15px;
                    border-right: 3px solid #ffe6b3;
                    border-bottom: 3px solid #ffe6b3;
                    padding: 15px;
                }
            """)
            self.result_icon.setText("‚ö†Ô∏è")
            self.result_text.setText("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∞–π–ª–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á–µ—Ç.")
            
    def update_from_comparison_result(self, comparison_result: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
        if not comparison_result:
            return
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        error_count = comparison_result.get('error_count', 0)
        results_data = comparison_result.get('results_data', [])
          # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        audio_errors = len([r for r in results_data if r.get('–¢–∏–ø —Ñ–∞–π–ª–∞') == '–¢—Ä–µ–∫'])
        cover_errors = len([r for r in results_data if r.get('–¢–∏–ø —Ñ–∞–π–ª–∞') == '–û–±–ª–æ–∂–∫–∞'])
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Excel —Ñ–∞–π–ª–∞
        excel_stats = self.get_excel_statistics()
        total_tracks = excel_stats['total_tracks']
        total_covers = excel_stats['total_covers']
        total_releases = excel_stats['total_releases']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.update_analytics_display({
            'total_releases': total_releases,
            'total_tracks': total_tracks,
            'total_covers': total_covers,
            'found_audio': f"{total_tracks - audio_errors} –∏–∑ {total_tracks}",
            'found_covers': f"{total_covers - cover_errors} –∏–∑ {total_covers}",
            'all_found': error_count == 0
        })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.analytics_data = {
            'total_errors': error_count,
            'audio_errors': audio_errors,
            'cover_errors': cover_errors,
            'results_file': comparison_result.get('results_file', '')
        }
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.save_button.setEnabled(True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É
        self.date_label.setText(f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}")
        
    def save_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        from PyQt6.QtWidgets import QMessageBox, QFileDialog
        import shutil
        
        if not self.analytics_data:
            QMessageBox.warning(self, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞.")
            return
            
        # –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        suggested_filename = f"–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π_–æ—Ç—á–µ—Ç_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.xlsx"
        
        save_path, _ = QFileDialog.getSaveFileName(
            self,
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç",
            suggested_filename,
            "Excel Files (*.xlsx);;All Files (*)"
        )
        
        if save_path:
            try:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∫–æ–ø–∏—Ä—É–µ–º –µ–≥–æ
                results_file = self.analytics_data.get('results_file')
                if results_file and os.path.exists(results_file):
                    shutil.copy2(results_file, save_path)
                    
                    QMessageBox.information(
                        self,
                        "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
                        f"–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n{save_path}"
                    )
                else:
                    QMessageBox.warning(
                        self,
                        "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                        "–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω."
                    )
                    
            except Exception as e:
                QMessageBox.critical(
                    self,
                    "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç:\n{str(e)}"
                )
                
    def get_excel_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ Excel —Ñ–∞–π–ª–∞"""
        try:
            # –ß–∏—Ç–∞–µ–º paths.json –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ Excel —Ñ–∞–π–ª—É
            from ..path_manager import get_config_file_path
            paths_file = str(get_config_file_path('paths.json'))
            if os.path.exists(paths_file):
                with open(paths_file, 'r', encoding='utf-8') as f:
                    paths_data = json.load(f)
                    excel_path = paths_data.get('excel_file_path', '')
                    
                if excel_path and os.path.exists(excel_path):
                    # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
                    df = pd.read_excel(excel_path)
                    
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    total_releases = len(df) if not df.empty else 0
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–∫–∏ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∫–∞–∂–¥—ã–π —Ä–µ–ª–∏–∑ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–∫–æ–≤)
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç—Ä–µ–∫–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë, –∏–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ–º –ø–æ 1 —Ç—Ä–µ–∫—É –Ω–∞ —Ä–µ–ª–∏–∑
                    if '–¢—Ä–µ–∫–∏' in df.columns:
                        total_tracks = df['–¢—Ä–µ–∫–∏'].sum()
                    elif '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤' in df.columns:
                        total_tracks = df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤'].sum()
                    else:
                        # –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ = 1 —Ç—Ä–µ–∫ (–∫–æ–ª–æ–Ω–∫–∞ 'track (titel)')
                        total_tracks = total_releases  # 1 —Ç—Ä–µ–∫ –Ω–∞ —Ä–µ–ª–∏–∑
                    
                    # –û–±–ª–æ–∂–∫–∏ –æ–±—ã—á–Ω–æ = –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ–ª–∏–∑–æ–≤
                    total_covers = total_releases
                    
                    return {
                        'total_releases': total_releases,
                        'total_tracks': total_tracks,
                        'total_covers': total_covers
                    }
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–∏ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å Excel
            return {
                'total_releases': 0,
                'total_tracks': 0,
                'total_covers': 0
            }
            
        except Exception as e:
            debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return {
                'total_releases': 0,
                'total_tracks': 0,
                'total_covers': 0
            }