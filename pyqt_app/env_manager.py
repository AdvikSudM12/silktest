#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è .env —Ñ–∞–π–ª–∞
–Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ templates.json
"""

import os
import json
from pathlib import Path
from typing import Dict, Optional
from datetime import datetime

# DEBUG: –∏–º–ø–æ—Ä—Ç –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç–ª–∞–¥–∫–∏
from .logger_config import get_logger
debug_logger = get_logger("env_manager")

class EnvManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è .env —Ñ–∞–π–ª–æ–º —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –∏–∑ templates.json"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        self.root_dir = Path(__file__).parent.parent  # –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
        self.data_dir = Path(__file__).parent / "data"
        self.templates_file = self.data_dir / "templates.json"
        self.config_file = self.data_dir / "config.json"
        self.env_file = self.root_dir / ".env"
        
        debug_logger.info("üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EnvManager")
        debug_logger.debug(f"üìÅ –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.root_dir}")
        debug_logger.debug(f"üìÑ –§–∞–π–ª .env: {self.env_file}")
        debug_logger.debug(f"üìä –§–∞–π–ª templates.json: {self.templates_file}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        self.data_dir.mkdir(exist_ok=True)
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ .env —Ñ–∞–π–ª–∞ (—Å—Ç–∞—Ç–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
        self.base_env_structure = {
            "EMD_API": "https://api.emd.cloud",
            "EMD_SPACE": "silk",
            "EMD_HEADER_TOKEN": "Authorization",
            "EMD_TOKEN": "",  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –∏–∑ templates
            "EMD_USER_ID": "",  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –∏–∑ templates
            "DAYS_GONE_FOR_START_SITES": "14"
        }
    
    def load_templates(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã –∏–∑ templates.json"""
        try:
            if self.templates_file.exists():
                with open(self.templates_file, 'r', encoding='utf-8') as f:
                    templates = json.load(f)
                debug_logger.debug(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}")
                return templates
            else:
                debug_logger.warning("‚ö†Ô∏è –§–∞–π–ª templates.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {}
        except Exception as e:
            debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ templates.json: {e}")
            return {}
    
    def load_current_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ config.json"""
        try:
            if self.config_file.exists():
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                debug_logger.debug(f"üîß –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
                return config
            else:
                debug_logger.warning("‚ö†Ô∏è –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {}
        except Exception as e:
            debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config.json: {e}")
            return {}
    
    def create_env_file(self, user_id: str = "", jwt_token: str = "") -> bool:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç .env —Ñ–∞–π–ª —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            jwt_token: JWT —Ç–æ–∫–µ–Ω
            
        Returns:
            True –µ—Å–ª–∏ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω
        """
        try:
            debug_logger.info("üìù –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª")
            debug_logger.debug(f"üë§ User ID: {user_id}")
            debug_logger.debug(f"üîë JWT Token: {'***' if jwt_token else '–ø—É—Å—Ç–æ–π'}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .env —Ñ–∞–π–ª–∞
            env_content = f"""# API Configuration - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∏–∑ PyQt
# –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

EMD_API={self.base_env_structure['EMD_API']}
EMD_SPACE={self.base_env_structure['EMD_SPACE']}
EMD_HEADER_TOKEN={self.base_env_structure['EMD_HEADER_TOKEN']}
EMD_TOKEN={jwt_token}
EMD_USER_ID={user_id}

# Other settings
DAYS_GONE_FOR_START_SITES={self.base_env_structure['DAYS_GONE_FOR_START_SITES']}
"""
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
            with open(self.env_file, 'w', encoding='utf-8') as f:
                f.write(env_content)
            
            debug_logger.success("‚úÖ –§–∞–π–ª .env —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .env —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def update_env_from_template(self, template_name: str) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç .env —Ñ–∞–π–ª —Ç–æ–∫–µ–Ω–∞–º–∏ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        
        Args:
            template_name: –ò–º—è —à–∞–±–ª–æ–Ω–∞ –∏–∑ templates.json
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω
        """
        debug_logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º .env –∏–∑ —à–∞–±–ª–æ–Ω–∞: {template_name}")
        
        templates = self.load_templates()
        
        if template_name not in templates:
            debug_logger.error(f"‚ùå –®–∞–±–ª–æ–Ω '{template_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        template_data = templates[template_name]
        user_id = template_data.get('user_id', '')
        jwt_token = template_data.get('jwt', '')
        
        debug_logger.info(f"üìä –î–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞: user_id={user_id}")
        
        return self.create_env_file(user_id, jwt_token)
    
    def update_env_from_current_config(self) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç .env —Ñ–∞–π–ª –∏–∑ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (config.json)
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω
        """
        debug_logger.info("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º .env –∏–∑ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        config = self.load_current_config()
        
        if not config:
            debug_logger.warning("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Å—Ç–∞, —Å–æ–∑–¥–∞–µ–º .env —Å –ø—É—Å—Ç—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏")
            return self.create_env_file()
        
        user_id = config.get('user_id', '')
        jwt_token = config.get('jwt', '')
        
        debug_logger.info(f"üìä –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: user_id={user_id}")
        
        return self.create_env_file(user_id, jwt_token)
    
    def save_last_selected_template(self, template_name: str) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –≤ config.json
        –ö–û–ü–ò–†–£–ï–¢ user_id –∏ jwt –∏–∑ templates.json –≤ config.json
        
        Args:
            template_name: –ò–º—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        """
        try:
            debug_logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞ '{template_name}' –≤ config.json")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞ –∏–∑ templates.json
            templates = self.load_templates()
            if template_name not in templates:
                debug_logger.error(f"‚ùå –®–∞–±–ª–æ–Ω '{template_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            template_data = templates[template_name]
            user_id = template_data.get('user_id', '')
            jwt_token = template_data.get('jwt', '')
            
            debug_logger.info(f"üìä –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ: user_id={user_id}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = self.load_current_config()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –í–°–ï –ø–æ–ª—è –≤ config.json
            config['user_id'] = user_id                    # –ù–û–í–û–ï: –∫–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            config['jwt'] = jwt_token                      # –ù–û–í–û–ï: –∫–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ  
            config['last_selected_template'] = template_name
            config['last_updated'] = datetime.now().isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, ensure_ascii=False, indent=4)
            
            debug_logger.success("‚úÖ –î–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ config.json")
            return True
            
        except Exception as e:
            debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞: {e}")
            return False
    
    def get_last_selected_template(self) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        
        Returns:
            –ò–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ None
        """
        config = self.load_current_config()
        last_template = config.get('last_selected_template')
        
        debug_logger.debug(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω: {last_template}")
        return last_template
    
    def initialize_env_with_last_template(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç .env —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ config.json
        –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ config.json (–Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞)
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        """
        debug_logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è .env —Ñ–∞–π–ª–∞ –∏–∑ config.json")
        
        config = self.load_current_config()
        
        if not config:
            debug_logger.warning("‚ö†Ô∏è config.json –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π .env")
            return self.create_env_file()
        
        user_id = config.get('user_id', '')
        jwt_token = config.get('jwt', '')
        last_template = config.get('last_selected_template', '')
        
        debug_logger.info(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ config.json: user_id={user_id}, —à–∞–±–ª–æ–Ω={last_template}")
        
        return self.create_env_file(user_id, jwt_token)
    
    def initialize_env_on_startup(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç .env —Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ config.json
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        """
        debug_logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è .env —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
        
        config = self.load_current_config()
        
        if not config:
            debug_logger.warning("‚ö†Ô∏è config.json –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π .env")
            return self.create_env_file()
        
        user_id = config.get('user_id', '')
        jwt_token = config.get('jwt', '')
        
        debug_logger.info(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ config.json: user_id={user_id}")
        
        return self.create_env_file(user_id, jwt_token)
    
    def get_available_templates(self) -> list:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
        
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —à–∞–±–ª–æ–Ω–æ–≤
        """
        templates = self.load_templates()
        template_names = list(templates.keys())
        debug_logger.debug(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã: {template_names}")
        return template_names
    
    def get_env_status(self) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å .env —Ñ–∞–π–ª–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ .env —Ñ–∞–π–ª–∞
        """
        status = {
            "exists": self.env_file.exists(),
            "path": str(self.env_file),
            "templates_count": len(self.load_templates()),
            "has_config": self.config_file.exists()
        }
        
        debug_logger.debug(f"üìä –°—Ç–∞—Ç—É—Å .env: {status}")
        return status

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
env_manager = EnvManager() 