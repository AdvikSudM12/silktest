// ** Modules Imports
require('dotenv').config()
import fs from 'fs'
import path from 'path'

// ** Source code Imports
import { getTableRows, upsertTableRow } from 'src/tools/table'
import { tableFlowIterations  } from 'src/tools/flow'
import apiConfig from 'src/configs/api'
import countryCodes from 'src/configs/countries-codes'
import releaseConfig from 'src/configs/release'
import { getReleasesDataJson } from 'src/apps/release-parser-5/utils/releases-data'
import { uploadingFile, testFilePath } from 'src/apps/release-parser-5/utils/uploading'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface UploadStats {
  totalReleases: number
  successfulUploads: number
  failedUploads: number
  totalTracks: number
  successfulTracks: number
  failedTracks: number
  startTime: Date
  endTime?: Date
}

interface PathsConfig {
  excelPath: string
  filesDirectory: string
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
const log = (message: string, type: 'info' | 'success' | 'error' | 'warning' = 'info') => {
  const timestamp = new Date().toLocaleTimeString('ru-RU')
  const icons = {
    info: 'üîç',
    success: '‚úÖ',
    error: '‚ùå',
    warning: '‚ö†Ô∏è'
  }
  console.log(`[${timestamp}] ${icons[type]} ${message}`)
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
const saveUploadState = (lastProcessedIndex: number, totalReleases: number, excelPath: string, filesDirectory: string): void => {
  try {
    const projectRoot = findProjectRoot()
    const uploadStateFile = path.join(projectRoot, 'pyqt_app', 'data', 'upload_state.json')
    
    const uploadState = {
      timestamp: new Date().toISOString(),
      last_processed_index: lastProcessedIndex,
      total_releases: totalReleases,
      excel_path: excelPath,
      directory_path: filesDirectory,
      is_interrupted: true
    }
    
    fs.writeFileSync(uploadStateFile, JSON.stringify(uploadState, null, 2), 'utf-8')
    // lastProcessedIndex - —ç—Ç–æ –∏–Ω–¥–µ–∫—Å (0-based), –ø–æ—ç—Ç–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö = lastProcessedIndex + 1
    const processedCount = lastProcessedIndex + 1
    log(`üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${processedCount}/${totalReleases}`, 'info')
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏: ${error}`, 'error')
  }
}

const clearUploadState = (): void => {
  try {
    const projectRoot = findProjectRoot()
    const uploadStateFile = path.join(projectRoot, 'pyqt_app', 'data', 'upload_state.json')
    
    const emptyState = {
      is_interrupted: false
    }
    
    fs.writeFileSync(uploadStateFile, JSON.stringify(emptyState, null, 2), 'utf-8')
    log('üóëÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—á–∏—â–µ–Ω–æ', 'info')
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏: ${error}`, 'error')
  }
}

const getInitialIteration = (): number => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ --initial-iteration
    const args = process.argv
    const initialIterationIndex = args.findIndex(arg => arg === '--initial-iteration')
    
    if (initialIterationIndex !== -1 && initialIterationIndex + 1 < args.length) {
      const initialIteration = parseInt(args[initialIterationIndex + 1], 10)
      if (!isNaN(initialIteration) && initialIteration >= 0) {
        log(`üîÑ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∏—Ç–µ—Ä–∞—Ü–∏–∏: ${initialIteration}`, 'info')
        return initialIteration
      }
    }
    
    log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å –Ω–∞—á–∞–ª–∞', 'info')
    return 0
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏: ${error}`, 'error')
    return 0
  }
}

const getUploadStateFromFile = (): any => {
  try {
    const projectRoot = findProjectRoot()
    const uploadStateFile = path.join(projectRoot, 'pyqt_app', 'data', 'upload_state.json')
    
    if (!fs.existsSync(uploadStateFile)) {
      return null
    }
    
    const uploadState = JSON.parse(fs.readFileSync(uploadStateFile, 'utf-8'))
    return uploadState
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏: ${error}`, 'error')
    return null
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –Ω–∞–ª–∏—á–∏—é package.json
const findProjectRoot = (): string => {
  let currentDir = __dirname
  
  // –ò—â–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –Ω–∞–ª–∏—á–∏—é package.json
  while (currentDir !== path.dirname(currentDir)) {
    if (fs.existsSync(path.join(currentDir, 'package.json'))) {
      log(`üéØ –ù–∞–π–¥–µ–Ω –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: ${currentDir}`, 'success')
      return currentDir
    }
    currentDir = path.dirname(currentDir)
  }
  
  log('‚ö†Ô∏è –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º __dirname', 'warning')
  return __dirname // fallback
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–µ–π –∏–∑ paths.json –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—É—Ç–µ–π
const getPaths = (): PathsConfig => {
  try {
    log('–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—É—Ç–µ–π...', 'info')
    
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—É—Ç–µ–π
    log(`üîç –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${process.cwd()}`, 'info')
    log(`üîç __dirname: ${__dirname}`, 'info')
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—É—Ç–µ–π –∫ paths.json (–ü–û–†–¢–ê–¢–ò–í–ù–û–ï –†–ï–®–ï–ù–ò–ï)
    const projectRoot = findProjectRoot()
    const possiblePaths = [
      // 1. –ß–µ—Ä–µ–∑ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)
      path.join(projectRoot, 'pyqt_app', 'data', 'paths.json'),
      // 2. –ò–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ –≤–≤–µ—Ä—Ö –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
      path.join(__dirname, '../../../../pyqt_app/data/paths.json'),
      path.join(__dirname, '../../../pyqt_app/data/paths.json'),
      // 3. –ò–∑ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      path.join(process.cwd(), 'pyqt_app/data/paths.json'),
      path.join(process.cwd(), '../pyqt_app/data/paths.json'),
      // 4. –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∫–∞–∫ fallback
      '../../../pyqt_app/data/paths.json',
      '../../../../pyqt_app/data/paths.json'
    ]
    
    log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ paths.json:', 'info')
    let pathsFile = null
    
    for (const testPath of possiblePaths) {
      const resolvedPath = path.resolve(testPath)
      log(`   –ü—Ä–æ–≤–µ—Ä—è–µ–º: ${resolvedPath}`, 'info')
      if (fs.existsSync(resolvedPath)) {
        log(`   ‚úÖ –ù–∞–π–¥–µ–Ω!`, 'success')
        pathsFile = resolvedPath
        break
      } else {
        log(`   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω`, 'warning')
      }
    }
    
    if (pathsFile && fs.existsSync(pathsFile)) {
      log(`üìÑ –ß–∏—Ç–∞–µ–º paths.json –∏–∑: ${pathsFile}`, 'success')
      const pathsData = JSON.parse(fs.readFileSync(pathsFile, 'utf-8'))
      log(`üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ paths.json: ${JSON.stringify(pathsData, null, 2)}`, 'info')
      
      const excelPath = pathsData.excel_file_path
      const directoryPath = pathsData.directory_path
      
      if (excelPath && directoryPath) {
        log('‚úÖ –ü—É—Ç–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ paths.json', 'success')
        log(`üìÑ Excel —Ñ–∞–π–ª: ${excelPath}`, 'info')
        log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ñ–∞–π–ª–æ–≤: ${directoryPath}`, 'info')
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –ø—É—Ç—è–º
        log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞: ${excelPath}`, 'info')
        if (fs.existsSync(excelPath)) {
          log(`‚úÖ Excel —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω`, 'success')
        } else {
          log(`‚ùå Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ –∏–∑ paths.json`, 'error')
        }
        
        log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${directoryPath}`, 'info')
        if (fs.existsSync(directoryPath)) {
          log(`‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞`, 'success')
        } else {
          log(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏ –∏–∑ paths.json`, 'error')
        }
        
        return {
          excelPath: excelPath,
          filesDirectory: directoryPath
        }
      } else {
        log('‚ùå –ü—É—Ç–∏ –≤ paths.json –Ω–µ–ø–æ–ª–Ω—ã–µ', 'warning')
        log(`   excel_file_path: ${excelPath || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`, 'warning')
        log(`   directory_path: ${directoryPath || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`, 'warning')
      }
    } else {
      log('‚ùå –§–∞–π–ª paths.json –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –ø—É—Ç–µ–π', 'warning')
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è paths.json: ${error}`, 'error')
  }
  
  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏
  log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏', 'warning')
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —Å–∫—Ä–∏–ø—Ç–∞
  const defaultExcelPath = path.join(__dirname, 'files/releases.xlsx')
  const defaultFilesDirectory = path.join(__dirname, 'files')
  
  log(`üìÑ Excel —Ñ–∞–π–ª: ${defaultExcelPath}`, 'info')
  log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ñ–∞–π–ª–æ–≤: ${defaultFilesDirectory}`, 'info')
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞: ${defaultExcelPath}`, 'info')
  if (fs.existsSync(defaultExcelPath)) {
    log(`‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Excel —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω`, 'success')
  } else {
    log(`‚ùå –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'error')
  }
  
  log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${defaultFilesDirectory}`, 'info')
  if (fs.existsSync(defaultFilesDirectory)) {
    log(`‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞`, 'success')
  } else {
    log(`‚ùå –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`, 'error')
  }
  
  return {
    excelPath: defaultExcelPath,
    filesDirectory: defaultFilesDirectory
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ apiConfig
const validateEnvironment = (): boolean => {
  log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API...', 'info')
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ apiConfig (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º —Å–∫—Ä–∏–ø—Ç–µ)
  const requiredFields = [
    { key: 'apiUrl', value: apiConfig.apiUrl, env: 'EMD_API' },
    { key: 'spaceId', value: apiConfig.spaceId, env: 'EMD_SPACE' },
    { key: 'token', value: apiConfig.token, env: 'EMD_TOKEN' },
    { key: 'user_id', value: apiConfig.user_id, env: 'EMD_USER_ID' }
  ]
  
  let allValid = true
  
  log('–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API:', 'info')
  requiredFields.forEach(field => {
    if (field.value) {
      const displayValue = field.key === 'token' ? '***—Å–∫—Ä—ã—Ç–æ***' : field.value
      log(`‚úÖ ${field.key}: ${displayValue}`, 'success')
    } else {
      log(`‚ùå ${field.key}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${field.env})`, 'error')
      allValid = false
    }
  })
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ EMD_ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  log('–î–æ—Å—Ç—É–ø–Ω—ã–µ EMD_ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:', 'info')
  Object.keys(process.env)
    .filter(key => key.startsWith('EMD_'))
    .forEach(key => {
      const value = process.env[key]
      const displayValue = key.includes('TOKEN') ? '***—Å–∫—Ä—ã—Ç–æ***' : (value ? `${value.substring(0, 50)}...` : '–ø—É—Å—Ç–∞—è')
      log(`üìã ${key}: ${displayValue}`, 'info')
    })
  
  if (!allValid) {
    log('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç', 'error')
    log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ PyQt –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', 'warning')
    return false
  }
  
  log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞', 'success')
  return true
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
const validateFiles = async (releasesData: any[], filesDirectory: string): Promise<boolean> => {
  log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤...', 'info')
  
  let allFilesExist = true
  let totalFiles = 0
  let existingFiles = 0
  
  for (const data of releasesData) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã —Ç—Ä–µ–∫–æ–≤
    for (const track of data?.tracks || []) {
      totalFiles++
      const trackPath = `${filesDirectory}/${track.src}`
      if (fs.existsSync(trackPath)) {
        existingFiles++
      } else {
        log(`–§–∞–π–ª —Ç—Ä–µ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${track.src}`, 'error')
        allFilesExist = false
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –æ–±–ª–æ–∂–∫–∏
    if (data.cover) {
      totalFiles++
      const coverPath = `${filesDirectory}/${data.cover}`
      if (fs.existsSync(coverPath)) {
        existingFiles++
      } else {
        log(`–§–∞–π–ª –æ–±–ª–æ–∂–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${data.cover}`, 'error')
        allFilesExist = false
      }
    }
  }
  
  log(`–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${existingFiles}/${totalFiles}`, existingFiles === totalFiles ? 'success' : 'warning')
  return allFilesExist
}

const getFile = async (fileName: string, filePath: string): Promise<{ name: string, source: string } | null> => {
  if (!fileName) return null

  try {
    const result = await uploadingFile({
      fileName,
      filePath,
      logging: false // –û—Ç–∫–ª—é—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    })
    
    if (result) {
      log(`–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${fileName}`, 'success')
    }
    
    return result
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ${fileName}: ${error}`, 'error')
    return null
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
const showProgress = (current: number, total: number, item: string) => {
  const percentage = Math.round((current / total) * 100)
  const progressBar = '‚ñà'.repeat(Math.floor(percentage / 5)) + '‚ñë'.repeat(20 - Math.floor(percentage / 5))
  log(`–ü—Ä–æ–≥—Ä–µ—Å—Å: [${progressBar}] ${percentage}% (${current}/${total}) - ${item}`, 'info')
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
const showFinalReport = (stats: UploadStats) => {
  const duration = stats.endTime ? Math.round((stats.endTime.getTime() - stats.startTime.getTime()) / 1000) : 0
  
  console.log('\n' + '='.repeat(60))
  log('–û–¢–ß–ï–¢ –û –ó–ê–ì–†–£–ó–ö–ï –†–ï–õ–ò–ó–û–í', 'info')
  console.log('='.repeat(60))
  
  log(`–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration} —Å–µ–∫—É–Ω–¥`, 'info')
  log(`–í—Å–µ–≥–æ —Ä–µ–ª–∏–∑–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: ${stats.totalReleases}`, 'info')
  log(`–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ–ª–∏–∑–æ–≤: ${stats.successfulUploads}`, 'success')
  log(`–û—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–ª–∏–∑–æ–≤: ${stats.failedUploads}`, stats.failedUploads > 0 ? 'error' : 'info')
  log(`–í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: ${stats.totalTracks}`, 'info')
  log(`–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: ${stats.successfulTracks}`, 'success')
  log(`–û—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–æ–≤: ${stats.failedTracks}`, stats.failedTracks > 0 ? 'error' : 'info')
  
  const successRate = Math.round((stats.successfulUploads / stats.totalReleases) * 100)
  log(`–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫: ${successRate}%`, successRate === 100 ? 'success' : 'warning')
  
  console.log('='.repeat(60) + '\n')
}

(async () => {
  const stats: UploadStats = {
    totalReleases: 0,
    successfulUploads: 0,
    failedUploads: 0,
    totalTracks: 0,
    successfulTracks: 0,
    failedTracks: 0,
    startTime: new Date()
  }

  try {
    log('üöÄ –ó–ê–ü–£–°–ö –ó–ê–ì–†–£–ó–ö–ò –†–ï–õ–ò–ó–û–í', 'info')
    log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–≥—Ä—É–∑–∫–∏...', 'info')

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º —Å–∫—Ä–∏–ø—Ç–µ)
    const envValid = validateEnvironment()
    if (!envValid) {
      log('‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –Ω–µ –ø–æ–ª–Ω–∞—è, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...', 'warning')
      log('üí° –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω—ã –≤ PyQt –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', 'warning')
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    const { excelPath, filesDirectory } = getPaths()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    if (!fs.existsSync(excelPath)) {
      log(`Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${excelPath}`, 'error')
      process.exit(1)
    }

    if (!fs.existsSync(filesDirectory)) {
      log(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${filesDirectory}`, 'error')
      process.exit(1)
    }

    log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...', 'info')
    
    let audioPlatformsList: any
    
    try {
      log('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞—É–¥–∏–æ–ø–ª–∞—Ç—Ñ–æ—Ä–º...', 'info')
      audioPlatformsList = await getTableRows({
        tableName: 'audioPlatformsOptions',
      })

      if (!audioPlatformsList?.data) {
        log('API –æ—Ç–≤–µ—Ç–∏–ª, –Ω–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç', 'error')
        log(`–û—Ç–≤–µ—Ç API: ${JSON.stringify(audioPlatformsList, null, 2)}`, 'info')
        
        if (!envValid) {
          log('üí° –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', 'warning')
          log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ PyQt –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', 'warning')
        }
        
        process.exit(1)
      }

      log(`‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç! –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞—É–¥–∏–æ–ø–ª–∞—Ç—Ñ–æ—Ä–º: ${audioPlatformsList.data.length}`, 'success')
      
    } catch (apiError: any) {
      log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API:', 'error')
      log(`–¢–∏–ø –æ—à–∏–±–∫–∏: ${apiError.name}`, 'error')
      log(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${apiError.message}`, 'error')
      
      if (apiError.response) {
        log(`HTTP —Å—Ç–∞—Ç—É—Å: ${apiError.response.status}`, 'error')
        log(`HTTP –¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(apiError.response.data, null, 2)}`, 'error')
      }
      
      if (apiError.code === 'ENOTFOUND') {
        log('üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å DNS/–∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º', 'warning')
      } else if (apiError.response?.status === 401) {
        log('üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω—ã', 'warning')
      } else if (apiError.response?.status === 403) {
        log('üí° –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'warning')
      } else if (apiError.response?.status >= 500) {
        log('üí° –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞', 'warning')
      }
      
      process.exit(1)
    }

    log('–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –∏–∑ Excel...', 'info')
    
    let releasesData: any[]
    
    try {
      releasesData = getReleasesDataJson({
        sourceFile: excelPath,
        allCountries: countryCodes.map((item) => item.country),
        allAudioPlatformsList: audioPlatformsList?.data.map(({ data }: any) => data.value)
      })

      if (!releasesData || releasesData.length === 0) {
        log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ä–µ–ª–∏–∑–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏', 'error')
        log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:', 'warning')
        log('   - –ï—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ Excel —Ñ–∞–π–ª–µ', 'warning')
        log('   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'warning')
        log('   - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –æ–∂–∏–¥–∞–µ–º–æ–º—É', 'warning')
        process.exit(1)
      }

      stats.totalReleases = releasesData.length
      stats.totalTracks = releasesData.reduce((sum, release) => sum + (release?.tracks?.length || 0), 0)

      log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–∏–∑–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: ${stats.totalReleases}`, 'success')
      log(`–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤: ${stats.totalTracks}`, 'info')
      
    } catch (parseError: any) {
      log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Excel —Ñ–∞–π–ª–∞:', 'error')
      log(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${parseError.message}`, 'error')
      
      if (parseError.message.includes('XLSX') || parseError.message.includes('workbook')) {
        log('üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º Excel —Ñ–∞–π–ª–∞', 'warning')
        log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .xlsx', 'warning')
      } else if (parseError.message.includes('sheet') || parseError.message.includes('worksheet')) {
        log('üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å –ª–∏—Å—Ç–∞–º–∏ Excel —Ñ–∞–π–ª–∞', 'warning')
        log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ', 'warning')
      }
      
      process.exit(1)
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
    log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –∏ –æ–±–ª–æ–∂–µ–∫...', 'info')
    
    try {
      const filesValid = await validateFiles(releasesData, filesDirectory)
      if (!filesValid) {
        log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç', 'warning')
        log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–∞–º–∏:', 'warning')
        log(`   ${filesDirectory}`, 'warning')
        log('–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏...', 'warning')
      } else {
        log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã', 'success')
      }
    } catch (fileError: any) {
      log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–æ–≤:', 'error')
      log(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${fileError.message}`, 'error')
      log('–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...', 'warning')
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é (–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏)
    const initialIteration = getInitialIteration()
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    if (initialIteration > 0) {
      // –ü—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∏—Ç—ã–≤–∞–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ä–µ–ª–∏–∑—ã
      // last_processed_index —Ç–µ–ø–µ—Ä—å –æ–∑–Ω–∞—á–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –£–°–ü–ï–®–ù–û –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ä–µ–ª–∏–∑–∞
      // –ø–æ—ç—Ç–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ = last_processed_index + 1
      const uploadState = getUploadStateFromFile()
      const lastProcessedIndex = uploadState?.last_processed_index ?? -1
      const alreadyUploaded = lastProcessedIndex + 1
      
      stats.successfulUploads = alreadyUploaded
      
      // –¢–∞–∫–∂–µ —É—á–∏—Ç—ã–≤–∞–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏
      const processedTracks = releasesData.slice(0, alreadyUploaded).reduce((sum, release) => sum + (release?.tracks?.length || 0), 0)
      stats.successfulTracks = processedTracks
      
      log(`üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å —Ä–µ–ª–∏–∑–∞ ${initialIteration + 1} –∏–∑ ${stats.totalReleases}`, 'info')
      log(`üìä –£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ–ª–∏–∑–æ–≤: ${alreadyUploaded}`, 'info')
      log(`üìä –£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: ${processedTracks}`, 'info')
    } else {
      log('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ–ª–∏–∑–æ–≤...', 'info')
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–ª–∏–∑–æ–≤
    await tableFlowIterations(
      async (iteration: number) => {
        const data = releasesData[iteration]
        
        try {
          showProgress(iteration + 1, stats.totalReleases, `–†–µ–ª–∏–∑: ${data.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`)

          const tracks = []
          for (const item of data?.tracks || []) {
            const track = await getFile(
              item.name,
              `${filesDirectory}/${item.src}`
            )
      
            if (track) {
              stats.successfulTracks++
            } else {
              stats.failedTracks++
            }

            tracks.push({
              ...item,
              src: track?.source || ''
            })
          }

          const cover = await getFile(
            data.name,
            `${filesDirectory}/${data.cover}`
          )
    
          const payload = {
            ...releaseConfig,
            ...data,
            tracks,
            cover: { name: cover?.name || '', url: cover?.source || '' }
          }

          await upsertTableRow({
            tableName: 'releases',
            payload,
            notice: 'automated generate silk',
            user: apiConfig.user_id
          })

          stats.successfulUploads++
          log(`–†–µ–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: ${data.name}`, 'success')

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–ª–∏–∑–∞
          saveUploadState(iteration, stats.totalReleases, excelPath, filesDirectory)

        } catch (error: any) {
          stats.failedUploads++
          log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–ª–∏–∑–∞ ${data.name}:`, 'error')
          log(`   –¢–∏–ø –æ—à–∏–±–∫–∏: ${error.name || 'Unknown'}`, 'error')
          log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`, 'error')
          
          if (error.response) {
            log(`   HTTP —Å—Ç–∞—Ç—É—Å: ${error.response.status}`, 'error')
            if (error.response.data) {
              log(`   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${JSON.stringify(error.response.data, null, 2)}`, 'error')
            }
          }
          
          if (error.code === 'ENOTFOUND') {
            log('üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º', 'warning')
          } else if (error.response?.status === 413) {
            log('üí° –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏', 'warning')
          } else if (error.response?.status === 422) {
            log('üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö', 'warning')
          }
          
          // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ - —Ä–µ–ª–∏–∑ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
          // –ü—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≤—Ç–æ—Ä–∏–º —ç—Ç—É –∏—Ç–µ—Ä–∞—Ü–∏—é
          
          // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
          throw error
        }
      },
      { initialIteration, iterations: stats.totalReleases, interval: 1000 }
    )

    stats.endTime = new Date()
    log('üéâ –ó–ê–ì–†–£–ó–ö–ê –†–ï–õ–ò–ó–û–í –ó–ê–í–ï–†–®–ï–ù–ê', 'success')
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    clearUploadState()
    
    showFinalReport(stats)

  } catch (error: any) {
    stats.endTime = new Date()
    log('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', 'error')
    log(`–¢–∏–ø –æ—à–∏–±–∫–∏: ${error.name || 'Unknown'}`, 'error')
    log(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`, 'error')
    
    if (error.stack) {
      log('–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:', 'error')
      log(error.stack, 'error')
    }
    
    if (error.code) {
      log(`–ö–æ–¥ –æ—à–∏–±–∫–∏: ${error.code}`, 'error')
    }
    
    log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:', 'warning')
    log('   - –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º', 'warning')
    log('   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API', 'warning')
    log('   - –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö', 'warning')
    log('   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞', 'warning')
    
    showFinalReport(stats)
    process.exit(1)
  }
})()
