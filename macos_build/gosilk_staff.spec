# -*- mode: python ; coding: utf-8 -*-

import os
import shutil
from pathlib import Path

block_cipher = None

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (–∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞)
# –í PyInstaller –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º os.getcwd() –≤–º–µ—Å—Ç–æ __file__
base_dir = Path(os.getcwd())

# –ù–∞—Ö–æ–¥–∏–º Node.js runtime –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è
def find_node_runtime():
    """–ù–∞—Ö–æ–¥–∏—Ç Node.js –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ bundle"""
    node_files = {}
    
    # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã Node.js
    node_executable = shutil.which('node')
    npm_executable = shutil.which('npm')
    npx_executable = shutil.which('npx')
    
    if node_executable:
        node_files['node'] = node_executable
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω Node.js: {node_executable}")
    else:
        print("‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        
    if npm_executable:
        node_files['npm'] = npm_executable
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω npm: {npm_executable}")
        
    if npx_executable:
        node_files['npx'] = npx_executable
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω npx: {npx_executable}")
    
    return node_files

# –ü–æ–ª—É—á–∞–µ–º Node.js runtime
node_runtime = find_node_runtime()

# –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞
python_files = [
    str(base_dir / 'run_app.py'),
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è .bin —Ñ–∞–π–ª–æ–≤
def add_bin_files():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã –∏–∑ node_modules/.bin"""
    bin_files = []
    bin_dir = base_dir / 'node_modules' / '.bin'
    
    # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è TypeScript
    critical_bins = ['ts-node', 'tsc', 'ts-node-esm', 'ts-node-script']
    
    for bin_name in critical_bins:
        bin_file = bin_dir / bin_name
        if bin_file.exists():
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª, –∞ –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            bin_files.append((str(bin_file), f'node_modules_bin/{bin_name}'))
            print(f"   ‚úÖ –í–∫–ª—é—á–µ–Ω {bin_name}")
    
    return bin_files

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ app bundle
datas = [
    # PyQt —Ä–µ—Å—É—Ä—Å—ã –∏ –¥–∞–Ω–Ω—ã–µ
    (str(base_dir / 'pyqt_app' / 'resources'), 'pyqt_app/resources'),
    (str(base_dir / 'pyqt_app' / 'data'), 'pyqt_app/data'),
    
    # –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JavaScript –∏–∑ TypeScript
    (str(base_dir / 'src'), 'src'),
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    (str(base_dir / 'package.json'), '.'),
    (str(base_dir / 'tsconfig.json'), '.'),
    
    # Python —Å–∫—Ä–∏–ø—Ç—ã —É—Ç–∏–ª–∏—Ç
    (str(base_dir / 'scripts'), 'scripts'),
    
    # –®–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    (str(base_dir / 'macos_build' / 'env_template.txt'), '.'),
]

# –†–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω–∏—è Node.js –º–æ–¥—É–ª–µ–π
INCLUDE_ALL_NODE_MODULES = True  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ True –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π

if INCLUDE_ALL_NODE_MODULES:
    print("üì¶ –í–∫–ª—é—á–∞–µ–º –í–°–ï Node.js –º–æ–¥—É–ª–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ –∏ –∑–∞–Ω–∏–º–∞—Ç—å –º–Ω–æ–≥–æ –º–µ—Å—Ç–∞)...")
    node_modules_path = base_dir / 'node_modules'
    if node_modules_path.exists():
        # –í–∫–ª—é—á–∞–µ–º node_modules, –Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        print("üîß –ö–æ–ø–∏—Ä—É–µ–º node_modules —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø—É—Ç–µ–π...")
        
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–æ–ø–∏—é node_modules –±–µ–∑ –≥–ª—É–±–æ–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        import shutil
        import tempfile
        import os
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è "–ø–ª–æ—Å–∫–æ–π" –≤–µ—Ä—Å–∏–∏ node_modules
        temp_node_modules = base_dir / 'temp_node_modules'
        if temp_node_modules.exists():
            shutil.rmtree(temp_node_modules)
        temp_node_modules.mkdir()
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –º–æ–¥—É–ª–µ–π
        for item in node_modules_path.iterdir():
            if item.is_dir() and not item.name.startswith('.'):
                try:
                    dest_path = temp_node_modules / item.name
                    # –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∏–∑–±–µ–≥–∞—è –≥–ª—É–±–æ–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
                    shutil.copytree(item, dest_path, ignore=shutil.ignore_patterns('node_modules'))
                    print(f"   ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω {item.name}")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω {item.name}: {e}")
        
        datas.append((str(temp_node_modules), 'node_modules'))
        print(f"   ‚úÖ –í–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ node_modules")
else:
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ Node.js –º–æ–¥—É–ª–∏
    print("üì¶ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ Node.js –º–æ–¥—É–ª–∏...")
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        node_modules = get_required_node_modules()
        datas.extend(node_modules)
    except Exception as e:
        print(f"‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")
        # Fallback –∫ —Ä—É—á–Ω–æ–º—É —Å–ø–∏—Å–∫—É
        node_modules = get_manual_node_modules()
        datas.extend(node_modules)

# –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã –∏–∑ .bin
print("üîß –í–∫–ª—é—á–∞–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã –∏–∑ node_modules/.bin:")
datas.extend(add_bin_files())

# –î–æ–±–∞–≤–ª—è–µ–º Node.js runtime –≤ bundle (–≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é)
if node_runtime:
    print("üöÄ –í–∫–ª—é—á–∞–µ–º Node.js runtime –≤ app bundle:")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é node/bin –≤ bundle
    if 'node' in node_runtime:
        datas.append((node_runtime['node'], 'node/bin/'))
        print(f"   ‚úÖ node -> node/bin/node")
    
    if 'npm' in node_runtime:
        datas.append((node_runtime['npm'], 'node/bin/'))
        print(f"   ‚úÖ npm -> node/bin/npm")
        
    if 'npx' in node_runtime:
        datas.append((node_runtime['npx'], 'node/bin/'))
        print(f"   ‚úÖ npx -> node/bin/npx")
else:
    print("‚ö†Ô∏è Node.js runtime –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ Node.js")

# –°–∫—Ä—ã—Ç—ã–µ –∏–º–ø–æ—Ä—Ç—ã Python –º–æ–¥—É–ª–µ–π
hiddenimports = [
    # PyQt6 –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
    'PyQt6.QtCore',
    'PyQt6.QtWidgets', 
    'PyQt6.QtGui',
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É—Ç–∏–ª–∏—Ç—ã
    'loguru',
    'pandas',
    'openpyxl',
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    'pathlib',
    'subprocess',
    'json',
    'sys',
    'os',
    'shutil',
    'datetime',
    'urllib',
    'ssl',
    
    # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel –∏ CSV
    'csv',
    'xml',
    'xml.etree',
    'xml.etree.ElementTree',
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω—É–∂–Ω—ã—Ö Node.js –º–æ–¥—É–ª–µ–π
def get_required_node_modules():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ Node.js –º–æ–¥—É–ª–∏ –∏–∑ package.json"""
    import json
    
    required_modules = []
    package_json_path = base_dir / 'package.json'
    
    if package_json_path.exists():
        try:
            with open(package_json_path, 'r', encoding='utf-8') as f:
                package_data = json.load(f)
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ package.json
            dependencies = package_data.get('dependencies', {})
            dev_dependencies = package_data.get('devDependencies', {})
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            all_deps = {**dependencies, **dev_dependencies}
            
            print("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Node.js –º–æ–¥—É–ª–µ–π:")
            
            for module_name in all_deps.keys():
                module_path = base_dir / 'node_modules' / module_name
                if module_path.exists():
                    required_modules.append((str(module_path), f'node_modules/{module_name}'))
                    print(f"   ‚úÖ {module_name}")
                else:
                    print(f"   ‚ö†Ô∏è {module_name} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –º–æ–¥—É–ª–µ–π: {len(required_modules)} –∏–∑ {len(all_deps)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json: {e}")
            # Fallback –∫ —Ä—É—á–Ω–æ–º—É —Å–ø–∏—Å–∫—É
            return get_manual_node_modules()
    
    return required_modules

def get_manual_node_modules():
    """–†—É—á–Ω–æ–π —Å–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö Node.js –º–æ–¥—É–ª–µ–π (fallback)"""
    manual_modules = [
        'ts-node', 'typescript', 'axios', 'dotenv', 'dayjs',
        'tus-js-client', 'convert-csv-to-json', 'convert-excel-to-json',
        'tsconfig-paths'
    ]
    
    modules = []
    print("üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—á–Ω–æ–π —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π:")
    
    for module_name in manual_modules:
        module_path = base_dir / 'node_modules' / module_name
        if module_path.exists():
            modules.append((str(module_path), f'node_modules/{module_name}'))
            print(f"   ‚úÖ {module_name}")
        else:
            print(f"   ‚ùå {module_name} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
    
    return modules

a = Analysis(
    python_files,
    pathex=[str(base_dir)],
    binaries=[],
    datas=datas,
    hiddenimports=hiddenimports,
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∫–æ–Ω–∫–∏
icon_path = base_dir / 'pyqt_app' / 'resources' / 'icon.icns'
app_icon = str(icon_path) if icon_path.exists() else None

exe = EXE(
    pyz,
    a.scripts,
    [],
    exclude_binaries=True,
    name='GoSilk Staff',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    console=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Å–æ–ª—å –¥–ª—è GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    disable_windowed_traceback=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon=app_icon,
)

coll = COLLECT(
    exe,
    a.binaries,
    a.zipfiles,
    a.datas,
    strip=False,
    upx=True,
    upx_exclude=[],
    name='GoSilk Staff',
)

# –°–æ–∑–¥–∞–Ω–∏–µ macOS app bundle
app = BUNDLE(
    coll,
    name='GoSilk Staff.app',
    icon=app_icon,
    bundle_identifier='com.emd.gosilk-staff',
    version='1.0.0',
    info_plist={
        'CFBundleName': 'GoSilk Staff',
        'CFBundleDisplayName': 'GoSilk Staff',
        'CFBundleIdentifier': 'com.emd.gosilk-staff',
        'CFBundleVersion': '1.0.0',
        'CFBundleShortVersionString': '1.0.0',
        'LSMinimumSystemVersion': '10.14',
        'NSHighResolutionCapable': True,
        'CFBundleDocumentTypes': [
            {
                'CFBundleTypeName': 'Excel Files',
                'CFBundleTypeExtensions': ['xlsx', 'xls'],
                'CFBundleTypeRole': 'Editor'
            }
        ],
    },
)

# –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏
print("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
temp_node_modules = base_dir / 'temp_node_modules'
if temp_node_modules.exists():
    import shutil
    shutil.rmtree(temp_node_modules)
    print("   ‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ temp_node_modules —É–¥–∞–ª–µ–Ω–∞")

# –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å Node.js –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏
# chmod +x "GoSilk Staff.app/Contents/Resources/node/bin/*"
print("üí° –ü–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:")
print('   chmod +x "GoSilk Staff.app/Contents/Resources/node/bin/"*') 